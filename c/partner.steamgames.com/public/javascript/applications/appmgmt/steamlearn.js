(self.webpackChunkappmgmt_storeadmin =
  self.webpackChunkappmgmt_storeadmin || []).push([
  [5933],
  {
    chunkid: (module) => {
      module.exports = {
        InputOption: "_1ShdTmv0Ei7D93E1js23mC",
        Name: "_3WEibGFdezp5Jhzs3JaJEy",
        Small: "_2e22Ir-Amh_wMWtyooBBrU",
        ValueInput: "_3xxzPYh_XXYL4rNrbqFjpm",
        Wide: "_3CDBuSdwDrwwvUFAKgF99I",
        Invalid: "_9e38p_A3TJArsDBudYflV",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "_5z9Gpqrnb8MyrexjHrJ8k",
        Separator: "mmbGkd5SfnY_qb3LLlZuQ",
        TextButton: "_2USoM1FPK0rrGH1iDQgPr4",
        OptionBlock: "_2rxRGlejBOhkRzEXB7tJy0",
        OptionHeader: "_2XvR4eHcRVkr5_Bp2aZQur",
        OptionDesc: "_2UCgrIdrBE5qyTy6CLBVW5",
        SteamLearnButton: "I9AdyUkZSevtXNAgV7XZ4",
        Disabled: "_5Ie4UgzXUTqV5NiFrxzpI",
        Hidden: "_3lQcGaFsid42sf0MLy73cB",
        Large: "_155KAX5laPt5YFyhqOwX8u",
        Medium: "_3Lvdz-ZBJzDt0Sc3aUGcew",
        Blue: "_1qMTRRLhSlbF_UEMXNfTTb",
        Red: "_14L88rvELqfk11Mix6bQcL",
        DashboardPage: "_2DQPUEkEuXCEyoKHFl1lyQ",
        ProjectListContainer: "_2Hvue6Rgy03QsovzYIunQH",
        EventsContainer: "_1-cSLmZAfNajKDrM6fc3rM",
        DashboardHeader: "_3J7N7aE7ex1L4WmL3UClC-",
        DashboardUnderline: "_3pRYNQm8mab5nAiTIx_tmD",
        ProjectList: "_3ugiCuauyl1Ar7ruiBArUJ",
        EventList: "_1qhv5R7HyHwNsYHJFUd5uy",
        DashboardProjectList: "_3ktOMGrugyK4v2D1Lv9Ibb",
        ListFilter: "_2_9dlnZ0TltKAtmZM6WeNb",
        ListContainer: "_3-UwIpQuhOBq2NXANGTw-3",
        ProjectEntry: "_24VHyr1IBtryEWzqUzYb3F",
        ProjectName: "NTb04vUdyluiSZxytUE36",
        ProjectDescription: "_2jQN5IwlTKLW9RS_5_Hx3z",
        ProjectID: "_1VkdZRtPkMpkRPw4zcTFfQ",
        DashboardEventList: "_1uQs0vlH6KbAvWPasb4y8Y",
        EventsListContainer: "_3vNwvZOvrZQ_BoOou4GZZE",
        WeekSelector: "_10tnbT08Yv0RIUPenBx9PV",
        LeftArrow: "_2hUp31TAW8l3vdFWKm30a9",
        RightArrow: "_1fyZCrZX7lzz6j3MD4TOim",
        DateRange: "_3Nfe7bjYcCrkDAa4-MWY0z",
        EventEntry: "_1xbpyrr7ohAW4k9JVCLkos",
        IsLive: "_1l2eyetyGa7uu6JIdK4UGA",
        Timestamp: "_3xtj3xcyHNErQ21xexhzjF",
        Name: "_1conFtxyKZjmSKrBB9nBtr",
        Title: "_3_50pdO6uWoORgLnvmSJI7",
        Status: "_2PMPJLvik8LWP8R5A95Njx",
        ProjectStatusInfo: "_3ThAGb3i-Vh1q7n-ygJ62h",
        CompletedDetails: "yuIyLFPsiZnsJu2Lwsw-z",
        Gold: "_3-gjs2mlANYwUw6xbpHlAo",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "_1RQjS8VTUhHRwMvvgdCkN1",
        Separator: "_19swQsjM6VByYd7UVT9fuC",
        TextButton: "_3-M_z3aGjMV57M9Fx5Gwkp",
        OptionBlock: "h6CgqZ4P8eGY7uvBmkMuI",
        OptionHeader: "_2Jism-FaHpZCChlrFFn5HS",
        OptionDesc: "_131-V7VehSl2sLeI4OnNAL",
        SteamLearnButton: "_3C_F8fbAoQqxG8hRVwne6o",
        Disabled: "_3p7XrdPoIEXz5_7W2XGp2j",
        Hidden: "j_BGyqU5P_pje6mMolKX-",
        Large: "_36rE1U0Cno91IQViMV2xLu",
        Medium: "_2RIw_gYxbIyOIJioWB__m-",
        Blue: "_2dlYwZSmeou2vEtZNRXHJ-",
        Red: "_2q7q2rSbbUQsXerQx2Gh5r",
        DataSourcesPage: "_2vOTnoPmpRdRl8XvrVfTwr",
        DataSourceList: "_2113mJJYiKS509JTA-10E8",
        DataSourceOption: "_38gxTdrQ1IZULJdumhDs2B",
        Selected: "_1Xm21_ltbFTbk5nBRcPoVV",
        Name: "meZLwVEyaS_4IX28tZGus",
        KeyType: "_2SOVHTZSy90_UcyeFbgEQm",
        Version: "_1HxJUpcNJRtyDJmiIy7f1r",
        Description: "_2_PC4mIyCRu0eDmOFn5Sxh",
        _: "_1UcED1WLwzuLWjqQVDBSJg",
        DataSourceDetails: "_23Pe2NhLSLOFm8ePXfEHGd",
        DataSourceElement: "KVB-bJ_t9CIgaEKhuuqMc",
        Type: "_2YwPDrKJiULyWKFMPBtDc8",
        Array: "_2nvyk9MqglP6P-YxGdI2zT",
      };
    },
    chunkid: (module) => {
      module.exports = {
        nodeWidth: "240px",
        Warning: "_2zXmpgnS9JepoO7QQkwjn2",
        Separator: "_12clBCXKUWiZjCwae7kpQ7",
        TextButton: "s0iVyD0qpYxZv4Cj-ePgU",
        OptionBlock: "Po3nHQT0OD7vtcoofbuTm",
        OptionHeader: "_3HJ1-gCeeoOZLGi2o5Vitd",
        OptionDesc: "_1AUkOxGCRDGXz-k3N5hiRX",
        SteamLearnButton: "sxu7en3enEPa7DLzkasXc",
        Disabled: "_1kGv5p9usYOltl6HYJKFcH",
        Hidden: "_3Q350YGpOWzSHpq6qs4rVd",
        Large: "_2KBmq3br4fdnqWl-PR8jTS",
        Medium: "_2ue2wZUlwSWIFVPpM4EQ3",
        Blue: "_2v0IoCHjF6aYg-LLpsW91-",
        Red: "_2WdNd5oga3Z3FW1zN52q9P",
        FlowNode: "_3Eq1xKY1WwNcrWb8SNq8tc",
        Title: "meAbe3Sy_IJ4PngdGme2-",
        TitleText: "_1WxJqlGNh1KAhOdJ6vDYnP",
        NodeID: "_2vVi7blPwSS8fOn5adc-HY",
        EditGear: "_3vw0wcz_PXm2BOSzLBm0Cm",
        Delete: "_3yetd9smfSkIKg_5DsiTcD",
        Preprocessing: "_2bCs4m3v-pseMt93DMa_n8",
        Keras: "_8VekS4xaLWJVFcgGdyfiV",
        Trainer: "_1-nxqgklmKGuYo-Bi5zbk9",
        TitleUnderBar: "_3Rx6PQCCOXnDRoU__IULtr",
        Body: "Nhk_tWo2F_uAAc3FK70kf",
        SideSection: "_2PJWoj3UxfIrVTOvakjqJB",
        Left: "KS5VRQv-Z-NGTQ0CMuhzw",
        Right: "_341wUgM-o5bfB_9z2Zfi6U",
        CenterSection: "qcMKab980F1JYu_jLO7wf",
        Comment: "_3xIJP5g9wI2YBfYJK8SK_c",
        LabelValue: "_3O43CJHQrwarXIAlkO95b0",
        Label: "_25GLzaKOlvxGGVQ9Agyyga",
        Value: "_3rXiSK6PZAVgkdUdmaIkDj",
        TrainNode: "_2Z5SycGNfFuxPJnaiwScjl",
        NodeHeader: "_3yduK1OnlOnIWYwbWrLtOZ",
        SubHeader: "KhOcvIgtZeq-Uda5l2Z3P",
        NodeBody: "_1QBSM3805Z2GHFzssBcKQ6",
        NodeOptionBlock: "_9wvW1ljbcfIlj0ufibnHP",
        NodeOptionHeader: "WIkQyPNaSXmk9SySnkW1k",
        NodeOptionDesc: "_3amyeBWhDTYJQZJ--F2CsS",
        OptionDescSub: "_1gb6_Gr69pkJGr7-2k3ERi",
        CheckboxWithLabel: "_1nRNoModD-Bh9mD22_yOu7",
        Buttons: "_2f9B57sz9IHNMGv9rbF-vz",
        EditOptions: "_2xcGD_tKzUTAJYmG5sX3Pv",
        Option: "gjJO0EYptGdauBz9IodFc",
        OptionTitle: "_29pJ8rJOv032qGdYK1OBdq",
        OptionInput: "_12TFxwcHkcwrMYZv93r4Ob",
        VeryWide: "_3HA1H2kQCgDlOGZkJmiHFT",
        Invalid: "_3qpmPWCocNFVCZMluMmSWQ",
        InputSelect: "_3WRZKoLAwpsbyBHxy0xjOU",
        Shape: "_2JtFkG49Z9lCgx6-tYX6DA",
        TrainNodeEditDialog: "_23Ih6HXn-InKtpkJafqSIW",
        ConnectorID: "_1xOlwS1HMOrxo8J_LYAuqi",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "_4AL0jpd9caKhawb-nzaw9",
        Separator: "_3UsNd3BjHd2j49GG7tVHIb",
        TextButton: "_2wwVAlgdlJP2Cht9_AZw-9",
        OptionBlock: "_3X7rO8yVTAQJi1Nvyl5-Zx",
        OptionHeader: "_3tIraDZDdSOdmPFB9JQ5ni",
        OptionDesc: "_17eB2nS0upaMW-WyZcSalD",
        SteamLearnButton: "_2JNpkoG8qu6BT3Gp2sjaoi",
        Disabled: "lGOCYbLm7VcxsgT1u_Xj0",
        Hidden: "J7kzJOGroShdzPvAHdw4b",
        Large: "_1Wi3msAJo-5TbRcUjLLQ-k",
        Medium: "_2Fqb61nNb_lpvmMzt01zln",
        Blue: "_3Hz6CBWHqgJfDxLj-l1L8Q",
        Red: "cP4LFG1VP0lObwyUf3Fk7",
        ProjectCreatePage: "_3GUPWnrEUZJNqBcSpImXPt",
        EditSection: "_25OCaMWANr1Gdm4Xr9I7lM",
        EditSectionTitle: "_3fdSgX8MVqki8bRenzcUCs",
        InputTitle: "_1rZnOcTzVFHGDq4Ron1jV5",
        InputWide: "_3WyPMDvPwAG2YDZpaYrCip",
        InputAreaWide: "_3pP5ATj1o_U9BhFnvXqssy",
        CreateProjectResultDialog: "_1P9YZ56fmnbR-zpSLkooFs",
        CreateProjectResultDialogContents: "_9vDId0SjsI67FtRY6LfS_",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "_34i0Gjnp0N1EcZIcc56WAO",
        Separator: "_29kZXmJc7oPg1mWxnCH2O2",
        TextButton: "_2yO-1Bqk-k0s4ySXRbfsrf",
        OptionBlock: "_3pnEa2XVtC6CrNAqe-HRPE",
        OptionHeader: "_1PRMewvzGZpdzOFmmQ_Oo4",
        OptionDesc: "_3zBVNFzZDm0uQDpQKdy0eH",
        SteamLearnButton: "bG5n69QpFDpeAOSkNNnf6",
        Disabled: "_2vNCC0QQAztH6pw72vgXjn",
        Hidden: "_5WD4bso01SmDlBsJSpOks",
        Large: "_1bUsMDJX05iGKdM9-JvdWF",
        Medium: "gfYM5qizD19LiuzFkOgvz",
        Blue: "_36quePZsCSAzCKTYcTRAcG",
        Red: "_3Vpxjq2MBTE8vAq3TQgDVn",
        ProjectDataSourcesPage: "_1IXecrSRWsHRCJME-2lTl0",
        DataSourceList: "_39xuLYJitrZKx2GSu0BBxz",
        AddDataSourceDialog: "_1mNGXh3Y8UVtaskBP0DmtH",
        AddDataSourceDialogContents: "_3RAxTFXS3uTK8j1kIT-9Eu",
        Header: "_2pxHaVs2vw-M6nxiZW3G1G",
        TypeLimit: "_2e3qODCcZY1CudwkfINXtQ",
        DataSourceListContainer: "_3LgNXsHp8-vfcsKPtD_ev0",
        DataSourceOption: "_25NX7EUdAxrlWELlgJK96S",
        Selected: "_38mwl07D6p6zlCsTmAFTqQ",
        TitleRow: "_2OvLrJf3ccY1g-E9Z0EtYF",
        Name: "_3Hj5Dnu-OjT6rZNrQsAO8o",
        Type: "_1yckLD8Rk3_n4H8zI5kJcH",
        Version: "_3y0ttYCjvwrRn4wnBGH7yw",
        Description: "_1ObgcW2JI-o97Va8Vy3yVr",
        ProjectConfigDataSourceElement: "yhrLnPkNW-XTcMa2lXBeb",
        IsOldDataSourceVersion: "_1rvbTlPBQ02DzQEGvlczN9",
        NameAndID: "_1_r3gQWzjc9LxSZS9YGY2w",
        _: "_37ejlkxhuU1xrBauwqD_Cj",
        Remove: "_3sDBJ-bMrGlXMu4scVLoz7",
        Update: "TgJ1hQZnfmvbjioKnXFZr",
        ProjectConfigDataSourceDataElementRoutingList:
          "_26BWQmuzeIy5EQmHLgEs2o",
        ProjectConfigDataSourceElementRoutingWrapper: "_1epfqSJxCTbIV5lTrq3svJ",
        DataSourceName: "_1fr-wy2Hrpl1lLNNcLJVlM",
        ProjectConfigDataSourceElementRouting: "_3RUIE6yCJh3p0owNjCXjiq",
        LeftSection: "_1B_4D6u0CHUynhmzI2eSH9",
        Array: "_1maQeLdCL_TgaS6OxFPloS",
        TypeAndExpandCollapse: "_39Go_4o1oRa9RRaVdNfEja",
        Explode: "_3YW8YG7vMX_bcMTXITyJwV",
        Collapse: "_1_0rPaNmeRAqyrStGWKmFL",
        InputSection: "_2D9cDZLQaQWWmKHVpDkBEa",
        InputSelect: "_1ptzANXmlxjCOoPL4oHJYp",
        NormalizeSection: "_1dPgpqBo3ju2CQXPs0L6u3",
        PreprocessingDetails: "_1X62KWqfYW8x4gbBM6Nrfh",
        PreprocessingOptions: "_3LvgTLYIdvwGWb3epYgYp8",
        Label: "_2cyss0lDVDKHWC6xynwuUS",
        ValueInput: "PLcgRWSIg4o3I1kvamBEf",
        Invalid: "_22UX9Hdoj_hZcpeql8Aaez",
        RightSection: "_3GaIbn2sB61YtHdG4jxu0l",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "_2kVss8dBqwn8P7j96pmOLL",
        Separator: "_2czS-JpsbUTKXItaZQrkQR",
        TextButton: "_1TP61Uz0WjmMODFOOqmcNe",
        OptionBlock: "BrLKAprwzp4V5hCNEWzOh",
        OptionHeader: "_3UF5nfW8b1cwqgwdX0CAo7",
        OptionDesc: "eCPzpaQbZhdZZN7i3pM_U",
        SteamLearnButton: "_2l6JOyWb8EwB1KkJIzCvqa",
        Disabled: "_119e9Y6HCdwPaSjm558V8d",
        Hidden: "_3CNsio0zRZX8hzsNUtuqqw",
        Large: "_3kexfkc4Ijt5z6PSn6-wdk",
        Medium: "_36W4d4wO23Q_cDomcgtTf3",
        Blue: "_19Q5QTGG20Ds8Sqs2HVozN",
        Red: "_1ntkHANb7SgIFwxdOIyMzh",
        ProjectInferenceTesterPage: "GW4jmFghIwuhRh-kdTv5p",
        ProjectInferenceTesterBody: "_7Qcv3zcVMSEGdZYQQxtth",
        DataSourceElement: "_2ehKiaKQQKZFVMEEyHYrKC",
        Name: "_27fjF1aUMaTr9qE4-l_nQZ",
        OptionDetails: "_3bVi7S5JkXA1R1BWkdLtmU",
        ValueInput: "_1u3oN0NcGe5bbvc6o8Wg_q",
        Wide: "_3Vj-GgoKKOwKvTIBgTiA1g",
        Invalid: "_1d4Zdy4xTOv26n2S6GTc7O",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "MBuZncepwggxiAkaC_Nck",
        Separator: "_3b4C1MTzxQyEmaGjxPfT0_",
        TextButton: "x7w6XbC6T5a66JhS_6W0y",
        OptionBlock: "_2lpZUiYcghcKr6lxZGbl-I",
        OptionHeader: "_33cLnT3xPj3w4MFXjyn1xr",
        OptionDesc: "p2VDve7IIgMu4FQvf-J9h",
        SteamLearnButton: "_2XyTRoIEkCDrxluYfLrJ48",
        Disabled: "_2hCF1meDORwg6Pls62POqa",
        Hidden: "_17HVAjyMQuibgSYWvDKj2z",
        Large: "_2p4EpU-9zinir4QpYcGIbJ",
        Medium: "oyUgXTMa3fxZIK2oToUQD",
        Blue: "_3lg-R1gn994TTcJrgxJ1QS",
        Red: "e3J0-l7iPlHms8bH2Y22s",
        ProjectModelPage: "_2m439aOw3l56xq3Zf9Y5X7",
        ProjectModelReactFlow: "_16zi2NrOFu0k_nfXrk1quo",
        ReactFlowWrapper: "_3QiqlOU8gaUMl3as1lnqbk",
        DragSourcePanel: "_-6BVkafIQ2KOR4CL1NSvM",
        DragRow: "_3uDELIlY9yci5Dil91OoCy",
        DragRowTitle: "_3akPULnuVgomHNOOhO8NTX",
        Title: "_21Zb49tzTcR0s7S6c7MRWj",
        Preprocessing: "gSeaKG7DCfd1DnKxtFQae",
        SpacerLine: "_3IPFv1A7uYRnXkhwFxwL7b",
        Keras: "_2lkoNRWpegLxPP7lXaRLVW",
        DragRowElements: "_27I_aROA-7sEOQqLWmWm7-",
        DragSource: "xN6wI5tstlMp7cywDYdHa",
        DebugToggle: "zsiFrYGosZ5Jp0CdN7VoD",
        Enabled: "tWQvNdvcHnh22vwhv6liG",
        EditOptions: "_3TQl6GFAWHNNhYjU7ZlhE",
        Body: "_2qDZqy2HQRw3zeIlxSF1r4",
        Shape: "_2S-T686wJD269tVlYL26Vn",
        Option: "pZE2HWTP6jw9gzHUOQpQu",
        OptionInput: "_2iqXlMbJyJO-sGfMBvaxbY",
        Invalid: "_3Q2pfZ3186To2fGLAF_ook",
        CheckboxWithLabel: "JQcNd30ZrD9iz5Zfaa-hL",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "JlgVPomXmIV3L7OIALYsa",
        Separator: "_3Fimt0WfvJW7GpAarLLIBq",
        TextButton: "_3hSDT9jv-uUX6CPMUDaxG_",
        OptionBlock: "_1hR8knQ1IzxXSv6WRmbD93",
        OptionHeader: "EoUkKXYj_1tApq3P2FnLP",
        OptionDesc: "_1t0D2syByioVOyxJdP7PJU",
        SteamLearnButton: "_13wKAqD2MdFu4i8XRifrjL",
        Disabled: "QGM2NyYNDZ9W3EPhD3vAk",
        Hidden: "_29YqcAUINbnPn73vYxzdjS",
        Large: "_2gHBaoIeqoEkA5zTQlr4Zp",
        Medium: "_3JJLYTp4uFsXcqRwuXZ3Lq",
        Blue: "E440dho1H65akBAne115_",
        Red: "_2pTmd8-mzWS-j7jvzBS9oD",
        ProjectOverviewPage: "_1Nwk7koz2Z6K2YFlD0ivdn",
        OverviewContainer: "_2334BoFsGAF1tARPWBNWVb",
        LeftSide: "_1GNjqxyBoBOQBnY7_ltMRj",
        RightSide: "_2ta7SUsaaBqA4KtZzHTrlM",
        LiveTrainSection: "_3TZLZkCffpDZ5QS2CjnxLo",
        LiveTrainHeader: "_1pxPlAR3pHS1ne1rVzt-W6",
        AllTrains: "_33Mrj5CWcGEy__abkma-KD",
        AllTrainsHeader: "Pi5GFPaCt-QuVzyuC2lDq",
        EventList: "_3zWnclxZxQqdMKqTOlVKBI",
        InProgressTrains: "_1i9KtSGNuR2KPk6x69io8b",
        InProgressTrainsHeader: "_1ObRrNYQEYe_eZ35Jk-mnD",
        AccessTokensContainer: "_33FGR9L11FMfU1vef65x2u",
        AccessTokensHeader: "_3xzBHFzY9qdU9Ioe5Uxdta",
        AccessToken: "uZUCZgpVCgllf1eIB4IIp",
        TokenName: "_2O_JZxcbbI9N7xFei8GOuI",
        TokenString: "_3BuERri-pgADsrT27SKywJ",
        DataSourcesContainer: "_3lc8v4C2-y5youH0eeYmUy",
        DataSourcesHeader: "_1IzwfiAcpGnzOAXXKXbA0E",
        LiveTrain: "g5zAxk8oXuVWl_6mp7E1i",
        Time: "_3wQccJrdW_cJNeEroI60W7",
        TrainID: "_1gTZ4SH5e2zC858dL0aTu",
        LossAccuracy: "L36oqUyF8f4_IppLPXTqQ",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "ojjJ9SRkE-ckl-_-CcEOU",
        Separator: "_2olXnAjavAadNt2NwPtf7o",
        TextButton: "_2wUMtuFQwXFi5z0gEDjX9Y",
        OptionBlock: "_8PLrAqpCLmnaY9nmt3d3O",
        OptionHeader: "_3QLLtmty94AzUllrgPqAIL",
        OptionDesc: "_1iFpMOnezNtoPEEBpnq6y9",
        SteamLearnButton: "_1s2y9yZAATm7bThldHmtXL",
        Disabled: "_1e2fFw7c3M3esAXqtOSHUf",
        Hidden: "_13xDpeEWd9DtGn1BygPWcj",
        Large: "_1JCV0mg7NQPumPShE-RYYE",
        Medium: "_335nWURqbskioThp3e_tet",
        Blue: "_1tbyDp4SrpVrg6ZtLxzZi2",
        Red: "Cin_qZFBNUCdbaDZgY-vh",
        ProjectSelector: "_2u7nD-BTpOQE0ofkxFmXgR",
        ProjectSelectorInner: "_2pWB9S_OTuIXwI6N5Z6ImM",
        ProjectSection: "_2PvCcbIpHSr7WTjLkOsrmm",
        ProjectIDAndVersionSection: "_3sB67ZarAo1qxMb9nCxLII",
        ProjectIDInput: "_1cAu6yARo7v99B5xXKiC2W",
        PublishedVersionInput: "_3r5Qp0_YLqxMuvRHNaz3L7",
        EditButton: "S8TDZLV9SuHKawVJbVGxk",
        Description: "_3scofoGCuiQjKC7MqbwqiP",
        ProjectID: "_3i7f0rKvBvpdFD5swO8Nln",
        StatusSection: "_21dEpKSW0oKLbNj6b9ejcR",
        ShowChangesButton: "_3CKEA9dhMF30PAHKRq0iW4",
        DiffTableContainer: "_2NR83wq023sslFPCG6dToB",
        Buttons: "_29l8-zO_q6m_WguauZTlDN",
        Guidance: "AJEjxabSIl8HxNmJBJW5f",
        EditSection: "_5e61c_XbJ-SKINHgPQVEv",
        EditSectionTitle: "_14qzhde6o0Qokccm7ErL5l",
        InputTitle: "_3Ta4RREizhSleIuR3zoskI",
        InputWide: "_3Xf1gGe0zMSyjy5NZkqoDG",
        InputAreaWide: "_1IsfK4GCLuR14oYPz5OEee",
        ButtonContainer: "_2vjHbTQ4QMvP4-tT5GyZJk",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "_2prrBLfFQLoAypDu32so-b",
        Separator: "_1bgGe8fmFS4SV4dBaVi1FR",
        TextButton: "_3dxVs8B1Ol_8QHeBBTLduP",
        OptionBlock: "_3e9VmuLOH2pB4IqjLEgC59",
        OptionHeader: "tftnlOKC0ti_pzzhZKYb2",
        OptionDesc: "_3fiqgzKhWpj8okUo-0Jm-D",
        SteamLearnButton: "_3nDD4pcrpV_oYC9Gsaj3Qz",
        Disabled: "_3iV8nRuhXDW3a6ktpZ2eLa",
        Hidden: "_3Tw1pQfNZBnk5AvFzDmG2t",
        Large: "_2TCVdDbszEFxaLWGuJ2LCD",
        Medium: "_1hkKyZAxKU-Hapt-tqI1ko",
        Blue: "KFlCpNPfjV5anOVixTL9-",
        Red: "_2GfpXe_IhrSBg0v_Z102SB",
        ProjectSnapshotFilterPage: "_3ePLXaCNxejRNcHi71W6Ry",
        ProjectConfigBody: "_2PIbelHJQsC8fncr5lMCFk",
        SnapshotStatus: "_1B6MmfwgDzykxwZ-RICxAY",
        StatusRow: "_3gGxBo139_VpYCtawxWWLf",
        StatusLabel: "_2AwOZeaayBzEKFrA1XZ89D",
        StatusValue: "_2xXF6ZuUyK9YSMTeSxs-pS",
        ShowExamplesButton: "coBw84_Tfep4zpoa_dgYF",
        SnapshotExample: "_2C2DGUxI6T1d4vhA8PvADF",
        ExampleHeader: "xsFPFVhMqCoOI2JxNrNUx",
        ExampleValues: "WcIWN9hot-ZymO9FKH74W",
        SnapshotExampleEntry: "_4-nU5LnTKvzPQwnXIz9T-",
        DataElementPath: "_1x5vmKA8y70_ky2mIlYe72",
        DataElementValue: "_3mjov3sNC0cnRbx6K0DknH",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "WZW8JJzipPn0JVDWAdi21",
        Separator: "_1RDaZz4hfTn9PPFJLKNheJ",
        TextButton: "_2lXjnKQiPwqAiK6yTDrdzm",
        OptionBlock: "_2zByv3GhDtmuiURulxYXmt",
        OptionHeader: "_3nsBfxIRjJ_PQFzkOCOs3n",
        OptionDesc: "_3RSxgQDVrzi62RxQlt_k-_",
        SteamLearnButton: "_2SEwIwpruCSJxLWDSi-2mA",
        Disabled: "_3vbjBgbt1TVxD8MSRTRrCs",
        Hidden: "_3XZc20Aw8neFlOxljmofYW",
        Large: "_2FI4_Dt29Ap4oMxFl5earf",
        Medium: "_2e24uTUoDhvY9pVaGuTzvc",
        Blue: "_3RdvEnF3edjb1BrEcQOjCK",
        Red: "_2wb3tIk3FSmKg3z2ixiklQ",
        ProjectTrainPage: "_1G6b9AQ7NjqFFQqokgIRxr",
        FetchTrainOptionContainer: "_28bv3E9T2AAsKmDOuTxEQj",
        StatusMessage: "_2h9KvrA8EF_UCmeXV3dqO0",
        SaveWarning: "_3Lnx9X8Xw6D99-J0UU9uRG",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "_392FnVqDhOeyrFXlAu-LcR",
        Separator: "_14Ln1otrzxB8JpUNx7vAn6",
        TextButton: "_2_0va9zuNj7B5Fh11Zxtl4",
        OptionBlock: "_2YkQALGdaD0SZhgW4-NAOh",
        OptionHeader: "_3TfFKs3QF4j_j9RjY5M9nB",
        OptionDesc: "_3r6c2TcgxBATnySp6jJE6X",
        SteamLearnButton: "P4V_SO7jHh0O7hi3bEneV",
        Disabled: "_1JSCt2UY6ObjWAzfIryWO",
        Hidden: "JMdN2xeq2faNSYXDJ_8c1",
        Large: "_2lDvgon5GLTPhBrUi8Gaxu",
        Medium: "bxNJ-EJvYx8iIDPQZAhFE",
        Blue: "_17CWDl-t_EOQtty5KKpPOt",
        Red: "Gt8Uc2DHvS5JChM0qKBwO",
        ProjectTrainSettingsPage: "_3K9vgZBZHO1HH82_frl96p",
        CheckboxWithLabel: "_1bFe8r_cGwmeS42bLSvAtg",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "_3pURNSEK8qv4tg6kJf67yn",
        Separator: "_2BerNMZKXchOAZqQ7UGd06",
        TextButton: "_3JVbF5s0F7SI1INa_ky0W1",
        OptionBlock: "_3o_YYjmCjUhp1GxlMUnr3q",
        OptionHeader: "_3OtQLzct32QpCP8oaq_vZ1",
        OptionDesc: "_1923EM9KwBbSIS3c9CQxYA",
        SteamLearnButton: "_1eKJ4_US00xyhIYZudH0Ac",
        Disabled: "_3520oTJAxxh6mgrKqxoP4x",
        Hidden: "_1AuVmzE9LJyF0xM9s5GglG",
        Large: "c8gky0vtpdfnzJnbPK1eX",
        Medium: "dYGW3vtppjCBIHwAzoCAA",
        Blue: "_2sM8QvFej3ugmP7pp7T3Cv",
        Red: "_2jKXY9nrS1wzTPAqf-OkF",
        ProjectTrainStatusPage: "_32ydnuU159Y55YZO0ZYV1w",
        ProjectTrainStatusBody: "_2as9MsQIFh4J7AaCBm42aa",
        StatusMessage: "_2IP1Fb73uHfr_DcPXQ4Dq0",
        FetchStatusPanel: "_1_188Z8mN56wt5ykoDyWA5",
        TopSection: "_2bD-7QwwjnOaBcg8cnI3FZ",
        TopLeft: "_2_wooob9jI5Q_yEGNi4gU6",
        OverallStatus: "_2f7ntcusfhUJlVvHsjCoAm",
        StatusString: "_2jqJcaTXqamPqN0cZxwcL7",
        Unknown: "_3ZX3hbCFB7s21vxRwqr9tQ",
        Unstarted: "tgiSlL04Lvv5xGrO2rTCt",
        InProgress: "j3V3-SGik26P9aVJp04gV",
        Complete: "_2Qp759pC7UzOpqDwJAGVjG",
        Error: "_1vQlPF8eJNodbS0obdBiy2",
        TopRight: "kr6zMEtMYfbCbRYJdwPwn",
        StatusProgress: "_330b20HufVN1e340Rx78GJ",
        RowProgress: "_1ZH7SW9N4xlVqcQNZvvY8Z",
        RowCurrent: "_3nCubGhd2TQvaQWPPDDJJp",
        RowSlash: "_16F4JwUWlf3wMI-mh1Nr23",
        RowTotal: "_4wyuikISQL6esK8Lyyayz",
        ProgressPct: "_1SBOv_Lk0ESR1Vbo2Oq5uU",
        ShowWorkers: "_3yfLac5uYSfmnvttqIy033",
        WorkersContainer: "tTO2P3mEFwpPEhqLvuy5X",
        Worker: "f9kQ7ADficSYIg4YxL5yV",
        WorkerNumber: "_1wKjWFKiYG29adFGd783vG",
        ProgressBar: "_3t51fohJAZ-d_i6mP-BZfc",
        ProgressBarInner: "_3ASjUyTbSWymX_U9o6jmn-",
        ShowWorkersTextButton: "_3cmDGnLwTwr4eTkH72PKfI",
        Green: "_2zXp7_alo9FnScuyuw8Dw2",
        MetadataProcessingStatus: "EXtlCRbfkdi5Km4xSLu7a",
        MetadataEntry: "_3YZkK5RlwPdFTbuMnCzhl",
        MetadataEntryType: "_3Huz7jgzTK86UGh8toMwOQ",
        ProgressValue: "_1TLC_vifQFStAMdQJXDfpz",
        TrainStatusPanel: "BbjEtMeSHXYvu-aBMMbwg",
        Timinginfo: "_3fzSZPx6adm80v3kPoQQA",
        TrainLive: "_12eJCG3fnm3-QZ5cc0gjr-",
        EpochSelectorSection: "duyKvKPx7vLS9jFpVma7O",
        EpochOption: "_2FOChIR-OAmiuI8KrxegoR",
        Selected: "_3-01tz35rKHpevt8p2wL-c",
        BatchStatus: "_3ReQobopqDc66ft_TfBKi",
        BatchStatusRow: "_3depkorEo10G2qf7nDK0qa",
        PhaseLabel: "Dh04RL-08qqEcS3qoomzJ",
        PhaseValues: "_3k0j2HTDDXQfwwxSQHOJiE",
        Total: "_37a21lt_Agxy2AYw8I8G7z",
        CurrentEpoch: "_1YeRPQQmUQFxRPIYTf0An",
        GraphPair: "_3_XEajKArSIC0bQNsMH2WC",
        TrainGraph: "_1KZ1Tvb95UWTyf3XxU6QdT",
        GraphTitle: "_3cZuUaicXJuum4rXGW58ta",
        LineValues: "_1Lo07yaSSJgAILv8OF8tYm",
        Value: "_28cVssSFEjYRGOtOijQjyG",
        LogSection: "_1f1DsyMZPoMlvpRWAMruFE",
        ButtonRow: "_3utCzjAcc404OPjKNpO5e-",
        WorkerLogs: "Fw22Q--SmZzCyJbmoPKLP",
        WorkerLogHeader: "_2dqyrftBu_kF4JXUCzo6Zk",
        LogContainer: "Xrk5e2IntCK-pm83SHXwB",
      };
    },
    chunkid: (module) => {
      module.exports = {
        Warning: "_29_7253uEsK-MI8_gNRnd",
        Separator: "_2k1-q14BNHaFdaQFxiP87w",
        TextButton: "asdUZsV3WgERMVX3vXjqG",
        OptionBlock: "R4vJdLUSturLQc9afoa2m",
        OptionHeader: "PaFKwCglySle7DnxpiDwI",
        OptionDesc: "_9s5DaGjPwQJKAUu14w-58",
        SteamLearnButton: "L3Xej13N-bA_WN7NK_Qhn",
        Disabled: "_3De8F4SBBPQX-bppuLtD0y",
        Hidden: "_3VPpDBdPDtGfwJvLWiTZIq",
        Large: "vRT035ZwUAet3rHOhx_wH",
        Medium: "_1mg8LE0vIPhG5Zxh6Eu72F",
        Blue: "naj_vJtxdIhHjqk6G2SsL",
        Red: "_2fLZdDv-OOv37B0jDDZQxW",
        SteamLearnApp: "_1Q7MNDqSHoOR0k_RrdmlaS",
        MainAppContainer: "_1oyJJ86SB6-JkSd6NyaPAy",
        ProjectTabContainer: "_1NMSBccwO5Cu5ny71e3aeE",
        TabAndSpacer: "-ib5B3TS_O8YpuRfQ3_iP",
        Tab: "_1V0HcrKYCrvfFW0k3ZhUp3",
        Active: "vb7eiy9fguvUFQVwAt3-J",
        TabSpacer: "_23BphNs0KQxRN59e--Ka4S",
        LeftMenuBar: "_1SMWlaLDMBg7kaMOY1Cpkx",
        LeftMenuBarSectionHeader: "_3KH7ghTIqkkuoAGGoEimrv",
        LeftMenuBarItem: "_1jUn8LKM32ea66l460sUZF",
      };
    },
    chunkid: (module, module_exports, __webpack_require__) => {
      "use strict";
      __webpack_require__._(module_exports),
        __webpack_require__._(module_exports, {
          DoesPathMatch: () => _,
          IsProjectPath: () => _,
          SteamLearnPageContainer: () => _,
          SteamLearnProjectTabs: () => _,
          SteamLearnRoutes: () => _,
          default: () => _,
        });
      var _,
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__._(_),
        _ = __webpack_require__("chunkid");
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.elements || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  elements: {
                    _: 1,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnDataSourceDescObject";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.name || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  name: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  data_type: {
                    _: 2,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  object: {
                    _: 3,
                    _: _,
                  },
                  count: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnDataSourceDescElement";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype._ || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  _: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  name: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  version: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  source_description: {
                    _: 4,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  structure: {
                    _: 5,
                    _: _,
                  },
                  structure_crc: {
                    _: 6,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  cache_duration_seconds: {
                    _: 7,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  key_type: {
                    _: 8,
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  supports_auto_snapshots: {
                    _: 9,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnDataSource";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.elements || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  elements: {
                    _: 1,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnDataObject";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.name || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [20, 21, 22, 23, 24], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  name: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  data_int32s: {
                    _: 20,
                    _: !0,
                    _: !0,
                    _: _._.readInt32,
                    pbr: _._.readPackedInt32,
                    _: _._.writeRepeatedInt32,
                  },
                  data_floats: {
                    _: 21,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  data_bools: {
                    _: 22,
                    _: !0,
                    _: !0,
                    _: _._.readBool,
                    pbr: _._.readPackedBool,
                    _: _._.writeRepeatedBool,
                  },
                  data_strings: {
                    _: 23,
                    _: !0,
                    _: !0,
                    _: _._.readString,
                    _: _._.writeRepeatedString,
                  },
                  data_objects: {
                    _: 24,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnDataElement";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data_source_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data_source_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  keys: {
                    _: 2,
                    _: !0,
                    _: !0,
                    _: _._.readUint64String,
                    pbr: _._.readPackedUint64String,
                    _: _._.writeRepeatedUint64String,
                  },
                  data_object: {
                    _: 3,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnData";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data: {
                    _: 1,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnDataList";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data_source_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data_source_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  data_element_path: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  is_string: {
                    _: 3,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  input: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  sql_column: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  preprocessing_type: {
                    _: 6,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  min_range: {
                    _: 7,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  max_range: {
                    _: 8,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  std_dev: {
                    _: 9,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  compact_table: {
                    _: 10,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  compact_table_count: {
                    _: 11,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  sequence_table: {
                    _: 12,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  sequence_table_count: {
                    _: 13,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  sort_sequence: {
                    _: 14,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  sequence_min_length: {
                    _: 15,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  table_full_sample: {
                    _: 16,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  sequence_prefix_frequency: {
                    _: 17,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  other_project_id: {
                    _: 18,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  other_fetch_id: {
                    _: 19,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnDataSourceElementUsage";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.map_storage_elements || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  map_storage_elements: {
                    _: 1,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnSnapshotStorage";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.float_value || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  float_value: {
                    _: 1,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  string_value: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnSnapshotStorage_StorageElement";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.key || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  key: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  value: {
                    _: 2,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [7], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  project_name: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  project_description: {
                    _: 3,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  creator_account_id: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  create_time: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  unpublished_config: {
                    _: 6,
                    _: _,
                  },
                  published_configs: {
                    _: 7,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  hidden: {
                    _: 8,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProject";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.fetch_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  fetch_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnFetchInfo";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.fetch_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  fetch_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  scheduled_train: {
                    _: 3,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  auto_snapshot_pending: {
                    _: 4,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnTrainInfo";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [4, 5, 6, 17, 18, 12], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  publish_time: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  last_edit_time: {
                    _: 20,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  hidden: {
                    _: 19,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  data_source_ids: {
                    _: 4,
                    _: !0,
                    _: !0,
                    _: _._.readUint32,
                    pbr: _._.readPackedUint32,
                    _: _._.writeRepeatedUint32,
                  },
                  data_source_element_usages: {
                    _: 5,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  project_nodes: {
                    _: 6,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  snapshot_filter: {
                    _: 11,
                    _: _,
                  },
                  snapshot_config: {
                    _: 7,
                    _: _,
                  },
                  train_config: {
                    _: 8,
                    _: _,
                  },
                  scheduled_train_config: {
                    _: 16,
                    _: _,
                  },
                  data_retention_config: {
                    _: 14,
                    _: _,
                  },
                  fetch_infos: {
                    _: 17,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  train_infos: {
                    _: 18,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  map_data_element_sql_column: {
                    _: 12,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  total_sql_columns: {
                    _: 13,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectConfig";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.key || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  key: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  value: {
                    _: 2,
                    _: _._.readInt32,
                    _: _._.writeInt32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data_element_path || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data_element_path: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  min_value: {
                    _: 2,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  max_value: {
                    _: 3,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  num_buckets: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectSnapshotFilterHistogram";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data_element_path || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data_element_path: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  min_value: {
                    _: 2,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  max_value: {
                    _: 3,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectSnapshotFilterRange";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.sample_reduce_percent || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  sample_reduce_percent: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  histogram: {
                    _: 2,
                    _: _,
                  },
                  filter_range: {
                    _: 3,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectSnapshotFilter";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.snapshot_type || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  snapshot_type: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  snapshot_schedule_type: {
                    _: 5,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  snapshot_schedule_hour_of_day: {
                    _: 10,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  snapshot_schedule_day_of_week: {
                    _: 6,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  snapshot_schedule_day_of_month: {
                    _: 7,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  compress: {
                    _: 8,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  job_count: {
                    _: 9,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  config_account_ids: {
                    _: 2,
                    _: _,
                  },
                  config_app_ids: {
                    _: 3,
                    _: _,
                  },
                  config_other_project: {
                    _: 4,
                    _: _,
                  },
                  config_data_source: {
                    _: 12,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectSnapshotConfig";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.filter || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  filter: {
                    _: 3,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  percent: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  activity_recency_days: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectSnapshotConfigAccountIDs";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.percent || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  percent: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  release_recency_days: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectSnapshotConfigAppIDs";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectSnapshotConfigOtherProject";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data_source_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data_source_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectSnapshotConfigDataSource";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.fetch_workers || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  fetch_workers: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  fetch_chunk_size: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_batch_size: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_epoch_count: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_loss_improvement_threshold: {
                    _: 5,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  train_no_loss_improvement_epoch_limit: {
                    _: 6,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_optimizer: {
                    _: 7,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  train_learning_rate: {
                    _: 8,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  train_weight_decay: {
                    _: 13,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  train_clip_norm: {
                    _: 14,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  train_gpu: {
                    _: 9,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  gpu_count: {
                    _: 10,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  mixed_precision: {
                    _: 11,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  use_class_weights: {
                    _: 15,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  train_warmup_steps: {
                    _: 16,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_warmup_start: {
                    _: 17,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  train_decay_steps: {
                    _: 18,
                    _: _._.readInt32,
                    _: _._.writeInt32,
                  },
                  train_decay_rate: {
                    _: 19,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  profile_epoch: {
                    _: 20,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  profile_start_batch: {
                    _: 21,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  profile_end_batch: {
                    _: 22,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnTrainConfig";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.scheduled_type || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  scheduled_type: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  scheduled_minute: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  scheduled_hour: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  scheduled_day_of_week: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  scheduled_day_of_month: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  auto_activate_accuracy_threshold: {
                    _: 6,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnScheduledTrainConfig";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.snapshot_keep_duration_days || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  snapshot_keep_duration_days: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  fetch_keep_count: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnDataRetentionConfig";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.node_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [6], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  node_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  location_x: {
                    _: 2,
                    _: _._.readInt32,
                    _: _._.writeInt32,
                  },
                  location_y: {
                    _: 3,
                    _: _._.readInt32,
                    _: _._.writeInt32,
                  },
                  comment: {
                    _: 4,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  type: {
                    _: 5,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  connectors: {
                    _: 6,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  input: {
                    _: 10,
                    _: _,
                  },
                  dense: {
                    _: 11,
                    _: _,
                  },
                  dense_stack: {
                    _: 12,
                    _: _,
                  },
                  dropout: {
                    _: 13,
                    _: _,
                  },
                  embedding: {
                    _: 14,
                    _: _,
                  },
                  train: {
                    _: 15,
                    _: _,
                  },
                  conditional_extract: {
                    _: 16,
                    _: _,
                  },
                  concatenate: {
                    _: 17,
                    _: _,
                  },
                  shuffle: {
                    _: 18,
                    _: _,
                  },
                  synced_shuffle: {
                    _: 19,
                    _: _,
                  },
                  onehot: {
                    _: 20,
                    _: _,
                  },
                  explode: {
                    _: 21,
                    _: _,
                  },
                  conditional_swap: {
                    _: 22,
                    _: _,
                  },
                  kmeans: {
                    _: 23,
                    _: _,
                  },
                  combine: {
                    _: 24,
                    _: _,
                  },
                  text_vectorization: {
                    _: 25,
                    _: _,
                  },
                  batch_normalization: {
                    _: 26,
                    _: _,
                  },
                  normalize: {
                    _: 27,
                    _: _,
                  },
                  named_inference: {
                    _: 28,
                    _: _,
                  },
                  dot: {
                    _: 29,
                    _: _,
                  },
                  extract: {
                    _: 30,
                    _: _,
                  },
                  conv_1d: {
                    _: 31,
                    _: _,
                  },
                  max_pooling_1d: {
                    _: 32,
                    _: _,
                  },
                  flatten: {
                    _: 33,
                    _: _,
                  },
                  global_max_pooling: {
                    _: 34,
                    _: _,
                  },
                  transformer: {
                    _: 35,
                    _: _,
                  },
                  external_embedding: {
                    _: 36,
                    _: _,
                  },
                  time_distributed_dense: {
                    _: 37,
                    _: _,
                  },
                  sequence_split: {
                    _: 38,
                    _: _,
                  },
                  weighted_average: {
                    _: 39,
                    _: _,
                  },
                  global_avg_pooling_1d: {
                    _: 40,
                    _: _,
                  },
                  token_mask: {
                    _: 41,
                    _: _,
                  },
                  masked_head: {
                    _: 42,
                    _: _,
                  },
                  token_transformer: {
                    _: 43,
                    _: _,
                  },
                  external_model: {
                    _: 44,
                    _: _,
                  },
                  reshape_2d: {
                    _: 45,
                    _: _,
                  },
                  row_extract: {
                    _: 46,
                    _: _,
                  },
                  bert: {
                    _: 47,
                    _: _,
                  },
                  bert_tokenizer: {
                    _: 48,
                    _: _,
                  },
                  bert_finetune: {
                    _: 49,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectNode";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.connector_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  connector_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  linked_connector_ids: {
                    _: 2,
                    _: !0,
                    _: !0,
                    _: _._.readUint32,
                    pbr: _._.readPackedUint32,
                    _: _._.writeRepeatedUint32,
                  },
                  is_input_connector: {
                    _: 3,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnProjectNodeConnector";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.input_num || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  input_num: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  inference_iterate: {
                    _: 2,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeInput";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.activation || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  activation: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  width: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  regularization: {
                    _: 3,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeDense";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.activation || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  activation: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  width: {
                    _: 2,
                    _: !0,
                    _: !0,
                    _: _._.readUint32,
                    pbr: _._.readPackedUint32,
                    _: _._.writeRepeatedUint32,
                  },
                  dropout_pct: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  regularization: {
                    _: 4,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeDenseStack";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.dropout_pct || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  dropout_pct: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeDropout";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.max_value || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  max_value: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  compact_table: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  embedding_width: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  flatten: {
                    _: 4,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  export_name: {
                    _: 5,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  embed_name: {
                    _: 6,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeEmbedding";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.input_count || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  input_count: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  activation: {
                    _: 2,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  width: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  compact_table: {
                    _: 4,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  loss: {
                    _: 6,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  learning_rate: {
                    _: 7,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  uses_weight_mask: {
                    _: 8,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  label_smoothing: {
                    _: 9,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeTrain";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.extract_filter_type || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  extract_filter_type: {
                    _: 10,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  extract_weight_type: {
                    _: 11,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  filter_info: {
                    _: 12,
                    _: _,
                  },
                  weight_info: {
                    _: 13,
                    _: _,
                  },
                  compact_table: {
                    _: 14,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  extracted_compact_table: {
                    _: 15,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeConditionalExtract";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.appid_release_recency_months || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  appid_release_recency_months: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  appid_publisher_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  appid_featured_tag_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  appid_theme_tag_id: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeConditionalExtract_FilterInfo";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.appid_release_recency_bias || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  appid_release_recency_bias: {
                    _: 1,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  input_number: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  input_strength: {
                    _: 3,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeConditionalExtract_WeightInfo";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.axis || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  axis: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeConcatenate";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeCombine";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.vocabulary_size || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  vocabulary_size: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  standardize: {
                    _: 2,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  output: {
                    _: 3,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  sequence_length: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  split: {
                    _: 5,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  ngrams: {
                    _: 6,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  other_project_id: {
                    _: 7,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  other_fetch_id: {
                    _: 8,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeTextVectorization";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeBatchNormalization";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeNormalize";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.name || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  name: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  only_inference: {
                    _: 2,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeNamedInference";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.exclude_zeroes || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  exclude_zeroes: {
                    _: 1,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeShuffle";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.exclude_zeroes || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  exclude_zeroes: {
                    _: 1,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeSyncedShuffle";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.width || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  width: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  compact_table: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  multi_hot: {
                    _: 3,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeOnehot";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeExplode";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeConditionalSwap";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.num_clusters || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  num_clusters: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  name: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  generate_clusters: {
                    _: 3,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeKMeansCluster";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.normalize || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  normalize: {
                    _: 1,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeDot";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.input_type || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  input_type: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  mode: {
                    _: 2,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  exclusion: {
                    _: 3,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  selection: {
                    _: 4,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  bias_start: {
                    _: 5,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  bias_end: {
                    _: 6,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  recency_months: {
                    _: 12,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  input_bias_input_number: {
                    _: 7,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  input_bias_strength: {
                    _: 8,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  positive_sample_percent: {
                    _: 9,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  compact_table: {
                    _: 10,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  extracted_compact_table: {
                    _: 11,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  fest_name: {
                    _: 13,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeExtract";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.filters || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  filters: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  kernel_size: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  strides: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  activation: {
                    _: 4,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeConv1D";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.pool_size || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  pool_size: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  strides: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeMaxPooling1D";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeFlatten";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeGlobalMaxPooling1D";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeGlobalAvgPooling1D";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.mask_pct || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  mask_pct: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  mask_count_limit: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  random_pct: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  keep_pct: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeTokenMask";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeMaskedHead";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.vocabulary_size || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  vocabulary_size: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  sequence_length: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  embedding_width: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  transformer_layers: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  transformer_dim: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  transformer_heads: {
                    _: 6,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  transformer_dropout_pct: {
                    _: 7,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  compact_table: {
                    _: 8,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  is_causal: {
                    _: 9,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeTokenTransformer";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.num_heads || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  num_heads: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  feedforward_size: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  dropout_pct: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  num_internal_blocks: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  regularization: {
                    _: 6,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeTransformer";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  fetch_id: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  embedding_name: {
                    _: 3,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  compact_table: {
                    _: 4,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  exclude_missing: {
                    _: 6,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeExternalEmbedding";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.activation || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  activation: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  width: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeTimeDistributedDense";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.head_split_chance || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  head_split_chance: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  mid_split_chance: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  tail_split_chance: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  sequence_table_name: {
                    _: 4,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  compact_table_name: {
                    _: 5,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeSequenceSplit";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.axis || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  axis: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  use_weights: {
                    _: 2,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeWeightedAverage";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  named_inference_name: {
                    _: 3,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  freeze_weights: {
                    _: 4,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  unfrozen_layers: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeExternalModel";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.dimension || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  dimension: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeReshape2D";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.row || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  row: {
                    _: 1,
                    _: _._.readInt32,
                    _: _._.writeInt32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeRowExtract";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeBert";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.bert_model || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  bert_model: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  sequence_length: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeBertTokenizer";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.bert_model || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  bert_model: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  unfrozen_layers: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnModelNodeBertFinetune";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.access_token || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  access_token: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  data_source: {
                    _: 3,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_RegisterDataSource_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  data_source: {
                    _: 2,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_RegisterDataSource_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.access_token || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  access_token: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  data: {
                    _: 3,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_CacheData_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.cache_data_result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  cache_data_result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_CacheData_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.access_token || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [4, 5], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  access_token: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  project_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 7,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  keys: {
                    _: 4,
                    _: !0,
                    _: !0,
                    _: _._.readUint64String,
                    pbr: _._.readPackedUint64String,
                    _: _._.writeRepeatedUint64String,
                  },
                  data: {
                    _: 5,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  pending_data_limit_seconds: {
                    _: 6,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_SnapshotProject_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.snapshot_result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  snapshot_result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_SnapshotProject_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.beam_length || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [5], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  beam_length: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  beam_width: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  item_decay: {
                    _: 3,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  next_item_count: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  item_scalars: {
                    _: 5,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  item_sequence_end: {
                    _: 7,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  item_sequence_end_threshold: {
                    _: 8,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  repeat_multiplier: {
                    _: 9,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgInferenceIterateBeamSearch";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.item || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  item: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  scale: {
                    _: 2,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgInferenceIterateBeamSearch_CustomItemScalar";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.access_token || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [7, 8], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  access_token: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  project_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  override_train_id: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  data: {
                    _: 6,
                    _: _,
                  },
                  additional_data: {
                    _: 7,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  keys: {
                    _: 8,
                    _: !0,
                    _: !0,
                    _: _._.readUint64String,
                    pbr: _._.readPackedUint64String,
                    _: _._.writeRepeatedUint64String,
                  },
                  named_inference: {
                    _: 9,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  iterate_beam_search: {
                    _: 13,
                    _: _,
                  },
                  debug_spew: {
                    _: 14,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_Inference_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.inference_result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [3], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  inference_result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  backend_response: {
                    _: 2,
                    _: _,
                  },
                  keys: {
                    _: 3,
                    _: !0,
                    _: !0,
                    _: _._.readUint64String,
                    pbr: _._.readPackedUint64String,
                    _: _._.writeRepeatedUint64String,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_Inference_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.access_token || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  access_token: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  project_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  override_train_id: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.inference_metadata_result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [3, 4, 5, 9, 6, 8], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  inference_metadata_result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  row_range: {
                    _: 2,
                    _: _,
                  },
                  ranges: {
                    _: 3,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  std_devs: {
                    _: 4,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  compact_tables: {
                    _: 5,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  sequence_tables: {
                    _: 9,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  kmeans: {
                    _: 6,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  app_info: {
                    _: 8,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  snapshot_histogram: {
                    _: 7,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.min_row || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  min_row: {
                    _: 1,
                    _: _._.readUint64String,
                    _: _._.writeUint64String,
                  },
                  max_row: {
                    _: 2,
                    _: _._.readUint64String,
                    _: _._.writeUint64String,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_RowRange";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data_element_path || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data_element_path: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  min_value: {
                    _: 2,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  max_value: {
                    _: 3,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_Range";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data_element_path || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data_element_path: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  mean: {
                    _: 2,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  std_dev: {
                    _: 3,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_StdDev";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.name || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2, 3], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  name: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  map_values: {
                    _: 2,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  map_mappings: {
                    _: 3,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  total_count: {
                    _: 4,
                    _: _._.readUint64String,
                    _: _._.writeUint64String,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_CompactTable";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.value || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  value: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  mapping: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  count: {
                    _: 3,
                    _: _._.readUint64String,
                    _: _._.writeUint64String,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.key || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  key: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  value: {
                    _: 2,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.key || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  key: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  value: {
                    _: 2,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.name || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2, 3], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  name: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  map_values: {
                    _: 2,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  map_mappings: {
                    _: 3,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  total_count: {
                    _: 4,
                    _: _._.readUint64String,
                    _: _._.writeUint64String,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_SequenceTable";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.values || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  values: {
                    _: 1,
                    _: !0,
                    _: !0,
                    _: _._.readUint32,
                    pbr: _._.readPackedUint32,
                    _: _._.writeRepeatedUint32,
                  },
                  crc: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  count: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.key || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  key: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  value: {
                    _: 2,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.key || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  key: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  value: {
                    _: 2,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.name || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  name: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  clusters: {
                    _: 2,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_KMeans";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype._ || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  _: {
                    _: 1,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  _: {
                    _: 2,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  radius: {
                    _: 3,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  radius_75pct: {
                    _: 4,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  radius_50pct: {
                    _: 5,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  radius_25pct: {
                    _: 6,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.min_value || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [4], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  min_value: {
                    _: 1,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  max_value: {
                    _: 2,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  num_buckets: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  bucket_counts: {
                    _: 4,
                    _: !0,
                    _: !0,
                    _: _._.readUint32,
                    pbr: _._.readPackedUint32,
                    _: _._.writeRepeatedUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.country_allow || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  country_allow: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  country_deny: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  platform_win: {
                    _: 3,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  platform_mac: {
                    _: 4,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  platform_linux: {
                    _: 5,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  adult_violence: {
                    _: 6,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  adult_sex: {
                    _: 7,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_AppInfo";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.key || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  key: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  value: {
                    _: 2,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.cache_data_requests || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1, 2, 3], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  cache_data_requests: {
                    _: 1,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  snapshot_requests: {
                    _: 2,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  inference_requests: {
                    _: 3,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_BatchOperation_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.cache_data_responses || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1, 2, 3], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  cache_data_responses: {
                    _: 1,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  snapshot_responses: {
                    _: 2,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  inference_responses: {
                    _: 3,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_BatchOperation_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_name || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_name: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  project_description: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_CreateProject_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  project: {
                    _: 2,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_CreateProject_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.appid || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  appid: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_ListProjects_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.projects || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  projects: {
                    _: 1,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_ListProjects_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_ListProjectConfigs_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_config_infos || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_config_infos: {
                    _: 1,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_ListProjectConfigs_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [4], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  project_name: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  project_description: {
                    _: 3,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  published_versions: {
                    _: 4,
                    _: !0,
                    _: !0,
                    _: _._.readUint32,
                    pbr: _._.readPackedUint32,
                    _: _._.writeRepeatedUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_ListProjectConfigs_Response_ProjectConfigInfo";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetProject_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project: {
                    _: 1,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetProject_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetProjectConfig_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_config || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_config: {
                    _: 1,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetProjectConfig_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(), _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _
            ? {
                $jspbMessageInstance: _,
              }
            : {};
        }
        static fromObject(_) {
          return new _();
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _;
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {}
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_ListDataSources_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data_sources || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data_sources: {
                    _: 1,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_ListDataSources_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data_source_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data_source_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetDataSource_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data_source || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data_source: {
                    _: 1,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetDataSource_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project: {
                    _: 1,
                    _: _,
                  },
                  published_version: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_EditProject_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_EditProject_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_config || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_config: {
                    _: 1,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_EditProjectConfig_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_EditProjectConfig_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_PublishProject_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  new_published_version: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_PublishProject_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.register_data_source_access_token || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2, 3, 4], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  register_data_source_access_token: {
                    _: 1,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  cache_data_access_tokens: {
                    _: 2,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  snapshot_project_access_tokens: {
                    _: 3,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  inference_access_tokens: {
                    _: 4,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnAccessTokens";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.data_source_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  data_source_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  access_token: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnAccessTokens_CacheDataAccessToken";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  access_token: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  access_token: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnAccessTokens_InferenceAccessToken";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.appid || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  appid: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetAccessTokens_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  access_tokens: {
                    _: 2,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetAccessTokens_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_config || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_config: {
                    _: 1,
                    _: _,
                  },
                  fetch: {
                    _: 2,
                    _: _,
                  },
                  train: {
                    _: 3,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_Train_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.fetch_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  fetch_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  request_cancel: {
                    _: 2,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_Train_Request_Fetch";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.train_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  train_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  request_cancel: {
                    _: 2,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  scheduled_train: {
                    _: 3,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_Train_Request_Train";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_Train_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetFetchStatusVersions_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.versions || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  versions: {
                    _: 1,
                    _: !0,
                    _: !0,
                    _: _._.readUint32,
                    pbr: _._.readPackedUint32,
                    _: _._.writeRepeatedUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetFetchStatusVersions_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetTrainStatusVersions_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.versions || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  versions: {
                    _: 1,
                    _: !0,
                    _: !0,
                    _: _._.readUint32,
                    pbr: _._.readPackedUint32,
                    _: _._.writeRepeatedUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetTrainStatusVersions_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.fetch_requests || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1, 2], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  fetch_requests: {
                    _: 1,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  train_requests: {
                    _: 2,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetBatchedStatus_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2, 3], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  fetch_responses: {
                    _: 2,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  train_responses: {
                    _: 3,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetBatchedStatus_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  fetch_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetFetchStatus_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [4, 16], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  project_id: {
                    _: 11,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  fetch_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  status: {
                    _: 3,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  workers: {
                    _: 4,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  total_rows_written: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  total_rows_processed: {
                    _: 9,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  total_rows: {
                    _: 6,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  start_time: {
                    _: 7,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  end_time: {
                    _: 8,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  error_string: {
                    _: 10,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  cancel_pending: {
                    _: 15,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  metadata: {
                    _: 16,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetFetchStatus_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.rows_written || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  rows_written: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  rows_processed: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  rows_total: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  complete: {
                    _: 2,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetFetchStatus_Response_Worker";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.metadata_phase || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  metadata_phase: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  metadata_phase_name: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  metadata_phase_value: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetFetchStatus_Response_Metadata";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetTrainStatus_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [5, 10, 12], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  project_id: {
                    _: 18,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  fetch_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  status: {
                    _: 4,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  epochs: {
                    _: 5,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  total_epochs: {
                    _: 6,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_batch_count: {
                    _: 7,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  validate_batch_count: {
                    _: 8,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  test_batch_count: {
                    _: 9,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  test_batches: {
                    _: 10,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  test_loss: {
                    _: 11,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  test_accuracy: {
                    _: 12,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  start_time: {
                    _: 13,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  end_time: {
                    _: 14,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  scheduled_train: {
                    _: 15,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  live: {
                    _: 16,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  active: {
                    _: 17,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  cancel_pending: {
                    _: 19,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetTrainStatus_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.loss || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [5, 4], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  loss: {
                    _: 1,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  accuracy: {
                    _: 5,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  batch_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  f1_score: {
                    _: 4,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetTrainStatus_Response_Batch";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.epoch_number || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [3, 11, 5, 10, 6, 7], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  epoch_number: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  epoch_train_loss: {
                    _: 2,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  epoch_train_accuracy: {
                    _: 3,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  epoch_train_f1_score: {
                    _: 11,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  epoch_validate_loss: {
                    _: 4,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  epoch_validate_accuracy: {
                    _: 5,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  epoch_validate_f1_score: {
                    _: 10,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  train_batches: {
                    _: 6,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  validate_batches: {
                    _: 7,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  start_time: {
                    _: 8,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  end_time: {
                    _: 9,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetTrainStatus_Response_Epoch";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  fetch_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetTrainLogs_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [3], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  main_log: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  fetch_worker_logs: {
                    _: 3,
                    _: !0,
                    _: !0,
                    _: _._.readString,
                    _: _._.writeRepeatedString,
                  },
                  gpu_log: {
                    _: 4,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetTrainLogs_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  snapshot_example_count: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetSnapshotStatus_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [6], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  project_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  snapshot_count: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  snapshot_object_count: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  snapshot_examples: {
                    _: 6,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  autosnapshot_status: {
                    _: 7,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  autosnapshot_time_started: {
                    _: 8,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  autosnapshot_time_ended: {
                    _: 9,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  autosnapshot_key_current: {
                    _: 10,
                    _: _._.readUint64String,
                    _: _._.writeUint64String,
                  },
                  autosnapshot_key_max: {
                    _: 11,
                    _: _._.readUint64String,
                    _: _._.writeUint64String,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetSnapshotStatus_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  from_scheduled: {
                    _: 4,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  deactivate: {
                    _: 5,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_SetTrainLive_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_SetTrainLive_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.float_value || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  float_value: {
                    _: 1,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  string_value: {
                    _: 2,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearnRawDataElement";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [4, 7, 6], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  fetch_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  data: {
                    _: 4,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                  additional_data: {
                    _: 7,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  keys: {
                    _: 6,
                    _: !0,
                    _: !0,
                    _: _._.readUint64String,
                    pbr: _._.readPackedUint64String,
                    _: _._.writeRepeatedUint64String,
                  },
                  named_inference: {
                    _: 8,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  iterate_beam_search: {
                    _: 13,
                    _: _,
                  },
                  debug_spew: {
                    _: 14,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceBackend_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.outputs || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  outputs: {
                    _: 1,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceBackend_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.value || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  value: {
                    _: 1,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceBackend_Response_Sequence";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.value || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  value: {
                    _: 2,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceBackend_Response_RegressionOutput";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.value || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [3], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  value: {
                    _: 3,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceBackend_Response_NamedInferenceOutput";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.value || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  value: {
                    _: 1,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.weight || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1, 2, 3], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  weight: {
                    _: 1,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  value: {
                    _: 2,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  value_sequence: {
                    _: 3,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.weight || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [1, 2, 3], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  weight: {
                    _: 1,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  value: {
                    _: 2,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  value_sequence: {
                    _: 3,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.binary_crossentropy || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  binary_crossentropy: {
                    _: 1,
                    _: _,
                  },
                  categorical_crossentropy: {
                    _: 2,
                    _: _,
                  },
                  multi_binary_crossentropy: {
                    _: 3,
                    _: _,
                  },
                  regression: {
                    _: 4,
                    _: _,
                  },
                  named_inference: {
                    _: 5,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_InferenceBackend_Response_Output";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.fetch_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  fetch_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_LogEvent_TrainStarted";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.fetch_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  fetch_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  loss: {
                    _: 3,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  accuracy: {
                    _: 4,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  f1_score: {
                    _: 5,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_LogEvent_TrainEnded";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.fetch_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  fetch_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  manual_set_live: {
                    _: 3,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                  accuracy_difference: {
                    _: 4,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  accuracy_threshold: {
                    _: 5,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_LogEvent_TrainSetLive";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.status || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  status: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  key_completed: {
                    _: 2,
                    _: _._.readUint64String,
                    _: _._.writeUint64String,
                  },
                  key_end: {
                    _: 3,
                    _: _._.readUint64String,
                    _: _._.writeUint64String,
                  },
                  num_snapshot_requests: {
                    _: 4,
                    _: _._.readUint64String,
                    _: _._.writeUint64String,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_LogEvent_Autosnapshot";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.event_type || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  event_type: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  timestamp: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  project_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_started: {
                    _: 5,
                    _: _,
                  },
                  train_ended: {
                    _: 6,
                    _: _,
                  },
                  train_set_live: {
                    _: 7,
                    _: _,
                  },
                  auto_snapshot: {
                    _: 8,
                    _: _,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_LogEvent";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.start_timestamp || _._(_._()),
            _.Message.initialize(this, _, 0, -1, void 0, null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  start_timestamp: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  end_timestamp: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  project_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 4,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetLogEvents_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  event_list: {
                    _: 2,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetLogEvents_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [5], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  export_name: {
                    _: 4,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  numerical_values: {
                    _: 5,
                    _: !0,
                    _: !0,
                    _: _._.readUint32,
                    pbr: _._.readPackedUint32,
                    _: _._.writeRepeatedUint32,
                  },
                  fetch_id: {
                    _: 6,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetEmbeddingValues_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  embedding_data: {
                    _: 2,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetEmbeddingValues_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.numerical_value || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  numerical_value: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  embedding_values: {
                    _: 2,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  found_value: {
                    _: 3,
                    _: _._.readBool,
                    _: _._.writeBool,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.project_id || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [6], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  project_id: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  published_version: {
                    _: 2,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  train_id: {
                    _: 3,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  export_name: {
                    _: 4,
                    _: _._.readString,
                    _: _._.writeString,
                  },
                  result_count: {
                    _: 5,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  values: {
                    _: 6,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                  fetch_id: {
                    _: 7,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  popularity_weight: {
                    _: 8,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  focus_weight: {
                    _: 9,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetNearestEmbedding_Request";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.result || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [2], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  result: {
                    _: 1,
                    _: _._.readEnum,
                    _: _._.writeEnum,
                  },
                  near_embeddings: {
                    _: 2,
                    _: _,
                    _: !0,
                    _: !0,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetNearestEmbedding_Response";
        }
      }
      class _ extends _.Message {
        static ImplementsStaticInterface() {}
        constructor(_ = null) {
          super(),
            _.prototype.value || _._(_._()),
            _.Message.initialize(this, _, 0, -1, [3], null);
        }
        static sm_m;
        static sm_mbf;
        static M() {
          return (
            _.sm_m ||
              (_.sm_m = {
                proto: _,
                fields: {
                  value: {
                    _: 1,
                    _: _._.readUint32,
                    _: _._.writeUint32,
                  },
                  distance: {
                    _: 2,
                    _: _._.readFloat,
                    _: _._.writeFloat,
                  },
                  embedding_values: {
                    _: 3,
                    _: !0,
                    _: !0,
                    _: _._.readFloat,
                    pbr: _._.readPackedFloat,
                    _: _._.writeRepeatedFloat,
                  },
                },
              }),
            _.sm_m
          );
        }
        static MBF() {
          return _.sm_mbf || (_.sm_mbf = _._(_._())), _.sm_mbf;
        }
        toObject(_ = !1) {
          return _.toObject(_, this);
        }
        static toObject(_, _) {
          return _._(_._(), _, _);
        }
        static fromObject(_) {
          return _._(_._(), _);
        }
        static deserializeBinary(_) {
          let _ = new (_().BinaryReader)(_),
            _ = new _();
          return _.deserializeBinaryFromReader(_, _);
        }
        static deserializeBinaryFromReader(_, _) {
          return _._(_.MBF(), _, _);
        }
        serializeBinary() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBuffer();
        }
        static serializeBinaryToWriter(_, _) {
          _._(_._(), _, _);
        }
        serializeBase64String() {
          var _ = new (_().BinaryWriter)();
          return _.serializeBinaryToWriter(this, _), _.getResultBase64String();
        }
        getClassName() {
          return "CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding";
        }
      }
      !(function (_) {
        (_.CreateProject = function (_, _) {
          return _.SendMsg("SteamLearn.CreateProject#1", (0, _._)(_, _), _, {
            ePrivilege: 1,
          });
        }),
          (_.EditProject = function (_, _) {
            return _.SendMsg("SteamLearn.EditProject#1", (0, _._)(_, _), _, {
              ePrivilege: 1,
            });
          }),
          (_.EditProjectConfig = function (_, _) {
            return _.SendMsg(
              "SteamLearn.EditProjectConfig#1",
              (0, _._)(_, _),
              _,
              {
                ePrivilege: 1,
              },
            );
          }),
          (_.ListProjects = function (_, _) {
            return _.SendMsg("SteamLearn.ListProjects#1", (0, _._)(_, _), _, {
              bConstMethod: !0,
              ePrivilege: 1,
            });
          }),
          (_.ListProjectConfigs = function (_, _) {
            return _.SendMsg(
              "SteamLearn.ListProjectConfigs#1",
              (0, _._)(_, _),
              _,
              {
                bConstMethod: !0,
                ePrivilege: 1,
              },
            );
          }),
          (_.GetProject = function (_, _) {
            return _.SendMsg("SteamLearn.GetProject#1", (0, _._)(_, _), _, {
              bConstMethod: !0,
              ePrivilege: 1,
            });
          }),
          (_.GetProjectConfig = function (_, _) {
            return _.SendMsg(
              "SteamLearn.GetProjectConfig#1",
              (0, _._)(_, _),
              _,
              {
                bConstMethod: !0,
                ePrivilege: 1,
              },
            );
          }),
          (_.PublishProject = function (_, _) {
            return _.SendMsg("SteamLearn.PublishProject#1", (0, _._)(_, _), _, {
              ePrivilege: 1,
            });
          }),
          (_.RegisterDataSource = function (_, _) {
            return _.SendMsg(
              "SteamLearn.RegisterDataSource#1",
              (0, _._)(_, _),
              _,
              {
                ePrivilege: 0,
                eWebAPIKeyRequirement: 1,
              },
            );
          }),
          (_.ListDataSources = function (_, _) {
            return _.SendMsg(
              "SteamLearn.ListDataSources#1",
              (0, _._)(_, _),
              _,
              {
                bConstMethod: !0,
                ePrivilege: 1,
              },
            );
          }),
          (_.GetDataSource = function (_, _) {
            return _.SendMsg("SteamLearn.GetDataSource#1", (0, _._)(_, _), _, {
              bConstMethod: !0,
              ePrivilege: 1,
            });
          }),
          (_.CacheData = function (_, _) {
            return _.SendMsg("SteamLearn.CacheData#1", (0, _._)(_, _), _, {
              ePrivilege: 0,
              eWebAPIKeyRequirement: 1,
            });
          }),
          (_.SnapshotProject = function (_, _) {
            return _.SendMsg(
              "SteamLearn.SnapshotProject#1",
              (0, _._)(_, _),
              _,
              {
                ePrivilege: 0,
                eWebAPIKeyRequirement: 1,
              },
            );
          }),
          (_.Inference = function (_, _) {
            return _.SendMsg("SteamLearn.Inference#1", (0, _._)(_, _), _, {
              ePrivilege: 0,
              eWebAPIKeyRequirement: 1,
            });
          }),
          (_.InferenceMetadata = function (_, _) {
            return _.SendMsg(
              "SteamLearn.InferenceMetadata#1",
              (0, _._)(_, _),
              _,
              {
                ePrivilege: 0,
                eWebAPIKeyRequirement: 1,
              },
            );
          }),
          (_.InferenceBackend = function (_, _) {
            return _.SendMsg(
              "SteamLearn.InferenceBackend#1",
              (0, _._)(_, _),
              _,
              {
                ePrivilege: 1,
              },
            );
          }),
          (_.BatchOperation = function (_, _) {
            return _.SendMsg("SteamLearn.BatchOperation#1", (0, _._)(_, _), _, {
              ePrivilege: 0,
              eWebAPIKeyRequirement: 1,
            });
          }),
          (_.GetAccessTokensWeb = function (_, _) {
            return _.SendMsg(
              "SteamLearn.GetAccessTokensWeb#1",
              (0, _._)(_, _),
              _,
              {
                bConstMethod: !0,
                ePrivilege: 1,
              },
            );
          }),
          (_.Train = function (_, _) {
            return _.SendMsg("SteamLearn.Train#1", (0, _._)(_, _), _, {
              ePrivilege: 1,
            });
          }),
          (_.GetFetchStatusVersions = function (_, _) {
            return _.SendMsg(
              "SteamLearn.GetFetchStatusVersions#1",
              (0, _._)(_, _),
              _,
              {
                bConstMethod: !0,
                ePrivilege: 1,
              },
            );
          }),
          (_.GetTrainStatusVersions = function (_, _) {
            return _.SendMsg(
              "SteamLearn.GetTrainStatusVersions#1",
              (0, _._)(_, _),
              _,
              {
                bConstMethod: !0,
                ePrivilege: 1,
              },
            );
          }),
          (_.GetBatchedStatus = function (_, _) {
            return _.SendMsg(
              "SteamLearn.GetBatchedStatus#1",
              (0, _._)(_, _),
              _,
              {
                bConstMethod: !0,
                ePrivilege: 1,
              },
            );
          }),
          (_.GetFetchStatus = function (_, _) {
            return _.SendMsg("SteamLearn.GetFetchStatus#1", (0, _._)(_, _), _, {
              bConstMethod: !0,
              ePrivilege: 1,
            });
          }),
          (_.GetTrainStatus = function (_, _) {
            return _.SendMsg("SteamLearn.GetTrainStatus#1", (0, _._)(_, _), _, {
              bConstMethod: !0,
              ePrivilege: 1,
            });
          }),
          (_.GetTrainLogs = function (_, _) {
            return _.SendMsg("SteamLearn.GetTrainLogs#1", (0, _._)(_, _), _, {
              bConstMethod: !0,
              ePrivilege: 1,
            });
          }),
          (_.GetSnapshotStatus = function (_, _) {
            return _.SendMsg(
              "SteamLearn.GetSnapshotStatus#1",
              (0, _._)(_, _),
              _,
              {
                bConstMethod: !0,
                ePrivilege: 1,
              },
            );
          }),
          (_.SetTrainLive = function (_, _) {
            return _.SendMsg("SteamLearn.SetTrainLive#1", (0, _._)(_, _), _, {
              bConstMethod: !0,
              ePrivilege: 1,
            });
          }),
          (_.GetLogEvents = function (_, _) {
            return _.SendMsg("SteamLearn.GetLogEvents#1", (0, _._)(_, _), _, {
              bConstMethod: !0,
              ePrivilege: 1,
            });
          }),
          (_.GetEmbeddingValues = function (_, _) {
            return _.SendMsg(
              "SteamLearn.GetEmbeddingValues#1",
              (0, _._)(_, _),
              _,
              {
                bConstMethod: !0,
                ePrivilege: 1,
              },
            );
          }),
          (_.GetNearestEmbedding = function (_, _) {
            return _.SendMsg(
              "SteamLearn.GetNearestEmbedding#1",
              (0, _._)(_, _),
              _,
              {
                bConstMethod: !0,
                ePrivilege: 1,
              },
            );
          });
      })(_ || (_ = {}));
      var _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid");
      async function _(_, _) {
        let _ = await (0, _._)(_);
        if (_.objectStoreNames.contains(_)) return _;
        const _ = _.version + 1;
        return (
          __webpack_require__.close(),
          (_ = await (0, _._)(_, _, {
            upgrade(_) {
              _.objectStoreNames.contains(_) ||
                _.createObjectStore(_, {
                  keyPath: "strKey",
                });
            },
          })),
          _
        );
      }
      async function _(_, _, _, _, _) {
        const _ = (await _(_, _)).transaction(_, "readwrite");
        await _.objectStore(_).put({
          strKey: _,
          data: _,
        }),
          await _.done;
      }
      async function _(_, _, _, _) {
        const _ = (await _(_, _)).transaction(_, "readonly"),
          _ = await _.objectStore(_).get(_);
        return await _.done, _?.data;
      }
      async function _(_, _, _, _) {
        const _ = (await _(_, _)).transaction(_, "readwrite");
        await _.objectStore(_).delete(_), await _.done;
      }
      var _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid");
      class _ {
        static s_SteamLearnStore;
        static Get() {
          return (
            _.s_SteamLearnStore ||
              ((_.s_SteamLearnStore = new _()), _.s_SteamLearnStore.Init()),
            _.s_SteamLearnStore
          );
        }
        Init() {
          const _ = (0, _._)("webapi_token", "application_config");
          (0, _._)(Boolean(_), "require webapi_token"),
            "dev" == _._.WEB_UNIVERSE &&
              console.log(
                "DEV_DEBUG Initializing CSteamLearnStore with access token ",
                _,
              ),
            (this.m_SteamInterface = new _._(_._.WEBAPI_BASE_URL, _));
        }
        GetServiceTransport() {
          return this.m_SteamInterface.GetServiceTransport();
        }
        m_SteamInterface = null;
      }
      var _ = __webpack_require__("chunkid");
      const _ = "SteamLearnDB",
        _ = "SteamLearnProjects",
        _ = "SteamLearnProjectConfig";
      function _(_) {
        return `handle_${_}`;
      }
      function _(_) {
        return `node_${_}`;
      }
      function _(_) {
        return parseInt(_.replace("handle_", ""));
      }
      function _(_) {
        return parseInt(_.replace("node_", ""));
      }
      function _(_, _) {
        return `edge_${_}_${_}`;
      }
      const _ = "SteamLearnDataSource",
        _ = "SteamLearnProjectList",
        _ = "SteamLearnProject",
        _ = "SteamLearnFetchStatus",
        _ = "SteamLearnTrainStatus";
      function _(_, _) {
        return ["SteamLearnProjectConfig", _, _];
      }
      function _(_, _) {
        return _
          ? ["SteamLearnFetchStatusVersions", _, _]
          : ["SteamLearnFetchStatusVersions", _];
      }
      function _(_, _) {
        return _
          ? ["SteamLearnTrainStatusVersions", _, _]
          : ["SteamLearnTrainStatusVersions", _];
      }
      function _(_) {
        return `SteamLearnWorkingProject_Universe${_._.EUNIVERSE}_Project${_}`;
      }
      function _(_, _) {
        return `SteamLearnWorkingProject_Universe${_._.EUNIVERSE}_Project${_}_Version${_}`;
      }
      function _() {
        return (0, _._)({
          queryKey: ["SteamLearnDataSourceList"],
          queryFn: () =>
            (async function () {
              let _ = _._.Init(_);
              const _ = await _.ListDataSources(
                _.Get().GetServiceTransport(),
                _,
              );
              if (_.BIsValid() && 1 == _.GetEResult())
                return (
                  _.Body()
                    .data_sources()
                    .forEach((_) => {
                      _._.setQueryData([_, _._()], _);
                    }),
                  _.Body().data_sources()
                );
              throw "Failed FetchDataSourceList";
            })(),
          staleTime: 1 / 0,
        });
      }
      function _(_) {
        return (0, _._)({
          queryKey: [_, _],
          queryFn: () =>
            (async function (_) {
              let _ = _._.Init(_);
              _.Body().set_data_source_id(_);
              const _ = await _.GetDataSource(_.Get().GetServiceTransport(), _);
              if (
                __webpack_require__.BIsValid() &&
                1 == __webpack_require__.GetEResult()
              )
                return __webpack_require__.Body().data_source();
              throw `Failed FetchDataSource ${_}`;
            })(_),
          staleTime: 1 / 0,
        });
      }
      function _(_, _) {
        const _ = _(_);
        if (!_.isSuccess) return;
        return _(_.data.structure(), "", _);
      }
      function _(_, _, _) {
        for (const _ of _.elements())
          for (let _ = 0; _ < _.count(); _++) {
            const _ = _ + `${_.length > 0 ? "/" : ""}${_.name()}#${_}`;
            if (_ == _) return _;
            if (5 == _.data_type()) {
              const _ = _(_.object(), _, _);
              if (_) return _;
            }
          }
      }
      async function _(_) {
        const _ = await (async function (_) {
            let _ = _._.Init(_);
            _.Body().set_project_id(_);
            const _ = await _.GetProject(_.Get().GetServiceTransport(), _);
            if (
              __webpack_require__.BIsValid() &&
              1 == __webpack_require__.GetEResult()
            )
              return __webpack_require__.Body().project();
            throw `Failed FetchProject ${_}`;
          })(_),
          _ = _(_);
        (await _(_, 0, _, _)) ||
          (await _(_, 0, _, _, _.serializeBase64String()));
        const _ = await _(_, 0, _, _),
          _ = _.deserializeBinary(Uint8Array.from(_._.from(_, "base64")));
        for (const _ of _.published_configs())
          for (const _ of _.published_configs())
            _.published_version() == _.published_version() &&
              (_.set_fetch_infos(_.fetch_infos()),
              _.set_train_infos(_.train_infos()));
        return [_, _];
      }
      function _() {
        return (0, _._)({
          queryKey: [_],
          queryFn: () =>
            (async function () {
              let _ = _._.Init(_);
              const _ = await _.ListProjects(_.Get().GetServiceTransport(), _);
              if (_.BIsValid() && 1 == _.GetEResult())
                return _.Body().projects();
              throw "Failed FetchProjectList";
            })(),
          staleTime: 1 / 0,
        });
      }
      function _() {
        return (0, _._)({
          queryKey: ["SteamLearnProjectConfigList"],
          queryFn: () =>
            (async function () {
              let _ = _._.Init(_);
              const _ = await _.ListProjectConfigs(
                _.Get().GetServiceTransport(),
                _,
              );
              if (_.BIsValid() && 1 == _.GetEResult())
                return _.Body().project_config_infos();
              throw "Failed FetchProjectList";
            })(),
          staleTime: 1 / 0,
        });
      }
      function _(_) {
        return (0, _._)({
          queryKey: [_, _],
          queryFn: async () => _(_),
          staleTime: 1 / 0,
        });
      }
      function _(_) {
        const _ = _();
        if (0 != _ && _.data) {
          for (const _ of _.data)
            if (__webpack_require__.project_id() == _)
              return __webpack_require__.project_name();
          return `Project ${_}`;
        }
      }
      async function _(_, _) {
        let _ = _._.Init(_);
        __webpack_require__.Body().set_project_id(_),
          __webpack_require__.Body().set_published_version(_);
        const _ = await _.GetProjectConfig(_.Get().GetServiceTransport(), _);
        if (_.BIsValid() && 1 == _.GetEResult())
          return _.Body().project_config();
        throw `Failed FetchProjectConfig ${_} ${_}`;
      }
      function _(_, _) {
        return (0, _._)({
          queryKey: _(_, _),
          queryFn: async () =>
            (async function (_, _) {
              const _ = await _(_, _),
                _ = _(_, _);
              (await _(_, 0, _, _)) ||
                (await _(
                  _,
                  0,
                  _,
                  _,
                  __webpack_require__.serializeBase64String(),
                ));
              const _ = await _(_, 0, _, _),
                _ = _.deserializeBinary(Uint8Array.from(_._.from(_, "base64")));
              return (
                _.set_fetch_infos(__webpack_require__.fetch_infos()),
                _.set_train_infos(__webpack_require__.train_infos()),
                [_, _]
              );
            })(_, _),
          staleTime: 1 / 0,
        });
      }
      function _(_, _) {
        const _ = (function (_, _) {
            const _ = _(_);
            if (!_.isSuccess) return;
            const [_, _] = _.data;
            return _.unpublished_config()
              .data_source_element_usages()
              .find((_) => _.input() == _);
          })(_.project_id(), _),
          _ = _(__webpack_require__?.data_source_id());
        if (_ && _.data)
          return `${_.data.name()}:${__webpack_require__.data_element_path()}`;
      }
      function _() {
        return (0, _._)({
          queryKey: ["SteamLearnAccessTokens"],
          queryFn: () =>
            (async function () {
              let _ = _._.Init(_);
              _.Body().set_appid(570);
              const _ = await _.GetAccessTokensWeb(
                _.Get().GetServiceTransport(),
                _,
              );
              if (_.BIsValid() && 1 == _.GetEResult()) return _.Body();
              throw "Failed FetchAccessTokens";
            })(),
          staleTime: 1 / 0,
        });
      }
      function _(_, _) {
        return (0, _._)({
          queryKey: _(_, _),
          queryFn: () =>
            (async function (_, _) {
              let _ = _._.Init(_);
              __webpack_require__.Body().set_project_id(_),
                __webpack_require__.Body().set_published_version(_);
              const _ = await _.GetFetchStatusVersions(
                _.Get().GetServiceTransport(),
                _,
              );
              if (_.BIsValid() && 1 == _.GetEResult()) return _.Body();
              throw `Failed FetchFetchVersions: Project ${_}`;
            })(_, _),
          staleTime: 1 / 0,
        });
      }
      function _(_, _) {
        return (0, _._)({
          queryKey: _(_, _),
          queryFn: () =>
            (async function (_, _) {
              let _ = _._.Init(_);
              __webpack_require__.Body().set_project_id(_),
                __webpack_require__.Body().set_published_version(_);
              const _ = await _.GetTrainStatusVersions(
                _.Get().GetServiceTransport(),
                _,
              );
              if (_.BIsValid() && 1 == _.GetEResult()) return _.Body();
              throw `Failed FetchTrainVersions: Project ${_}`;
            })(_, _),
          staleTime: 1 / 0,
        });
      }
      function _(_, _) {
        return (0, _._)({
          queryKey: [_, _, _],
          queryFn: () =>
            (async function (_, _) {
              let _ = _._.Init(_);
              __webpack_require__.Body().set_project_id(_),
                __webpack_require__.Body().set_fetch_id(_);
              const _ = await _.GetFetchStatus(
                _.Get().GetServiceTransport(),
                _,
              );
              if (_.BIsValid() && 1 == _.GetEResult()) return _.Body();
              throw `Failed FetchFetchStatus: Project ${_}`;
            })(_, _),
          staleTime: 1 / 0,
        });
      }
      function _(_, _) {
        return (0, _._)({
          queryKey: [_, _, _],
          queryFn: () =>
            (async function (_, _) {
              let _ = _._.Init(_);
              __webpack_require__.Body().set_project_id(_),
                __webpack_require__.Body().set_train_id(_);
              const _ = await _.GetTrainStatus(
                _.Get().GetServiceTransport(),
                _,
              );
              if (_.BIsValid() && 1 == _.GetEResult()) return _.Body();
              throw `Failed FetchTrainStatus: Project ${_}`;
            })(_, _),
          staleTime: 1 / 0,
        });
      }
      function _(_, _, _) {
        return (0, _._)({
          queryKey: ["SteamLearnTrainLogs", _, _, _],
          queryFn: () =>
            (async function (_, _, _) {
              let _ = _._.Init(_);
              _.Body().set_project_id(_),
                _.Body().set_fetch_id(_),
                _.Body().set_train_id(_);
              const _ = await _.GetTrainLogs(_.Get().GetServiceTransport(), _);
              if (_.BIsValid() && 1 == _.GetEResult()) return _.Body();
              throw `Failed FetchLogs: Project ${_}, Train ${_}, Fetch ${_}`;
            })(_, _, _),
          staleTime: 1e4,
        });
      }
      function _(_, _, _, _) {
        return (0, _._)({
          queryKey: ["SteamLearnTrainLogEvents", _, _, _, _],
          queryFn: () =>
            (async function (_, _, _, _) {
              let _ = _._.Init(_);
              _.Body().set_start_timestamp(_),
                _.Body().set_end_timestamp(_),
                _.Body().set_project_id(_),
                _.Body().set_published_version(_);
              const _ = await _.GetLogEvents(_.Get().GetServiceTransport(), _);
              if (_.BIsValid() && 1 == _.GetEResult()) return _.Body();
              throw `Failed FetchLogEvents: ${_} to ${_} `;
            })(_, _, _, _),
          staleTime: 1 / 0,
        });
      }
      function _(_, _, _) {
        return (0, _._)({
          queryKey: ["SteamLearnSnapshotStatus", _, _],
          queryFn: () =>
            (async function (_, _, _) {
              let _ = _._.Init(_);
              _.Body().set_project_id(_),
                _.Body().set_published_version(_),
                _.Body().set_snapshot_example_count(_);
              const _ = await _.GetSnapshotStatus(
                _.Get().GetServiceTransport(),
                _,
              );
              if (_.BIsValid() && 1 == _.GetEResult()) return _.Body();
              throw `Failed FetchSnapshotStatus: ${_} to ${_} `;
            })(_, _, _),
          staleTime: 1 / 0,
        });
      }
      function _(_, _) {
        _._.invalidateQueries({
          queryKey: [_, _, _],
        });
      }
      function _(_, _) {
        _._.invalidateQueries({
          queryKey: [_, _, _],
        });
      }
      async function _(_, _, _) {
        let _ = _._.Init(_);
        for (const _ of _) {
          let _ = new _();
          _.set_project_id(_),
            _.set_fetch_id(_),
            _.Body().add_fetch_requests(_);
        }
        for (const _ of _) {
          let _ = new _();
          __webpack_require__.set_project_id(_),
            __webpack_require__.set_train_id(_),
            _.Body().add_train_requests(_);
        }
        const _ = await _.GetBatchedStatus(_.Get().GetServiceTransport(), _);
        if (_.BIsValid() && 1 == _.GetEResult()) return _.Body();
        throw `Failed FetchBatchStatus: Project ${_}, Fetch IDs: ${_}, Train IDs: ${_}`;
      }
      async function _(_, _) {
        let _ = _._.Init(_);
        __webpack_require__.Body().set_project_name(_),
          __webpack_require__.Body().set_project_description(_);
        const _ = await _.CreateProject(_.Get().GetServiceTransport(), _);
        return (
          _ &&
            1 == _.GetEResult() &&
            (_._.setQueryData(
              [_, _.Body().project().project_id()],
              [_.Body().project(), _.Body().project()],
            ),
            _._.invalidateQueries({
              queryKey: [_],
            })),
          [_.Body().result(), _.Body().project().project_id()]
        );
      }
      async function _(_) {
        let _ = _._.Init(_);
        _.Body().set_project_config(_);
        const _ = await _.EditProjectConfig(_.Get().GetServiceTransport(), _);
        return (
          _ &&
            1 == __webpack_require__.GetEResult() &&
            (await _(_, 0, _, _(_.project_id(), _.published_version())),
            _._.invalidateQueries({
              queryKey: _(_.project_id(), _.published_version()),
            })),
          __webpack_require__.Body().result()
        );
      }
      async function _(_, _) {
        await _(_, 0, _, _(_, _)),
          await _._.invalidateQueries({
            queryKey: _(_, _),
          }),
          _._.invalidateQueries({
            queryKey: _(_),
          }),
          _._.invalidateQueries({
            queryKey: _(_),
          });
      }
      function _(_, _) {
        let _;
        for (const _ of _.project_nodes())
          _.type() == _ &&
            (!_ || _.node_id() > __webpack_require__.node_id()) &&
            (_ = _);
        return _
          ? [
              __webpack_require__.location_x() + 100,
              __webpack_require__.location_y(),
            ]
          : [0, 0];
      }
      function _(_) {
        const _ = _.project_nodes()
          .map((_) => _.node_id())
          .sort((_, _) => _ - _);
        for (let _ = 0; _ < _.length; _++) if (_[_] != _ + 1) return _ + 1;
        return _.length + 1;
      }
      function _(_, _) {
        let _ = [];
        for (const _ of _.project_nodes())
          __webpack_require__.push(
            ..._.connectors().map((_) => _.connector_id()),
          );
        let _ = [];
        for (
          let _ = 1;
          __webpack_require__.includes(_) || (_.push(_), _.length != _);
          _++
        );
        return _;
      }
      function _(_) {
        return _(_, 1)[0];
      }
      function _(_, _, _, _, _) {
        let _ = _.project_nodes().find((_) => _.node_id() == _),
          _ = _.project_nodes().find((_) => _.node_id() == _);
        if (
          ((0, _._)(_, `AddEdgeToConfig: Failed to find source node: ${_}`),
          (0, _._)(_, `AddEdgeToConfig: Failed to find target node: ${_}`),
          !_ || !_)
        )
          return;
        let _ = _.connectors().find((_) => _.connector_id() == _),
          _ = _.connectors().find((_) => _.connector_id() == _);
        (0, _._)(
          _,
          `AddEdgeToConfig: Failed to find source connector: ${_}, ${_}`,
        ),
          (0, _._)(
            _,
            `AddEdgeToConfig: Failed to find target connector: ${_}, ${_}`,
          ),
          _.add_linked_connector_ids(_),
          _(_);
      }
      function _(_, _) {
        for (const _ of _.project_nodes())
          for (const _ of __webpack_require__.connectors())
            for (const _ of _.linked_connector_ids())
              if (_ == _)
                return {
                  msgIncomingNode: _,
                  nIncomingConnectorID: _.connector_id(),
                };
        return {
          msgIncomingNode: void 0,
          nIncomingConnectorID: 0,
        };
      }
      function _(_, _, _) {
        let _ = [];
        switch (_.type()) {
          case 1: {
            let _ = 0,
              _ = !1;
            for (const _ of _.data_source_element_usages())
              _.input() == _.input().input_num() &&
                (_++, 6 == _.preprocessing_type() && (_ = !0));
            _ ? _.push(1) : _.push(_);
            break;
          }
          case 2:
            _.push(_.dense().width());
            break;
          case 3:
            _.push(_.dense_stack().width()[_.dense_stack().width().length - 1]);
            break;
          case 4: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              1 == _.length && _.push(_[0]);
            }
            break;
          }
          case 5: {
            const _ = _.connectors()
              .find((_) => _.is_input_connector())
              ?.connector_id();
            if (!_) {
              (0, _._)(!1, `No input connector on node ${_.toObject()}`);
              break;
            }
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(_, _);
            if (_)
              if (_.embedding().flatten()) {
                const _ = _(_, _, _);
                (0, _._)(
                  1 == _.length,
                  `Input tensor to STEAMLEARN_NODE_TYPE_EMBEDDING not one-dimensional! (node ${_.toObject()}, connector ${_}`,
                ),
                  _.push(_[0] * _.embedding().embedding_width());
              } else {
                const _ = _(_, _, _);
                (0, _._)(
                  1 == _.length,
                  `Input tensor to STEAMLEARN_NODE_TYPE_EMBEDDING not one-dimensional! (node ${_.toObject()}, connector ${_}`,
                ),
                  _.push(_[0]),
                  _.push(_.embedding().embedding_width());
              }
            break;
          }
          case 8: {
            let _;
            const _ = _.concatenate().axis() || 0;
            let _ = 0;
            for (const _ of _.connectors())
              if (_.is_input_connector()) {
                const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
                  _,
                  _.connector_id(),
                );
                if (_) {
                  const _ = _(_, _, _);
                  (0, _._)(
                    1 == _.length,
                    `Input tensor to STEAMLEARN_NODE_TYPE_CONCATENATE not one-dimensional! (node ${_.toObject()}, connector ${_}`,
                  ),
                    (_ += _[_]),
                    _ || __webpack_require__.push(..._);
                }
              }
            _ && ((_[_] = _), _.push(..._));
            break;
          }
          case 15: {
            let _ = 0;
            for (const _ of _.connectors())
              if (_.is_input_connector()) {
                const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
                  _,
                  _.connector_id(),
                );
                if (_) {
                  const _ = _(_, _, _);
                  (0, _._)(
                    0 == _.length || 1 == _.length,
                    `Input tensor to STEAMLEARN_NODE_TYPE_COMBINE not one-dimensional: ${_}! (node ${_.toObject()}, connector ${_}`,
                  ),
                    (_ += _[0]);
                }
              }
            _.push(_);
            break;
          }
          case 9: {
            const _ = _.connectors()
              .find((_) => _.is_input_connector())
              ?.connector_id();
            if (!_) {
              (0, _._)(!1, `No input connector on node ${_.toObject()}`);
              break;
            }
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(_, _);
            if (_) {
              const _ = _(_, _, _);
              (0, _._)(
                1 == _.length,
                `Input tensor to STEAMLEARN_NODE_TYPE_SHUFFLE not one-dimensional! (node ${_}, connector ${_}`,
              ),
                _.push(_[0]);
            }
            break;
          }
          case 10: {
            const _ = _.connectors()
                .filter((_) => _.is_input_connector())
                .map((_) => _.connector_id()),
              _ = _.connectors()
                .filter((_) => !_.is_input_connector())
                .map((_) => _.connector_id());
            (0, _._)(
              _.length == _.length,
              `Synced shuffle node with different number of input and output connectors: ${_.toObject()}`,
            );
            const _ = _[_.findIndex((_) => _ == _)],
              { msgIncomingNode: _, nIncomingConnectorID: _ } = _(_, _);
            if (_) {
              const _ = _(_, _, _);
              1 == _.length && _.push(_[0]);
            }
            break;
          }
          case 11:
            if (_.onehot().compact_table().length > 0) {
              _.push(void 0);
              break;
            }
            _.push(_.onehot().width());
            break;
          case 12:
          case 14:
          case 20:
            _.push(1);
            break;
          case 27:
          case 33:
          case 35:
            break;
          case 13: {
            const _ = _.connectors()
              .filter((_) => _.is_input_connector())
              .map((_) => _.connector_id());
            (0, _._)(
              3 == _.length,
              "Conditional swap node with other than 3 input connectors:",
              _.toObject(),
            );
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(_, _[1]);
            if (_) {
              const _ = _(_, _, _);
              _.push(..._);
            }
            break;
          }
          case 7: {
            const _ = _.connectors().findIndex((_) => _.connector_id() == _);
            if (-1 == _) break;
            if (_ % 3 == 2) {
              _.push(1);
              break;
            }
            const _ = Math.floor(_ / 3),
              { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
                _,
                _.connectors()[_].connector_id(),
              ),
              _ = _(_, _, _);
            _.push(_[0] - 1);
            break;
          }
          case 21: {
            const _ = _.connectors().findIndex((_) => _.connector_id() == _);
            if (-1 == _) break;
            if (0 == _) {
              _.push(1);
              break;
            }
            if (_ % 3 == 0 && 0 != _) {
              _.push(1);
              break;
            }
            const _ = 3 * Math.floor((_ - 1) / 3) + 1,
              { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
                _,
                _.connectors()[_].connector_id(),
              ),
              _ = _(_, _, _);
            _.push(_[0] - 1);
            break;
          }
          case 16:
            switch (_.text_vectorization().output()) {
              case 1:
              case 2:
              case 3:
                _.push(_.text_vectorization().vocabulary_size());
                break;
              case 0:
                _.push(_.text_vectorization().sequence_length());
            }
            break;
          case 19: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              _.push(_[0]);
            }
            break;
          }
          case 24: {
            let _ = 1;
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              if (_.length > 0) for (const _ of _) _ *= _;
            }
            _.push(_);
            break;
          }
          case 30: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              for (let _ = 0; _ < _.length; _++)
                _ != _.weighted_average().axis() && _.push(_[_]);
            }
            break;
          }
          case 22: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              _.length > 0 &&
                (_.push(_[0] - _.conv_1d().kernel_size() + 1),
                _.push(_.conv_1d().filters()));
            }
            break;
          }
          case 23: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              if (_.length > 0) {
                _.push(
                  Math.floor(
                    (_[0] - _.max_pooling_1d().pool_size() + 1) /
                      _.max_pooling_1d().pool_size(),
                  ),
                );
                for (let _ = 1; _ < _.length; _++) _.push(_[_]);
              }
            }
            break;
          }
          case 25: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              _.length > 0 && _.push(_[0]);
            }
            break;
          }
          case 31: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              _.length > 0 && _.push(_[0]);
            }
            break;
          }
          case 26: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              _.push(..._);
            }
            break;
          }
          case 28: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              2 == _.length &&
                (_.push(_[0]), _.push(_.time_distributed_dense().width()));
            }
            break;
          }
          case 29: {
            let _ = 0;
            for (const _ of _.data_source_element_usages())
              6 == _.preprocessing_type() &&
                _.sequence_table() ==
                  _.sequence_split().sequence_table_name() &&
                _++;
            _.push(2), _.push(_);
            break;
          }
          case 17: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            _ && _.push(..._(_, _, _));
            break;
          }
          case 18: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            _ && _.push(..._(_, _, _));
            break;
          }
          case 32:
            switch (_.connectors().findIndex((_) => _.connector_id() == _)) {
              case 0: {
                const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
                  _,
                  _.connectors()[0].connector_id(),
                );
                _ && _.push(..._(_, _, _));
                break;
              }
              case 1:
              case 2:
              case 3:
                _.push(_.token_mask().mask_count_limit());
            }
            break;
          case 34: {
            if (_.connectors().length < 4) {
              console.warn(
                "Token Transformer Node",
                _.node_id(),
                "does not have the three required incoming connectors",
              );
              break;
            }
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
                _,
                _.connectors()[0].connector_id(),
              ),
              { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
                _,
                _.connectors()[1].connector_id(),
              ),
              { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
                _,
                _.connectors()[2].connector_id(),
              );
            _ && _.push(..._(_, _, _), _.token_transformer().transformer_dim()),
              _ &&
                (0 == _.length
                  ? _.push(..._(_, _, _))
                  : (_[1] += _(_, _, _)[1])),
              _ && (_[0] += 1),
              _.token_transformer().is_causal() && (_[0] += 1);
            break;
          }
          case 36: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              let _ = 1;
              for (const _ of _) _ *= _;
              _.push(
                _.reshape_2d().dimension(),
                Math.floor(_ / _.reshape_2d().dimension()),
              );
            }
            break;
          }
          case 37: {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.connectors()[0].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              _.push(_[_.row_extract().row()]);
            }
            break;
          }
          case 38:
          case 40:
            _.push(768);
            break;
          case 39:
            _.push(_.bert_tokenizer().sequence_length());
            break;
          default:
            (0, _._)(
              !1,
              `GetNodeOutputShape - NEED TO IMPLEMENT node type ${_.type()}`,
            );
        }
        return _;
      }
      function _(_, _) {
        const _ = _.project_nodes().findIndex((_) => _.node_id() == _);
        if (-1 == _) return;
        const _ = _.project_nodes()
          [_].connectors()
          .map((_) => _.connector_id());
        for (let _ of _.project_nodes())
          for (let _ of _.connectors())
            _.set_linked_connector_ids(
              _.linked_connector_ids().filter((_) => !_.includes(_)),
            );
        _.project_nodes().splice(_, 1), _(_);
      }
      function _(_) {
        let _ = [];
        for (const _ of _.data_source_element_usages())
          0 != __webpack_require__.input() &&
            (_.includes(__webpack_require__.input()) ||
              _.push(__webpack_require__.input()));
        return _.sort();
      }
      function _(_) {
        let _ = _(_);
        for (; _.length > 0; ) {
          const _ = _[0],
            _ = _.project_nodes().find(
              (_) => 1 == _.type() && _.input().input_num() == _,
            ),
            _ = _.data_source_element_usages().find((_) => _.input() == _);
          if (!_) {
            const [_, _] = _(_, 1);
            let _ = new _();
            _.set_connector_id(_(_)), _.set_is_input_connector(!1);
            let _ = new _();
            if (
              (_.set_node_id(_(_)),
              _.set_type(1),
              _.set_location_x(_),
              _.set_location_y(_),
              _.set_comment(""),
              _.input().set_input_num(_),
              _.add_connectors(_),
              6 == _.preprocessing_type())
            ) {
              let _ = new _();
              _.set_connector_id(_(_)),
                _.set_is_input_connector(!1),
                _.add_connectors(_);
            }
            _.add_project_nodes(_);
          }
          _.shift();
        }
        _ = _(_);
        const _ = _.project_nodes().filter(
          (_) => 1 != _.type() || _.includes(_.input().input_num()),
        );
        _.set_project_nodes(_);
        if (!_.project_nodes().find((_) => 6 == _.type())) {
          const [_, _] = _(_, 6),
            _ = _(_, 2);
          let _ = new _();
          _.set_connector_id(_[0]), _.set_is_input_connector(!0);
          let _ = new _();
          _.set_connector_id(_[1]), _.set_is_input_connector(!0);
          let _ = new _();
          _.set_node_id(_(_)),
            _.set_type(6),
            _.set_location_x(_),
            _.set_location_y(_),
            _.set_comment(""),
            _.train().set_input_count(1),
            _.train().set_activation(2),
            _.train().set_compact_table(""),
            _.train().set_width(0),
            _.train().set_loss(1),
            _.add_connectors(_),
            _.add_connectors(_),
            _.add_project_nodes(_);
        }
      }
      function _(_) {
        _(_.unpublished_config());
        for (const _ of _.published_configs()) _(_);
        _(_, 0, _, _(_.project_id()), _.serializeBase64String()),
          _._.invalidateQueries({
            queryKey: [_, _.project_id()],
          });
      }
      function _(_) {
        console.log("SetWorkingProject"),
          _(_),
          _(
            _,
            0,
            _,
            _(_.project_id(), _.published_version()),
            _.serializeBase64String(),
          ),
          _._.invalidateQueries({
            queryKey: _(_.project_id(), _.published_version()),
          });
      }
      function _(_, _) {
        const _ = (function (_) {
          return _._.getQueryData([_, _]);
        })(_);
        if (!_) return !1;
        if (0 != _.published_version())
          return (
            console.error("Attempt to add datasource to published project!"), !1
          );
        for (const _ of __webpack_require__.structure().elements())
          _(_, "", _, _);
        return _.add_data_source_ids(_), !0;
      }
      function _(_, _, _, _) {
        for (let _ = 0; _ < _.count(); _++) {
          const _ = `${_}${0 == _.length ? "" : "/"}${_.name()}#${_}`;
          if (5 == _.data_type())
            for (const _ of _.object().elements()) _(_, _, _, _);
          else {
            let _ = new _();
            _.set_data_source_id(_),
              _.set_input(0),
              _.set_data_element_path(_),
              _.set_is_string(4 == _.data_type()),
              _.set_preprocessing_type(0),
              _.set_min_range(0),
              _.set_max_range(0),
              _.set_std_dev(1),
              _.set_compact_table(""),
              _.set_sequence_table(""),
              _.add_data_source_element_usages(_);
          }
        }
      }
      function _(_, _) {
        const _ = _.data_source_ids().indexOf(_);
        if (-1 == _) return !1;
        if (0 != _.published_version())
          return (
            console.error("Attempt to remove datasource to published project!"),
            !1
          );
        let _ = _.data_source_element_usages().filter(
          (_) => _.data_source_id() != _,
        );
        return (
          (_.data_source_element_usages().length = 0),
          _.data_source_element_usages().push(..._),
          _.data_source_ids().splice(_, 1),
          !0
        );
      }
      function _(_, _, _) {
        return (
          _.length > 0 &&
          /^-?[\d]*$/.test(_) &&
          (void 0 === _ || parseInt(_) >= _) &&
          (void 0 === _ || parseInt(_) <= _)
        );
      }
      function _(_, _, _) {
        return (
          /^[\d]*\.?[\d]*$/.test(_) &&
          (void 0 === _ || parseFloat(_) >= _) &&
          (void 0 === _ || parseFloat(_) <= _)
        );
      }
      function _(_, _, _) {
        for (const _ of _.data_source_element_usages())
          if (__webpack_require__.compact_table() == _) return !0;
        for (const _ of _.project_nodes())
          if (
            (!_ || __webpack_require__.node_id() != _.node_id()) &&
            7 == _.type() &&
            _.conditional_extract().extracted_compact_table() == _
          )
            return !0;
        for (const _ of _.project_nodes())
          if (
            (!_ || __webpack_require__.node_id() != _.node_id()) &&
            21 == _.type() &&
            _.extract().extracted_compact_table() == _
          )
            return !0;
        return !1;
      }
      function _(_, _, _) {
        for (const _ of _.data_source_element_usages())
          if (__webpack_require__.sequence_table() == _) return !0;
        return !1;
      }
      var _;
      function _(_) {
        switch (_) {
          default:
          case 0:
            return _.Invalid;
          case 1:
            return _.Input;
          case 6:
            return _.Train;
          case 15:
          case 7:
          case 13:
          case 12:
          case 14:
          case 18:
          case 11:
          case 9:
          case 10:
          case 29:
          case 16:
          case 32:
          case 21:
          case 27:
          case 38:
          case 39:
            return _.Preprocessing;
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 17:
          case 19:
          case 20:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 28:
          case 30:
          case 31:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 40:
            return _.Keras;
        }
      }
      function _(_, _, _, _, _) {
        let _ = _.project_nodes().find((_) => _.node_id() == _),
          _ = _.project_nodes().find((_) => _.node_id() == _);
        if (
          ((0, _._)(_, `IsValidConnection: Failed to find source node: ${_}`),
          (0, _._)(_, `IsValidConnection: Failed to find target node: ${_}`),
          !_ || !_)
        )
          return !1;
        let _ = _.connectors().find((_) => _.connector_id() == _),
          _ = _.connectors().find((_) => _.connector_id() == _);
        (0, _._)(
          _,
          `IsValidConnection: Failed to find source connector: ${_}, ${_}`,
        ),
          (0, _._)(
            _,
            `IsValidConnection: Failed to find target connector: ${_}, ${_}`,
          );
        return !!(function (_, _) {
          switch (_) {
            default:
            case _.Invalid:
            case _.Train:
              return !1;
            case _.Input:
            case _.Preprocessing:
              switch (_) {
                default:
                  return !1;
                case _.Keras:
                case _.Preprocessing:
                case _.Train:
                  return !0;
              }
            case _.Keras:
              switch (_) {
                default:
                  return !1;
                case _.Keras:
                case _.Train:
                  return !0;
              }
          }
        })(_(_.type()), _(_.type()));
      }
      !(function (_) {
        (_[(_.Invalid = 0)] = "Invalid"),
          (_[(_.Input = 1)] = "Input"),
          (_[(_.Preprocessing = 2)] = "Preprocessing"),
          (_[(_.Keras = 3)] = "Keras"),
          (_[(_.Train = 4)] = "Train");
      })(_ || (_ = {}));
      const _ = _.createContext(null),
        _ = () => _.useContext(_);
      function _(_) {
        return _.createElement(
          _.Provider,
          {
            value: _.steamLearnContext,
          },
          _.children,
        );
      }
      const _ = (_) => {
          const _ = _(_.nProjectID, _.nPublishedVersion),
            _ = _();
          if (!_.nProjectID)
            return _.createElement(
              _,
              {
                steamLearnContext: {},
              },
              _.children,
            );
          const [_, _] = _.data || [void 0, void 0],
            _ = _.data;
          let _ =
            _?.find(
              (_) => _.project_id() == _.nProjectID,
            )?.published_versions() || [];
          return _.createElement(
            _,
            {
              steamLearnContext: {
                nProjectID: _.nProjectID,
                nPublishedVersion: _.nPublishedVersion,
                arrOtherPublishedVersions: _,
                msgProjectConfig: _,
                msgWorkingProjectConfig: _,
              },
            },
            _.children,
          );
        },
        _ = (_) => {
          const _ = (0, _._)(),
            _ = _(_.pathname);
          let _, _;
          for (const _ of Object.values(_)) {
            const _ = _(void 0, void 0),
              _ = (0, _._)(_.pathname, _);
            _ &&
              __webpack_require__.includes(`/${_.SteamLearnProject()}/`) &&
              (void 0 !== _.params._ && (_ = parseInt(_.params._)),
              void 0 !== _.params.version && (_ = parseInt(_.params.version)));
          }
          return _ && void 0 !== _
            ? _.createElement(
                _,
                {
                  nProjectID: _,
                  nPublishedVersion: _,
                },
                _.children,
              )
            : _.createElement(
                _,
                {
                  steamLearnContext: {},
                },
                _.children,
              );
        };
      var _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid");
      __webpack_require__("chunkid");
      function _(_, _, _, _, _) {
        if (0 == _) return void _.push(_.SteamLearnProjectCreate());
        let _ = _;
        if (-1 == _) {
          const _ = _.find((_) => _.project_id() == _);
          if (_ && _.published_versions().length > 0) {
            _ = _.published_versions().reduce((_, _) => (_ < _ ? _ : _));
          }
        }
        -1 == _ && (_ = 0),
          _(_.pathname, [_.SteamLearnProjectDataSources(void 0, void 0)]) &&
            _.push(_.SteamLearnProjectDataSources(_, _)),
          _(_.pathname, [_.SteamLearnProjectOverview(void 0, void 0)]) &&
            _.push(_.SteamLearnProjectOverview(_, _)),
          _(_.pathname, [_.SteamLearnProjectSnapshots(void 0, void 0)]) &&
            _.push(_.SteamLearnProjectSnapshots(_, _)),
          _(_.pathname, [_.SteamLearnProjectTrainSettings(void 0, void 0)]) &&
            _.push(_.SteamLearnProjectTrainSettings(_, _)),
          _(_.pathname, [_.SteamLearnProjectModel(void 0, void 0)]) &&
            _.push(_.SteamLearnProjectModel(_, _)),
          _(_.pathname, [_.SteamLearnProjectTrain(void 0, void 0)]) &&
            _.push(_.SteamLearnProjectTrain(_, _)),
          _(_.pathname, [_.SteamLearnProjectTrainStatus(void 0, void 0)]) &&
            _.push(_.SteamLearnProjectTrainStatus(_, _)),
          _(_.pathname, [_.SteamLearnProjectInferenceTester(void 0, void 0)]) &&
            _.push(_.SteamLearnProjectInferenceTester(_, _));
      }
      const _ = (_) => {
          const {
              nProjectID: _,
              arrOtherPublishedVersions: __webpack_require__,
              msgProjectConfig: _,
            } = _(),
            [_, _] = _.useState(
              __webpack_require__.length > 0 ? __webpack_require__[0] : 0,
            ),
            [_, _] = _.useState(!1),
            _ = async (_) => {
              _(!0),
                await (async function (_, _, _) {
                  const _ = (await _(_, _)).cloneMessage();
                  _.set_published_version(_), _(_);
                })(_, _, 0),
                _(!1),
                _.fnClosePopup();
            };
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: _.fnClosePopup,
              modalClassName: "CopyPublishedVersionPopup",
            },
            _.createElement(
              _._,
              null,
              " ",
              (0, _._)("#SteamLearn_Project_CopyPublished") ||
                _.createElement(_.Fragment, null, " "),
              " ",
            ),
            _.createElement(
              _._,
              null,
              _.createElement(
                _._,
                null,
                (0, _._)("#SteamLearn_Project_CopyPublished_Warning"),
              ),
              _.createElement(
                "select",
                {
                  onChange: (_) => _(parseInt(_.target.value)),
                },
                __webpack_require__.map((_) =>
                  _.createElement(
                    "option",
                    {
                      key: _,
                      value: _,
                    },
                    `Version ${_}`,
                  ),
                ),
              ),
              _.createElement(
                _._,
                null,
                _.createElement(_._, {
                  onCancel: () => _.fnClosePopup(),
                  onOK: () => _(_),
                  bOKDisabled: _,
                }),
              ),
            ),
          );
        },
        _ = (_) => {
          const {
              msgProjectConfig: _,
              msgWorkingProjectConfig: __webpack_require__,
            } = _(),
            [_, _] = _.useState(!1),
            [_, _] = _.useState(!1);
          _.useEffect(() => {
            _(!1);
          }, [_.bVisible]);
          const _ = new _._({
            detectCircular: !0,
            maxDepth: 1 / 0,
            showModifications: !0,
            arrayDiffMethod: "lcs",
          });
          return _ && __webpack_require__
            ? _.createElement(
                _._,
                {
                  active: _.bVisible,
                  onDismiss: _.fnClosePopup,
                  modalClassName: "DiscardChangesPopup",
                },
                _.createElement(
                  _._,
                  null,
                  " ",
                  (0, _._)("#SteamLearn_Project_Discard") ||
                    _.createElement(_.Fragment, null, " "),
                  " ",
                ),
                _.createElement(
                  _._,
                  null,
                  _.createElement(
                    _._,
                    null,
                    _ &&
                      _.createElement(
                        "div",
                        {
                          className: _.DiffTableContainer,
                        },
                        _.createElement(_._, {
                          diff: _.diff(
                            _?.toObject(),
                            __webpack_require__?.toObject(),
                          ),
                          hideUnchangedLines: !0,
                          highlightInlineDiff: !0,
                          lineNumbers: !0,
                          inlineDiffOptions: {
                            mode: "word",
                            wordSeparator: " ",
                          },
                        }),
                      ),
                    !_ && (0, _._)("#SteamLearn_Project_Discard_Warning"),
                    !_ &&
                      _.createElement(
                        "div",
                        {
                          className: _.ShowChangesButton,
                          onClick: () => _(!0),
                        },
                        (0, _._)("#SteamLEarn_Project_DiscardShowDiff"),
                      ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Buttons,
                    },
                    _.createElement(_._, {
                      onCancel: () => _.fnClosePopup(),
                      onOK: async () => {
                        _(!0),
                          await _(
                            __webpack_require__.project_id(),
                            __webpack_require__.published_version(),
                          ),
                          _(!1),
                          _.incrementDiscardCounter(),
                          _.fnClosePopup();
                      },
                      bOKDisabled: _,
                    }),
                  ),
                ),
              )
            : null;
        };
      var _;
      !(function (_) {
        (_[(_.Hidden = 0)] = "Hidden"),
          (_[(_.Create = 1)] = "Create"),
          (_[(_.Edit = 2)] = "Edit");
      })(_ || (_ = {}));
      const _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            _ = _(_?.project_id()),
            [_, _] = _.useState(""),
            [_, _] = _.useState(""),
            [_, _] = _.useState(!0),
            [_, _] = _.useState(""),
            _ = (0, _._)(),
            [_, _] = _.data || [void 0, void 0];
          if (
            (_.useEffect(() => {
              _.eState == _.Edit
                ? _ && (_(_.project_name()), _(_.project_description()), _(!0))
                : _.eState == _.Create && (_(""), _(""), _(!1)),
                _("");
            }, [_.eState, _]),
            !_)
          )
            return null;
          let _ = "",
            _ = "",
            _ = "";
          switch (_.eState) {
            case _.Create:
              (_ = (0, _._)("#SteamLearn_Project_Create_Header")),
                (_ = (0, _._)("#SteamLearn_Project_Create_Guidance")),
                (_ = (0, _._)("#SteamLearn_Project_CreateProject"));
              break;
            case _.Edit:
              (_ = (0, _._)("#SteamLearn_Project_Edit_Guidance")),
                (_ = (0, _._)("#SteamLearn_Project_Edit_Accept"));
          }
          return _.createElement(
            _._,
            {
              active: _.eState != _.Hidden,
              onDismiss: () => _.fnSetPopupState(_.Hidden),
              modalClassName: "CreateOrEditProjectPopup",
            },
            _.createElement(_._, null, _),
            _.length > 0 &&
              _.createElement(
                "div",
                {
                  className: _.Guidance,
                },
                _,
              ),
            _.createElement(
              "div",
              {
                className: _.EditSection,
              },
              _.length > 0 &&
                _.createElement(
                  "div",
                  {
                    className: _.ErrorMessage,
                  },
                  _,
                ),
              _.createElement(
                "div",
                {
                  className: _.InputTitle,
                },
                (0, _._)("#SteamLearn_Project_Create_Name"),
              ),
              _.createElement("input", {
                className: _.InputWide,
                type: "text",
                value: _,
                onChange: (_) => {
                  _(_.target.value), _(_.target.value.length > 0);
                },
              }),
              _.createElement(
                "div",
                {
                  className: _.InputTitle,
                },
                (0, _._)("#SteamLearn_Project_Create_Desc"),
              ),
              _.createElement("textarea", {
                className: _.InputAreaWide,
                value: _,
                onChange: (_) => _(_.target.value),
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.ButtonContainer,
              },
              _.createElement(
                _._,
                {
                  disabled: !_,
                  onClick: async () => {
                    if ((_(!1), _.eState == _.Create)) {
                      const [_, _] = await _(_, _);
                      switch (_) {
                        case 1:
                          _.fnSetPopupState(_.Hidden),
                            _.push(_.SteamLearnProjectDataSources(_, 0));
                          break;
                        case 2:
                          _((0, _._)("#SteamLearn_Project_Create_BadName"));
                          break;
                        case 3:
                          _((0, _._)("#SteamLearn_Project_Create_Error"));
                      }
                    } else {
                      _.set_project_name(_), _.set_project_description(_), _(_);
                      const _ = await (async function (_, _) {
                        let _ = _._.Init(_);
                        __webpack_require__.Body().set_project(_),
                          __webpack_require__.Body().set_published_version(_);
                        const _ = await _.EditProject(
                          _.Get().GetServiceTransport(),
                          _,
                        );
                        return (
                          _ &&
                            1 == _.GetEResult() &&
                            (await _(_, 0, _, _(_.project_id())),
                            _._.invalidateQueries({
                              queryKey: [_, _.project_id()],
                            })),
                          _.Body().result()
                        );
                      })(_, _.published_version());
                      switch (_) {
                        case 1:
                          _(""), _(""), _(""), _.fnSetPopupState(_.Hidden);
                          break;
                        case 0:
                        case 4:
                          _((0, _._)("#SteamLearn_Project_Edit_Error"));
                      }
                    }
                    _(!0);
                  },
                },
                _,
              ),
              _.createElement(
                _._,
                {
                  disabled: !1,
                  onClick: () => _.fnSetPopupState(_.Hidden),
                },
                (0, _._)("#SteamLearn_Project_Edit_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const {
              nProjectID: _,
              nPublishedVersion: __webpack_require__,
              msgProjectConfig: _,
              msgWorkingProjectConfig: _,
            } = _(),
            _ = (0, _._)(),
            _ = (0, _._)(),
            [_, _, _] = (0, _._)(),
            [_, _, _] = (0, _._)(),
            [_, _] = _.useState(_.Hidden),
            [_, _] = _.useState(!1);
          let _ = [];
          for (const _ of _.arrMsgProjectConfigInfos)
            _.push({
              label: `${_.project_name()} (${_.project_id()})`,
              value: _.project_id(),
            });
          (_ = _.sort((_, _) => (_.label > _.label ? 1 : -1))),
            _.push({
              label: (0, _._)("#SteamLearn_CreateNew"),
              value: 0,
            });
          const _ =
              _.arrMsgProjectConfigInfos
                .find((_) => _.project_id() == _)
                ?.published_versions() || [],
            _ =
              _.arrMsgProjectConfigInfos
                .find((_) => _.project_id() == _)
                ?.project_description() || "";
          let _ = [
            {
              label: (0, _._)("#SteamLearn_Header_Version_Unpublished"),
              value: 0,
            },
          ];
          for (const _ of _)
            _.push({
              label: (0, _._)("#SteamLearn_Header_Version_PublishedVersion", _),
              value: _,
            });
          const _ =
              _ && _ && _.serializeBase64String() != _.serializeBase64String(),
            _ = () => {
              (0, _._)(
                _.createElement(_._, {
                  strTitle: (0, _._)("#SteamLearn_Project_Publish"),
                  strDescription: (0, _._)(
                    "#SteamLearn_Project_Publish_Warning",
                  ),
                  onOK: async () => {
                    const [__webpack_require__, _] = await (async function (_) {
                      let _ = _._.Init(_);
                      _.Body().set_project_id(_);
                      const _ = await _.PublishProject(
                        _.Get().GetServiceTransport(),
                        _,
                      );
                      return __webpack_require__.BIsValid() &&
                        1 == __webpack_require__.GetEResult()
                        ? (_._.invalidateQueries({
                            queryKey: ["SteamLearnProjectConfigList"],
                          }),
                          [
                            __webpack_require__.Body().result(),
                            __webpack_require__.Body().new_published_version(),
                          ])
                        : [3, 0];
                    })(_);
                    1 == __webpack_require__ &&
                      (console.log("switching to version", _),
                      setTimeout(
                        () => _(_, _, _, _, _.arrMsgProjectConfigInfos),
                        500,
                      ));
                  },
                }),
                window,
              );
            };
          return _.createElement(
            "div",
            {
              className: _.ProjectSelectorInner,
            },
            _.createElement(_, {
              eState: _,
              fnSetPopupState: _,
            }),
            _.createElement(
              "div",
              {
                className: _.ProjectSection,
              },
              _.createElement(
                "div",
                {
                  className: _.ProjectIDAndVersionSection,
                },
                _.createElement(
                  "select",
                  {
                    className: _.ProjectIDInput,
                    value: _,
                    onChange: (_) =>
                      ((_) => {
                        0 != _
                          ? _(_, _, _, -1, _.arrMsgProjectConfigInfos)
                          : _(_.Create);
                      })(parseInt(_.target.value)),
                  },
                  _.map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: _.value,
                        value: _.value,
                      },
                      _.label,
                    ),
                  ),
                ),
                _ &&
                  _.createElement(
                    "select",
                    {
                      className: _.PublishedVersionInput,
                      value: __webpack_require__,
                      onChange: (_) =>
                        _(
                          _,
                          _,
                          _,
                          parseInt(_.target.value),
                          _.arrMsgProjectConfigInfos,
                        ),
                    },
                    _.map((_) =>
                      _.createElement(
                        "option",
                        {
                          key: _.value,
                          value: _.value,
                        },
                        _.label,
                      ),
                    ),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.EditButton,
                    onClick: () => _(_.Edit),
                  },
                  (0, _._)("#SteamLearn_Edit"),
                ),
              ),
              _ &&
                _.createElement(
                  "div",
                  {
                    className: _.Description,
                  },
                  _,
                ),
              _ &&
                _.createElement(
                  "div",
                  {
                    className: _.ProjectID,
                  },
                  (0, _._)("#SteamLearn_ProjectID", _),
                ),
            ),
            _.createElement(
              "div",
              {
                className: _.StatusSection,
              },
              (_ || 0 != __webpack_require__) &&
                _.createElement(
                  _._,
                  {
                    disabled: !_ || _,
                    onClick: (_) =>
                      (async () => {
                        _(!0), await _(_), _(!1);
                      })(),
                  },
                  (0, _._)("#SteamLearn_Project_Save"),
                ),
              !_ &&
                0 == __webpack_require__ &&
                _.createElement(
                  _._,
                  {
                    disabled: _,
                    onClick: (_) => _(),
                  },
                  (0, _._)("#SteamLearn_Project_Publish"),
                ),
              _.createElement(_, {
                bVisible: _,
                fnClosePopup: _,
                incrementDiscardCounter: _.incrementDiscardCounter,
              }),
              _ &&
                _.createElement(
                  _._,
                  {
                    className: _.Warning,
                    disabled: !_,
                    onClick: _,
                  },
                  (0, _._)("#SteamLearn_Project_Discard"),
                ),
              _.createElement(_, {
                bVisible: _,
                fnClosePopup: _,
              }),
              0 == __webpack_require__ &&
                _ &&
                _.length > 0 &&
                !_ &&
                _.createElement(
                  _._,
                  {
                    onClick: _,
                  },
                  (0, _._)("#SteamLearn_Project_CopyPublished"),
                ),
            ),
          );
        };
      function _(_) {
        const _ = (0, _._)(),
          _ = _();
        if (!_(_.pathname)) return null;
        const _ = _.data;
        return _.createElement(
          "div",
          {
            className: _.ProjectSelector,
          },
          !_ &&
            _.createElement(
              "div",
              null,
              (0, _._)("#SteamLearn_LoadingProjects"),
            ),
          _ &&
            _.createElement(_, {
              arrMsgProjectConfigInfos: _,
              incrementDiscardCounter: _.incrementDiscardCounter,
            }),
        );
      }
      const _ = (_) => {
          const _ = Math.max(
            0,
            ..._.msgProject
              .published_configs()
              .map((_) => _.published_version()),
          );
          return _.createElement(
            _._,
            {
              _: _.SteamLearnProjectTrainStatus(_.msgProject.project_id(), _),
              className: (0, _._)(_.ProjectEntry, _.isHidden && _.Hidden),
            },
            _.createElement(
              "div",
              {
                className: _.ProjectName,
              },
              _.msgProject.project_name(),
            ),
            _.createElement(
              "div",
              {
                className: _.ProjectDescription,
              },
              _.msgProject.project_description(),
            ),
            _.createElement(
              "div",
              {
                className: _.ProjectID,
              },
              (0, _._)("#SteamLearn_ProjectID", _.msgProject.project_id()),
            ),
          );
        },
        _ = () => {
          const [_, _] = _.useState(""),
            _ = _(),
            _ = _.data;
          return _.createElement(
            "div",
            {
              className: _.DashboardProjectList,
            },
            _.isLoading &&
              _.createElement(
                "div",
                {
                  className: _.Loading,
                },
                (0, _._)("#SteamLearn_LoadingProjects"),
              ),
            _.isSuccess &&
              _.createElement(
                "div",
                {
                  className: _.ListContainer,
                },
                _.createElement("input", {
                  type: "text",
                  className: _.ListFilter,
                  value: _,
                  onChange: (_) => _(_.target.value),
                  placeholder: (0, _._)("#SteamLearn_FilterProject"),
                }),
                _.map((_) =>
                  _.createElement(_, {
                    key: `Project_${_.project_id()}`,
                    isHidden:
                      _.length > 0 &&
                      !_.project_name().toLowerCase().includes(_.toLowerCase()),
                    msgProject: _,
                  }),
                ),
              ),
          );
        },
        _ = (_) => {
          const _ = _(_.nProjectID, _.nFetchID),
            _ = _(_.nProjectID, _.nTrainID),
            _ = _.data,
            _ = _.data;
          if (
            ((0, _._)(() => {
              if (_)
                switch (_.status()) {
                  case 0:
                  case 1:
                  case 2:
                  case 5:
                  case 6:
                    _(_.nProjectID, _.nFetchID);
                }
              if (_)
                switch (_.status()) {
                  case 0:
                  case 2:
                  case 1:
                  case 6:
                    _(_.nProjectID, _.nTrainID);
                }
            }, 3e4),
            !_ || !_)
          )
            return null;
          let _ = "";
          switch (_.status()) {
            case 2:
              _ = (0, _._)(
                "#SteamLearn_FetchStatus_Percent",
                ((100 * _.total_rows_processed()) / _.total_rows()).toFixed(0),
              );
              break;
            case 5:
              _ = (0, _._)("#SteamLearn_FetchStatus_Metadata");
              break;
            case 6:
              _ = (0, _._)("#SteamLearn_FetchStatus_Cleanup");
              break;
            case 8:
              _ = (0, _._)("#SteamLearn_FetchStatus_Canceled");
          }
          if (0 == _.length)
            switch (_.status()) {
              case 6:
                _ = (0, _._)("#SteamLearn_TrainStatus_WaitingOnASS");
                break;
              case 2:
                _ = (0, _._)(
                  "#SteamLearn_TrainStatus_InProgress",
                  _.epochs().length,
                  _.total_epochs(),
                );
            }
          return _.createElement(
            "div",
            {
              className: _.ProjectStatusInfo,
            },
            _,
          );
        },
        _ = (_) => {
          let _ = {
            month: "long",
            day: "numeric",
            hour: "numeric",
            minute: "numeric",
            hour12: !0,
          };
          const _ = _(_.nProjectID),
            [_, _] = _.data ?? [void 0, void 0],
            _ = _(_.nProjectID, _.nTrainID).data;
          let _ = 0;
          if (_) {
            for (const _ of _.published_configs())
              if (
                _.train_infos().find(
                  (_) =>
                    _.fetch_id() == _.nFetchID && _.train_id() == _.nTrainID,
                )
              ) {
                _ = _.published_version();
                break;
              }
            0 == _ &&
              (_ = Math.max(
                0,
                ..._.published_configs().map((_) => _.published_version()),
              ));
          }
          let _ = "",
            _ = "";
          switch (_.msgEvent.event_type()) {
            case 4:
              (_ = (0, _._)("#SteamLearn_Event_Type_ScheduledTrain")),
                (_ = _.SteamLearnProjectTrain(_.nProjectID, _));
              break;
            case 1:
              (_ = _.SteamLearnProjectTrainStatus(_.nProjectID, _)),
                (_ =
                  0 == _.nEndTime
                    ? (0, _._)("#SteamLearn_Event_Type_TrainStarted_Inprogress")
                    : (0, _._)("#SteamLearn_Event_Type_TrainStarted_Complete"));
          }
          const _ = 1 == _.msgEvent.event_type();
          let _ = "";
          0 != _.nEndTime &&
            (_ = new Date(1e3 * (_.nEndTime - _.msgEvent.timestamp()))
              .toISOString()
              .substring(11, 19));
          const _ = _ && _.active() && _.live();
          return _.createElement(
            _._,
            {
              _: _,
              className: (0, _._)(_.EventEntry, _ && _.IsLive),
            },
            _.createElement(
              "div",
              {
                className: _.Timestamp,
              },
              !_.bProjectSpecific &&
                new Date(1e3 * _.msgEvent.timestamp()).toLocaleString(
                  _._.GetPreferredLocales(),
                  _,
                ),
              _.bProjectSpecific &&
                (0, _._)("#SteamLearn_Event_TrainID", _.nTrainID),
            ),
            _.createElement(
              "div",
              {
                className: _.Project,
              },
              _.createElement(
                "div",
                {
                  className: _.Name,
                },
                _.bProjectSpecific &&
                  new Date(1e3 * _.msgEvent.timestamp()).toLocaleString(
                    _._.GetPreferredLocales(),
                    _,
                  ),
                !_.bProjectSpecific && _ && _.project_name(),
              ),
              !_.bProjectSpecific &&
                _.createElement(
                  "div",
                  {
                    className: _.ProjectID,
                  },
                  _ && (0, _._)("#SteamLearn_ProjectID", _.project_id()),
                ),
            ),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _,
            ),
            _ &&
              _.createElement(
                "div",
                {
                  className: _.Status,
                },
                0 == _.nEndTime &&
                  _.createElement(
                    "div",
                    {
                      className: _.InProgress,
                    },
                    (0, _._)("#SteamLearn_Event_InProgress"),
                  ),
                0 == _.nEndTime &&
                  _.createElement(_, {
                    nProjectID: _.msgEvent.project_id(),
                    nFetchID: _.msgEvent.train_started().fetch_id(),
                    nTrainID: _.msgEvent.train_started().train_id(),
                  }),
                0 != _.nEndTime &&
                  _.createElement(
                    "div",
                    {
                      className: _.Completed,
                    },
                    (0, _._)(
                      "#SteamLearn_Event_Completed",
                      new Date(1e3 * _.nEndTime).toLocaleString(
                        _._.GetPreferredLocales(),
                        {
                          hour: "numeric",
                          minute: "numeric",
                          hour12: !0,
                        },
                      ),
                      _,
                    ),
                  ),
                0 != _.nEndTime &&
                  _.createElement(
                    "div",
                    {
                      className: (0, _._)(
                        _.CompletedDetails,
                        _.bProjectSpecific && _.Gold,
                      ),
                    },
                    (0, _._)(
                      "#SteamLearn_Event_CompletedDetails",
                      _.fLoss.toFixed(4),
                      (100 * _.fAccuracy).toFixed(2),
                    ),
                  ),
              ),
          );
        },
        _ = (_) => {
          if (2 == _.msgEvent.event_type()) return null;
          let _ = 0,
            _ = 0,
            _ = 0;
          switch (_.msgEvent.event_type()) {
            case 1:
              (_ = _.msgEvent.project_id()),
                (_ = _.msgEvent.train_started().fetch_id()),
                (_ = _.msgEvent.train_started().train_id());
              break;
            case 4:
              if (_.msgEvent.timestamp() < Date.now() / 1e3) return null;
              _ = _.msgEvent.project_id();
          }
          if (0 == _) return null;
          if (1 == _.msgEvent.event_type())
            for (const _ of _.arrMsgAllEvents)
              if (
                !(__webpack_require__.timestamp() <= _.msgEvent.timestamp())
              ) {
                if (
                  1 == __webpack_require__.event_type() &&
                  __webpack_require__.project_id() == _
                )
                  return null;
                if (
                  2 == __webpack_require__.event_type() &&
                  __webpack_require__.project_id() == _
                )
                  break;
              }
          let _ = 0,
            _ = 0,
            _ = 0;
          if (0 != _ && 0 != _ && 0 != _) {
            let _,
              _ = !1;
            for (const _ of _.arrMsgAllEvents)
              if (
                (_ == _.msgEvent && (_ = !0),
                _ &&
                  2 == _.event_type() &&
                  _.project_id() == _ &&
                  _.train_ended().fetch_id() == _ &&
                  _.train_ended().train_id() == _)
              ) {
                _ = _;
                break;
              }
            _ &&
              ((_ = _.train_ended().loss()),
              (_ = _.train_ended().accuracy()),
              (_ = _.timestamp()));
          }
          return _.createElement(_, {
            msgEvent: _.msgEvent,
            nProjectID: _,
            nFetchID: _,
            nTrainID: _,
            fLoss: _,
            fAccuracy: _,
            nEndTime: _,
            bProjectSpecific: _.bProjectSpecific,
          });
        };
      const _ = () => {
          const [_, _] = _.useState(0),
            _ = new Date();
          __webpack_require__.setDate(__webpack_require__.getDate() + 7 * _);
          const [_, _] = (function (_, _) {
              const _ = _.getDay(),
                _ = _ >= _ ? _ - _ : 6 - _,
                _ = new Date(_),
                _ = new Date(_);
              return (
                _.setDate(_.getDate() - _),
                _.setDate(_.getDate() - _ + 7),
                _.setHours(0, 0, 0, 0),
                _.setHours(0, 0, 0, 0),
                [Math.floor(_.getTime() / 1e3), Math.floor(_.getTime() / 1e3)]
              );
            })(_, 0),
            _ = _(_, _, 0, 0);
          let _ = {
            month: "long",
            day: "numeric",
          };
          const _ = _.data;
          return _.createElement(
            "div",
            {
              className: _.DashboardEventList,
            },
            _.createElement(
              "div",
              {
                className: _.EventsListContainer,
              },
              _.createElement(
                "div",
                {
                  className: _.WeekSelector,
                },
                _.createElement(
                  "div",
                  {
                    className: _.LeftArrow,
                    onClick: () => _(_ - 1),
                  },
                  "<",
                ),
                _.createElement(
                  "div",
                  {
                    className: _.DateRange,
                  },
                  new Date(1e3 * _).toLocaleString(
                    _._.GetPreferredLocales(),
                    _,
                  ),
                  " - ",
                  new Date(1e3 * _).toLocaleString(
                    _._.GetPreferredLocales(),
                    _,
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.RightArrow,
                    onClick: () => _(_ + 1),
                  },
                  ">",
                ),
              ),
              _.isLoading &&
                _.createElement(
                  "div",
                  {
                    className: _.Loading,
                  },
                  (0, _._)("#SteamLearn_LoadingEvents"),
                ),
              _.isSuccess &&
                _.createElement(
                  "div",
                  {
                    className: _.EventList,
                  },
                  _.event_list().map((_, _) =>
                    _.createElement(_, {
                      key: `Event_${_}`,
                      msgEvent: _,
                      arrMsgAllEvents: _.event_list(),
                    }),
                  ),
                ),
            ),
          );
        },
        _ = () => {
          const [_, _] = _.useState(_.Hidden);
          return _.createElement(
            "div",
            {
              className: _.DashboardPage,
            },
            _.createElement(_, {
              eState: _,
              fnSetPopupState: _,
            }),
            _.createElement(
              "div",
              {
                className: _.ProjectListContainer,
              },
              _.createElement(
                "div",
                {
                  className: _.DashboardHeader,
                },
                (0, _._)("#SteamLearn_ProjectList"),
              ),
              _.createElement("div", {
                className: _.DashboardUnderline,
              }),
              _.createElement(_, null),
              _.createElement(
                _._,
                {
                  onClick: () => _(_.Create),
                },
                (0, _._)("#SteamLearn_CreateNew"),
              ),
              _.createElement(
                _._,
                {
                  _: _.SteamLearnDataSources(),
                },
                _.createElement(
                  _._,
                  null,
                  (0, _._)("#SteamLearn_GoToDataSources"),
                ),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.EventsContainer,
              },
              _.createElement(
                "div",
                {
                  className: _.DashboardHeader,
                },
                (0, _._)("#SteamLearn_Project_Events"),
              ),
              _.createElement("div", {
                className: _.DashboardUnderline,
              }),
              _.createElement(_, null),
            ),
          );
        };
      var _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid");
      const _ = () => {
          const [_, _] = _.useState(""),
            [__webpack_require__, _] = _.useState(""),
            [_, _] = _.useState(!1);
          return _.createElement(
            "div",
            {
              className: _.ProjectCreatePage,
            },
            _.createElement(
              "div",
              {
                className: _.GuideText,
              },
              (0, _._)("#SteamLearn_Project_Create_Guidance"),
            ),
            _.createElement(
              "div",
              {
                className: _.EditSection,
              },
              _.createElement(
                "div",
                {
                  className: _.InputTitle,
                },
                (0, _._)("#SteamLearn_Project_Create_Name"),
              ),
              _.createElement("input", {
                className: _.InputWide,
                type: "text",
                value: _,
                onChange: (_) => {
                  _(_.target.value), _(_.target.value.length > 0);
                },
              }),
              _.createElement(
                "div",
                {
                  className: _.InputTitle,
                },
                (0, _._)("#SteamLearn_Project_Create_Desc"),
              ),
              _.createElement("textarea", {
                className: _.InputAreaWide,
                value: __webpack_require__,
                onChange: (_) => _(_.target.value),
              }),
            ),
            _.createElement(
              _._,
              {
                disabled: !_,
                onClick: async () => {
                  _(!1);
                  const [_, _] = await _(_, __webpack_require__);
                  switch (_) {
                    case 1: {
                      const _ =
                        _._.PARTNER_BASE_URL +
                        _.SteamLearnBase() +
                        _.SteamLearnProjectDataSources(_, 0);
                      (0, _._)(
                        _.createElement(_, {
                          strResult: "Success!",
                          strRedirect: _,
                        }),
                        window,
                      );
                      break;
                    }
                    case 2:
                      (0, _._)(
                        _.createElement(_, {
                          strResult: "Bad Name!",
                        }),
                        window,
                      );
                      break;
                    case 3:
                      (0, _._)(
                        _.createElement(_, {
                          strResult: "Nope!",
                        }),
                        window,
                      );
                  }
                  _(!0);
                },
              },
              (0, _._)("#SteamLearn_Project_CreateProject"),
            ),
          );
        },
        _ = (_) => {
          (0, _._)();
          const _ = () => {
              _.strRedirect &&
                (console.log(`Pushing ${_.strRedirect}`),
                (window.location.href = _.strRedirect)),
                _.closeModal();
            },
            _ = _.useId();
          return _.createElement(
            _._,
            {
              "aria-labelledby": _,
              className: _.CreateProjectResultDialog,
              onCancel: _,
              closeModal: _,
            },
            _.createElement(
              "div",
              {
                _: _,
                className: _.CreateProjectResultDialogContents,
              },
              _.strResult,
              _.createElement(
                _._,
                {
                  onClick: _,
                },
                (0, _._)("#Button_OK"),
              ),
            ),
          );
        };
      var _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid");
      !(function (_, _) {
        let _;
      })(_, 200);
      const _ = () => {
          const { msgWorkingProjectConfig: _, nPublishedVersion: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _(),
            _ = 0 == _,
            _ = (_) => {
              _(_, _), _(_);
            },
            _ = (_) => {
              if (_.isSuccess) {
                const _ = _.data;
                let _ = "",
                  _ = 0,
                  _ = 0;
                for (const _ of _)
                  if (_._() == _) {
                    (_ = _.name()), (_ = _.version()), (_ = _);
                    break;
                  }
                if (_.length > 0)
                  for (const _ of _)
                    _.name() == _ &&
                      _.version() > _ &&
                      ((_ = _.version()), (_ = _._()));
                _ != _ &&
                  (_(_, _),
                  (function (_, _, _) {
                    for (let _ of _.data_source_element_usages())
                      for (let _ of _.data_source_element_usages())
                        _.data_source_id() == _ &&
                          _.data_source_id() == _ &&
                          _.data_element_path() == _.data_element_path() &&
                          (_.set_input(_.input()),
                          _.set_preprocessing_type(_.preprocessing_type()),
                          _.set_min_range(_.min_range()),
                          _.set_max_range(_.max_range()),
                          _.set_std_dev(_.std_dev()),
                          _.set_compact_table(_.compact_table()),
                          _.set_compact_table_count(_.compact_table_count()),
                          _.set_sequence_table(_.sequence_table()),
                          _.set_sequence_table_count(_.sequence_table_count()));
                  })(_, _, _),
                  _(_, _),
                  _(_));
              }
            };
          let _,
            _ = !1;
          if (_.isSuccess)
            for (const _ of _.data)
              _.data_source_ids().includes(_._()) &&
                _.key_type() != _ &&
                (void 0 !== _ ? (_ = !0) : (_ = _.key_type()));
          return _.createElement(
            "div",
            {
              className: _.ProjectDataSourcesPage,
            },
            _.createElement(
              "div",
              {
                className: _.OptionBlock,
              },
              _.createElement(
                "div",
                {
                  className: _.OptionHeader,
                },
                (0, _._)("#SteamLearn_Config_DataSources"),
              ),
              _.createElement(
                "div",
                {
                  className: _.OptionDesc,
                },
                (0, _._)("#SteamLearn_Config_DataSourcesDesc"),
              ),
              _.createElement(
                "div",
                {
                  className: _.DataSourceList,
                },
                0 == _.data_source_ids().length &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDetails,
                    },
                    (0, _._)("#SteamLearn_Config_DataSources_None"),
                  ),
                _.data_source_ids().map((_) =>
                  _.createElement(_, {
                    key: _,
                    nDataSourceID: _,
                    fnRemoveDataSource: _ ? _ : void 0,
                    fnUpdateDataSource: _ ? _ : void 0,
                  }),
                ),
                _.createElement(_, {
                  bShowPopup: __webpack_require__,
                  fnSetShowPopup: _,
                  fnAddSelectedDataSources: (_) => {
                    for (const _ of _) _(_, _);
                    _(_);
                  },
                  arrAlreadyAddedDataSourceIDs: _.data_source_ids(),
                }),
                0 == _.published_version() &&
                  _.createElement(
                    _._,
                    {
                      onClick: () => _(!0),
                    },
                    (0, _._)("#SteamLearn_Config_DataSources_Add"),
                  ),
                _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.Warning,
                    },
                    (0, _._)("#SteamLearn_DataSourceTypeMismatch"),
                  ),
              ),
            ),
            _.createElement("div", {
              className: _.Separator,
            }),
            _.createElement(
              "div",
              {
                className: _.OptionBlock,
              },
              _.createElement(
                "div",
                {
                  className: _.OptionHeader,
                },
                (0, _._)("#SteamLearn_Config_DataSource_Inputs"),
              ),
              _.createElement(
                "div",
                {
                  className: _.OptionDesc,
                },
                (0, _._)("#SteamLearn_Config_DataSource_InputsDesc"),
              ),
              _.createElement(_, null),
            ),
          );
        },
        _ = () => {
          const { msgWorkingProjectConfig: _ } = _();
          let _ = [];
          for (const _ of _.data_source_element_usages())
            _.includes(__webpack_require__.data_source_id()) ||
              _.push(__webpack_require__.data_source_id());
          return _.createElement(
            "div",
            {
              className: _.ProjectConfigDataSourceDataElementRoutingList,
            },
            _.map((_) =>
              _.createElement(_, {
                key: _,
                nDataSourceID: _,
              }),
            ),
          );
        },
        _ = (_) => {
          const [_, __webpack_require__] = _.useState([]),
            _ = _(_.nDataSourceID),
            { msgWorkingProjectConfig: _ } = _();
          if (!_.isSuccess) return null;
          const _ = (_) => {
              __webpack_require__([..._, _]);
            },
            _ = (_) => {
              __webpack_require__([..._.filter((_) => _ != _)]);
            },
            _ = _.data;
          let _ = new Map();
          for (const _ of _.data_source_element_usages()) {
            if (__webpack_require__.data_source_id() != _.nDataSourceID)
              continue;
            const _ = __webpack_require__.data_element_path().split("/"),
              _ = _.map((_) => _.split("#")[0]),
              _ = _.map((_) => parseInt(_.split("#")[1]));
            let _ = "",
              _ = "";
            for (let _ = 0; _ < _.length; _++) {
              (_ = `${_}${0 != _ ? "/" : ""}${_[_]}`),
                (_ = `${_}${0 != _ ? "/" : ""}${_[_]}#${_[_]}`);
              const _ = _ < _.length - 1,
                _ = _.includes(_);
              _ && (_ += `#${_[_]}`);
              let _ = _.get(_);
              null == _
                ? _.set(_, {
                    strName: _,
                    nCount: _ ? 1 : _[_] + 1,
                    bHasChildren: _,
                    bArrayExpanded: _,
                    nIndex: _ ? _[_] + 1 : void 0,
                    nDataSourceID: _.nDataSourceID,
                    arrDataElementUsagePathNames: _
                      ? [_]
                      : [__webpack_require__.data_element_path()],
                  })
                : _.bArrayExpanded ||
                  ((_.nCount = Math.max(_.nCount, _[_] + 1)),
                  (_.bHasChildren = _),
                  _ ||
                    _.arrDataElementUsagePathNames.includes(
                      __webpack_require__.data_element_path(),
                    ) ||
                    _.arrDataElementUsagePathNames.push(
                      __webpack_require__.data_element_path(),
                    ));
            }
          }
          const _ = Array.from(_.values()).sort((_, _) => {
            const _ = _.strName.split("/"),
              _ = _.strName.split("/"),
              _ = Math.min(_.length, _.length);
            for (let _ = 0; _ < _; _++) {
              const _ = _[_].split("#"),
                _ = _[_].split("#"),
                _ = _.length > 1 ? parseInt(_[1]) : 0,
                _ = _.length > 1 ? parseInt(_[1]) : 0;
              if (_[0] == _[0]) {
                if (_ == _) continue;
                if (_ < _) return -1;
                if (_ > _) return 1;
              }
              return _[_] < _[_] ? -1 : 1;
            }
            return _.length < _.length ? -1 : 1;
          });
          return _.createElement(
            "div",
            {
              className: _.ProjectConfigDataSourceElementRoutingWrapper,
            },
            _.createElement(
              "div",
              {
                className: _.DataSourceName,
              },
              _.name(),
            ),
            _.map((_, _) => {
              const _ = _.strName.split("/"),
                _ = 20 * _.length,
                _ = _[_.length - 1];
              return _.createElement(_, {
                key: `Routing_${_._()}_${_}`,
                strRenderName: _,
                nIndentSize: _,
                rgSettings: _,
                fnExpandPath: _,
                fnCollapsePath: _,
              });
            }),
          );
        },
        _ = (_) => {
          const {
              msgWorkingProjectConfig: _,
              nPublishedVersion: __webpack_require__,
            } = _(),
            _ = _(
              _.rgSettings.nDataSourceID,
              _.rgSettings.arrDataElementUsagePathNames[0],
            ),
            _ = [
              ...new Set(
                _.data_source_element_usages().map((_) => _.input()),
              ).values(),
            ],
            _ = Math.max(..._);
          let _ = (0, _._)(1, _),
            _ = _.filter((_) => !_.includes(_));
          0 == _.length && _.push(_ + 1);
          let _ = _.data_source_element_usages().find(
            (_) =>
              _.data_element_path() ==
                _.rgSettings.arrDataElementUsagePathNames[0] &&
              _.data_source_id() == _.rgSettings.nDataSourceID,
          );
          const [_, _] = _.useState(_?.input()),
            [_, _] = _.useState(_?.preprocessing_type()),
            [_, _] = _.useState(_?.min_range().toFixed(2)),
            [_, _] = _.useState(!0),
            [_, _] = _.useState(_?.max_range().toFixed(2)),
            [_, _] = _.useState(!0),
            [_, _] = _.useState(_?.std_dev().toFixed(2)),
            [_, _] = _.useState(!0),
            [_, _] = _.useState(_?.compact_table()),
            [_, _] = _.useState(_?.compact_table_count()?.toFixed(0) || "0"),
            [_, _] = _.useState(!0),
            [_, _] = _.useState(_?.sequence_table()),
            [_, _] = _.useState(_?.sort_sequence() || !1),
            [_, _] = _.useState(_?.sequence_min_length()?.toFixed(0) || "0"),
            [_, _] = _.useState(!0),
            [_, _] = _.useState(
              _?.sequence_prefix_frequency()?.toFixed(0) || "0",
            ),
            [_, _] = _.useState(!0),
            [_, _] = _.useState(_?.sequence_table_count()?.toFixed(0) || "0"),
            [_, _] = _.useState(!0),
            [_, _] = _.useState(_?.table_full_sample() || !1),
            [_, _] = _.useState(_?.other_project_id() > 0),
            [_, _] = _.useState(_?.other_project_id()?.toString() || "0"),
            [_, _] = _.useState(_?.other_fetch_id()?.toString() || "0");
          function _(_, _, _) {
            return _ !== _ && (__webpack_require__(_), !0);
          }
          _.useEffect(() => {
            let _ = !1;
            _.rgSettings.arrDataElementUsagePathNames.forEach((_) => {
              let _ = _.data_source_element_usages().find(
                (_) =>
                  _.data_element_path() == _ &&
                  _.data_source_id() == _.rgSettings.nDataSourceID,
              );
              _ &&
                ((_ = _(_, _.input(), _.set_input.bind(_)) || _),
                (_ =
                  _(_, _.preprocessing_type(), () =>
                    _.set_preprocessing_type(_),
                  ) || _),
                (_ =
                  _(_, _.min_range().toFixed(2), () =>
                    _.set_min_range(parseFloat(_)),
                  ) || _),
                (_ =
                  _(_, _.max_range().toFixed(2), () =>
                    _.set_max_range(parseFloat(_)),
                  ) || _),
                (_ =
                  _(_, _.std_dev().toFixed(2), () =>
                    _.set_std_dev(parseFloat(_)),
                  ) || _),
                (_ =
                  _(_, _.compact_table(), () => _.set_compact_table(_)) || _),
                (_ =
                  _(_, _.compact_table_count()?.toString() || "0", () =>
                    _.set_compact_table_count(parseInt(_)),
                  ) || _),
                (_ =
                  _(_, _.sequence_table(), () => _.set_sequence_table(_)) || _),
                (_ =
                  _(_, _.sort_sequence(), () => _.set_sort_sequence(_)) || _),
                (_ =
                  _(_, _.sequence_min_length()?.toString() || "0", () =>
                    _.set_sequence_min_length(parseInt(_)),
                  ) || _),
                (_ =
                  _(_, _.sequence_prefix_frequency()?.toString() || "0", () =>
                    _.set_sequence_prefix_frequency(parseInt(_)),
                  ) || _),
                (_ =
                  _(_, _.sequence_table_count()?.toString() || "0", () =>
                    _.set_sequence_table_count(parseInt(_)),
                  ) || _),
                (_ =
                  _(_, _.table_full_sample(), () =>
                    _.set_table_full_sample(_),
                  ) || _),
                (_ =
                  _(_, _.other_project_id()?.toString() || "0", () =>
                    _.set_other_project_id(parseInt(_)),
                  ) || _),
                (_ =
                  _(_, _.other_fetch_id()?.toString() || "0", () =>
                    _.set_other_fetch_id(parseInt(_)),
                  ) || _));
            }),
              _ && _(_);
          }, [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]);
          const _ = 0 == __webpack_require__,
            _ = (_, _, _) => {
              _(_),
                /^-?[\d]*\.?[\d]{0,2}$/.test(_)
                  ? __webpack_require__(!0)
                  : __webpack_require__(!1);
            },
            _ = 2 == _.data_type(),
            _ = 3 == _.data_type(),
            _ = 1 == _.data_type(),
            _ = 4 == _.data_type(),
            _ = 5 == _.data_type();
          let _ = "";
          switch (_.data_type()) {
            case 1:
              _ = (0, _._)("#SteamLearn_DataSource_Type_Int", "");
              break;
            case 2:
              _ = (0, _._)("#SteamLearn_DataSource_Type_Float", "");
              break;
            case 3:
              _ = (0, _._)("#SteamLearn_DataSource_Type_Bool", "");
              break;
            case 4:
              _ = (0, _._)("#SteamLearn_DataSource_Type_String", "");
              break;
            case 5:
              _ = (0, _._)("#SteamLearn_DataSource_Type_Object", "");
          }
          let _ = "";
          if (_)
            switch (_.preprocessing_type()) {
              case 0:
                _ = (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_None_Desc",
                );
                break;
              case 1:
                _ = (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_CompactTable_Desc",
                );
                break;
              case 6:
                _ = (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_SequenceTable_Desc",
                );
                break;
              case 2:
                _ = (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_NormAuto_Desc",
                );
                break;
              case 3:
                _ = (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_NormRange_Desc",
                );
                break;
              case 4:
                _ = (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_NormStdDev_Desc",
                );
                break;
              case 5:
                _ = (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_NormLogRange_Desc",
                );
            }
          let _ = [
            {
              label: (0, _._)("#SteamLearn_Config_DataSource_Input_Exclude"),
              value: 0,
            },
          ];
          for (const _ of _)
            _.push({
              label: (0, _._)("#SteamLearn_Config_DataSource_Input_Number", _),
              value: _,
            });
          const _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_None",
                ),
                value: 0,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_CompactTable",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_SequenceTable",
                ),
                value: 6,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_NormAuto",
                ),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_NormRange",
                ),
                value: 3,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_NormStdDev",
                ),
                value: 4,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_DataSource_Input_Preprocess_NormLogRange",
                ),
                value: 5,
              },
            ],
            _ = 3 == _?.preprocessing_type() || 5 == _?.preprocessing_type(),
            _ = 4 == _?.preprocessing_type(),
            _ = 1 == _?.preprocessing_type(),
            _ = 6 == _?.preprocessing_type();
          return _.createElement(
            "div",
            {
              className: _.ProjectConfigDataSourceElementRouting,
            },
            _.createElement(
              "div",
              {
                className: _.LeftSection,
                style: {
                  paddingLeft: _.nIndentSize,
                },
              },
              _.createElement(
                "div",
                {
                  className: _.Name,
                },
                _.strRenderName,
                _.rgSettings.nCount > 1 &&
                  _.rgSettings.bArrayExpanded &&
                  _.createElement(
                    "div",
                    {
                      className: _.Array,
                    },
                    `[${_.rgSettings.nCount}]`,
                  ),
              ),
              _.createElement(
                "div",
                {
                  className: _.TypeAndExpandCollapse,
                },
                _.createElement(
                  "div",
                  {
                    className: (0, _._)(
                      _.Type,
                      _.DataSourceType,
                      _ && _.Float,
                      _ && _.Bool,
                      _ && _.Int,
                      _ && _.String,
                      _ && _.Object,
                    ),
                  },
                  _,
                  _.rgSettings.nCount > 1 &&
                    !_.rgSettings.bArrayExpanded &&
                    _.createElement(
                      "div",
                      {
                        className: _.Array,
                      },
                      `[${_.rgSettings.nCount}]`,
                    ),
                ),
                _.rgSettings.nCount > 1 &&
                  !_.rgSettings.bArrayExpanded &&
                  _.createElement(
                    "div",
                    {
                      className: _.Explode,
                      title: (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_ExplodeDesc",
                      ),
                      onClick: () => _.fnExpandPath(_.rgSettings.strName),
                    },
                    (0, _._)("#SteamLearn_Config_DataSource_Input_Explode"),
                  ),
                _.rgSettings.bArrayExpanded &&
                  _.createElement(
                    "div",
                    {
                      className: _.Collapse,
                      title: (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_CollapseDesc",
                      ),
                      onClick: () =>
                        _.fnCollapsePath(_.rgSettings.strName.split("#")[0]),
                    },
                    (0, _._)("#SteamLearn_Config_DataSource_Input_Collapse"),
                  ),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.InputSection,
              },
              _ &&
                _.createElement(
                  "select",
                  {
                    className: _.InputSelect,
                    disabled: !_,
                    value: _,
                    onChange: (_) => _(parseInt(_.target.value)),
                  },
                  _.map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: _.value,
                        value: _.value,
                      },
                      _.label,
                    ),
                  ),
                ),
            ),
            _.createElement(
              "div",
              {
                className: _.NormalizeSection,
              },
              _.createElement(
                "div",
                {
                  className: _.PreprocessingType,
                },
                _ &&
                  0 != _.input() &&
                  _.createElement(
                    _.Fragment,
                    null,
                    _.createElement(
                      "select",
                      {
                        className: _.InputSelect,
                        disabled: !1,
                        value: _,
                        onChange: (_) => _(parseInt(_.target.value)),
                      },
                      _.map((_) =>
                        _.createElement(
                          "option",
                          {
                            key: _.value,
                            value: _.value,
                          },
                          _.label,
                        ),
                      ),
                    ),
                    _.createElement("div", {
                      className: (0, _._)(_.IconSmall, "icon_help"),
                      title: _,
                    }),
                  ),
              ),
              _.createElement(
                "div",
                {
                  className: _.PreprocessingDetails,
                },
                _ &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_MinRange",
                      ),
                    ),
                    _.createElement("input", {
                      type: "text",
                      className: (0, _._)(_.ValueInput, !_ && _.Invalid),
                      disabled: !1,
                      value: _,
                      onChange: (_) => _(_.target.value, _, _),
                    }),
                  ),
                _ &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_MaxRange",
                      ),
                    ),
                    _.createElement("input", {
                      type: "text",
                      className: (0, _._)(_.ValueInput, !_ && _.Invalid),
                      disabled: !1,
                      value: _,
                      onChange: (_) => _(_.target.value, _, _),
                    }),
                  ),
                _ &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_StdDev",
                      ),
                    ),
                    _.createElement("input", {
                      type: "text",
                      className: (0, _._)(_.ValueInput, !_ && _.Invalid),
                      disabled: !1,
                      value: _,
                      onChange: (_) => _(_.target.value, _, _),
                    }),
                  ),
                _ &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_SequenceTableName",
                      ),
                    ),
                    _.createElement("input", {
                      type: "text",
                      className: _.ValueInput,
                      disabled: !1,
                      value: _,
                      onChange: (_) => _(_.target.value),
                    }),
                  ),
                _ &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_TableCount",
                      ),
                    ),
                    _.createElement("input", {
                      type: "text",
                      className: (0, _._)(_.ValueInput, !_ && _.Invalid),
                      disabled: !1,
                      value: _,
                      onChange: (_) => _(_.target.value, _, _),
                    }),
                  ),
                _ &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_SequenceMinLength",
                      ),
                    ),
                    _.createElement("input", {
                      type: "text",
                      className: (0, _._)(_.ValueInput, !_ && _.Invalid),
                      disabled: !1,
                      value: _,
                      onChange: (_) => _(_.target.value, _, _),
                    }),
                  ),
                _ &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "label",
                      {
                        htmlFor: "editsort",
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_SequenceSort",
                      ),
                    ),
                    _.createElement("input", {
                      type: "checkbox",
                      _: "editsort",
                      checked: _,
                      onChange: () => _(!_),
                    }),
                  ),
                _ &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_SequencePrefixRemoveThreshold",
                      ),
                    ),
                    _.createElement("input", {
                      type: "text",
                      className: (0, _._)(_.ValueInput, !_ && _.Invalid),
                      disabled: !1,
                      value: _,
                      onChange: (_) => _(_.target.value, _, _),
                    }),
                  ),
                (_ || _) &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_CompactTableName",
                      ),
                    ),
                    _.createElement("input", {
                      type: "text",
                      className: _.ValueInput,
                      disabled: !1,
                      value: _,
                      onChange: (_) => _(_.target.value),
                    }),
                  ),
                (_ || _) &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_TablePercentile",
                      ),
                    ),
                    _.createElement("input", {
                      type: "text",
                      className: (0, _._)(_.ValueInput, !_ && _.Invalid),
                      disabled: !1,
                      value: _,
                      onChange: (_) => _(_.target.value, _, _),
                    }),
                  ),
                (_ || _) &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "label",
                      {
                        htmlFor: "editsort",
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_TableFullSample",
                      ),
                    ),
                    _.createElement("input", {
                      type: "checkbox",
                      _: "editsort",
                      checked: _,
                      onChange: () => _(!_),
                    }),
                  ),
                _ &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "label",
                      {
                        htmlFor: "usesotherproject",
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_UsesOtherProject",
                      ),
                    ),
                    _.createElement("input", {
                      type: "checkbox",
                      _: "usesotherproject",
                      checked: _,
                      onChange: () => {
                        console.log("changed"), _(!_), _ && (_("0"), _("0"));
                      },
                    }),
                  ),
                _ &&
                  _ &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_OtherProjectID",
                      ),
                    ),
                    _.createElement("input", {
                      type: "text",
                      className: _.ValueInput,
                      disabled: !1,
                      value: _,
                      onChange: (_) => _(_.target.value),
                    }),
                  ),
                _ &&
                  _ &&
                  0 != _.input() &&
                  _.createElement(
                    "div",
                    {
                      className: _.PreprocessingOptions,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_DataSource_Input_Preprocess_OtherFetchID",
                      ),
                    ),
                    _.createElement("input", {
                      type: "text",
                      className: _.ValueInput,
                      disabled: !1,
                      value: _,
                      onChange: (_) => _(_.target.value),
                    }),
                  ),
              ),
            ),
          );
        },
        _ = (_) => {
          const _ = _(_.nDataSourceID),
            _ = _();
          if (!_.isSuccess || !_.isSuccess) return null;
          const _ = _.data;
          let _ = !1;
          for (const _ of _.data)
            if (_.name() == _.name() && _.version() < _.version()) {
              _ = !0;
              break;
            }
          return _.createElement(
            "div",
            {
              className: (0, _._)(
                _.ProjectConfigDataSourceElement,
                _ && _.IsOldDataSourceVersion,
              ),
            },
            _.createElement(
              "div",
              {
                className: _.NameAndID,
              },
              _.createElement(
                "div",
                {
                  className: _.Name,
                },
                _.name(),
              ),
              _.createElement(
                "div",
                {
                  className: _._,
                },
                `(ID ${_._()})`,
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.Description,
              },
              _.source_description(),
            ),
            _.createElement(
              "div",
              {
                className: _.Version,
              },
              "v",
              _.version(),
            ),
            _.fnRemoveDataSource &&
              _.createElement(
                "div",
                {
                  className: _.Remove,
                  onClick: () => _.fnRemoveDataSource(_.nDataSourceID),
                },
                (0, _._)("#SteamLearn_Config_DataSources_Remove"),
              ),
            _.fnUpdateDataSource &&
              _ &&
              _.createElement(
                "div",
                {
                  className: _.Update,
                  onClick: () => _.fnUpdateDataSource(_.nDataSourceID),
                },
                (0, _._)("#SteamLearn_Config_DataSources_Update"),
              ),
          );
        },
        _ = (_) => {
          const [_, __webpack_require__] = _.useState([]);
          _.useEffect(() => {
            _.bShowPopup || __webpack_require__([]);
          }, [_.bShowPopup]);
          const _ = _();
          if (_.isError) return _.fnSetShowPopup(!1), null;
          if (!_.isSuccess) return null;
          const _ = _.data;
          let _ = 0,
            _ = new Map();
          for (const _ of _)
            0 == _ &&
              _.arrAlreadyAddedDataSourceIDs.includes(_._()) &&
              (_ = _.key_type()),
              (!_.has(_.name()) || _.get(_.name()).version() < _.version()) &&
                _.set(_.name(), _);
          const _ = Array.from(_.values()).sort((_, _) =>
              _.name() < _.name() ? -1 : 1,
            ),
            _ = (_) => {
              _.fnAddSelectedDataSources(_ ?? _), _.fnSetShowPopup(!1);
            };
          let _ = "";
          return (
            (_ =
              0 == _.length
                ? (0, _._)("#SteamLearn_Config_DataSourcesDialog_Add")
                : 1 == _.length
                  ? (0, _._)("#SteamLearn_Config_DataSourcesDialog_Add_1")
                  : (0, _._)(
                      "#SteamLearn_Config_DataSourcesDialog_Add_Multiple",
                      _.length,
                    )),
            _.createElement(
              _._,
              {
                className: _.AddDataSourceDialog,
                active: _.bShowPopup,
                onDismiss: () => _.fnSetShowPopup(!1),
              },
              _.createElement(
                "div",
                {
                  className: _.AddDataSourceDialogContents,
                },
                _.createElement(
                  "div",
                  {
                    className: _.Header,
                  },
                  (0, _._)("#SteamLearn_Config_DataSources_Add_Header"),
                  0 != _ &&
                    _.createElement(
                      "div",
                      {
                        className: _.TypeLimit,
                      },
                      " ",
                      (0, _._)("#SteamLearn_Config_TypeLimit", _(_)),
                    ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.DataSourceListContainer,
                  },
                  _.map((_) => {
                    if (_.arrAlreadyAddedDataSourceIDs.includes(_._()))
                      return null;
                    const _ = 0 != _ && _ != _.key_type(),
                      _ = _
                        ? void 0
                        : () =>
                            ((_) => {
                              const _ = _.indexOf(_);
                              __webpack_require__(
                                -1 == _
                                  ? [..._, _]
                                  : [
                                      ..._.slice(void 0, _),
                                      ..._.slice(_ + 1, void 0),
                                    ],
                              );
                            })(_._()),
                      _ = _ ? void 0 : () => _([_._()]);
                    return _.createElement(
                      "div",
                      {
                        key: _._(),
                        className: (0, _._)(
                          _.DataSourceOption,
                          _.includes(_._()) && _.Selected,
                          _ && _.Disabled,
                        ),
                        onClick: _,
                        onDoubleClick: _,
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.TitleRow,
                        },
                        _.createElement(
                          "div",
                          {
                            className: _.Name,
                          },
                          _.name(),
                        ),
                        _.createElement(
                          "div",
                          {
                            className: _.Type,
                          },
                          _(_.key_type()),
                        ),
                        _.createElement(
                          "div",
                          {
                            className: _.Version,
                          },
                          "v",
                          _.version(),
                        ),
                      ),
                      _.createElement(
                        "div",
                        {
                          className: _.Description,
                        },
                        _.source_description(),
                      ),
                    );
                  }),
                ),
                _.createElement(
                  _._,
                  {
                    disabled: 0 == _.length,
                    onClick: () => _(),
                  },
                  _,
                ),
              ),
            )
          );
        };
      function _(_) {
        return (0, _._)(
          "#" + ("unknown ESteamLearnDataSourceKeyType ( " + _ + " )"),
        );
      }
      const _ = () => {
          const _ = _(),
            [_, __webpack_require__] = _.useState(0),
            _ = _.data;
          if (!_) return null;
          let _ = new Map();
          for (const _ of _)
            (!_.has(_.name()) || _.get(_.name()).version() < _.version()) &&
              _.set(_.name(), _);
          const _ = Array.from(_.values()).sort((_, _) =>
            _.name() < _.name() ? -1 : 1,
          );
          return _.createElement(
            "div",
            {
              className: _.DataSourcesPage,
            },
            _.createElement(
              "div",
              {
                className: _.DataSourceList,
              },
              _.map((_) =>
                _.createElement(
                  "div",
                  {
                    className: (0, _._)(
                      _.DataSourceOption,
                      _ == _._() && _.Selected,
                    ),
                    key: _._(),
                    onClick: () => __webpack_require__(_._()),
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Name,
                    },
                    _.name(),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.KeyType,
                    },
                    (0, _._)(
                      "#SteamLearn_Overview_DataSources_KeyType",
                      _(_.key_type()),
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Description,
                    },
                    _.source_description(),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Version,
                    },
                    `v${_.version()}`,
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _._,
                    },
                    _._(),
                  ),
                ),
              ),
            ),
            _.createElement(_, {
              nDataSourceID: _,
            }),
          );
        },
        _ = (_) => {
          const _ = _(_.nDataSourceID).data;
          return _
            ? _.createElement(
                "div",
                {
                  className: _.DataSourceDetails,
                },
                _.structure()
                  .elements()
                  .map((_) =>
                    _.createElement(_, {
                      nDataSourceID: _.nDataSourceID,
                      msgElement: _,
                      nIndentSize: 0,
                      key: `${_.nDataSourceID}_${_.name()}`,
                    }),
                  ),
              )
            : null;
        },
        _ = (_) => {
          const _ = 2 == _.msgElement.data_type(),
            _ = 3 == _.msgElement.data_type(),
            _ = 1 == _.msgElement.data_type(),
            _ = 4 == _.msgElement.data_type(),
            _ = 5 == _.msgElement.data_type();
          let _ = "";
          switch (_.msgElement.data_type()) {
            case 1:
              _ = (0, _._)("#SteamLearn_DataSource_Type_Int", "");
              break;
            case 2:
              _ = (0, _._)("#SteamLearn_DataSource_Type_Float", "");
              break;
            case 3:
              _ = (0, _._)("#SteamLearn_DataSource_Type_Bool", "");
              break;
            case 4:
              _ = (0, _._)("#SteamLearn_DataSource_Type_String", "");
              break;
            case 5:
              _ = (0, _._)("#SteamLearn_DataSource_Type_Object", "");
          }
          return _.createElement(
            "div",
            {
              className: _.DataSourceElement,
              style: {
                marginLeft: _.nIndentSize,
              },
            },
            _.createElement(
              "div",
              {
                className: _.Name,
              },
              _.msgElement.name(),
            ),
            _.createElement(
              "div",
              {
                className: (0, _._)(
                  _.Type,
                  _.DataSourceType,
                  _ && _.Float,
                  _ && _.Bool,
                  _ && _.Int,
                  _ && _.String,
                  _ && _.Object,
                ),
              },
              _,
              _.msgElement.count() > 1 &&
                _.createElement(
                  "span",
                  {
                    className: _.Array,
                  },
                  `[${_.msgElement.count()}]`,
                ),
            ),
            _.msgElement
              .object()
              .elements()
              .map((_) =>
                _.createElement(_, {
                  nDataSourceID: _.nDataSourceID,
                  msgElement: _,
                  nIndentSize: _.nIndentSize + 20,
                  key: `${_.nDataSourceID}_${_.name()}`,
                }),
              ),
          );
        };
      var _ = __webpack_require__("chunkid");
      const _ = () => {
        const { nProjectID: _, msgWorkingProjectConfig: _ } = _(),
          [__webpack_require__, _] = _.useState({}),
          [_, _] = _.useState(_.createElement("div", null)),
          [_, _] = _.useState("10"),
          [_, _] = _.useState(0),
          [_, _] = _.useState(""),
          [_, _] = _.useState(""),
          _ = _.useMemo(
            () =>
              Array.from(_.data_source_element_usages().values()).sort(
                (_, _) => {
                  const _ = _.data_element_path().split("/"),
                    _ = _.data_element_path().split("/"),
                    _ = Math.min(_.length, _.length);
                  for (let _ = 0; _ < _; _++) {
                    const _ = _[_].split("#"),
                      _ = _[_].split("#"),
                      _ = _.length > 1 ? parseInt(_[1]) : 0,
                      _ = _.length > 1 ? parseInt(_[1]) : 0;
                    if (_[0] == _[0]) {
                      if (_ == _) continue;
                      if (_ < _) return -1;
                      if (_ > _) return 1;
                    }
                    return _[_] < _[_] ? -1 : 1;
                  }
                  return _.length < _.length ? -1 : 1;
                },
              ),
            [_],
          );
        _.useEffect(() => {
          const _ = Math.max(..._.train_infos().map((_) => _.train_id()));
          _(_);
        }, [_]),
          _.useEffect(() => {
            for (const _ of _)
              _((_) => ({
                ..._,
                [_.data_element_path()]: "0",
              }));
          }, [_]);
        return 0 == Object.keys(__webpack_require__).length
          ? null
          : _.createElement(
              "div",
              {
                className: _.ProjectInferenceTesterPage,
              },
              _.createElement(
                "div",
                {
                  className: _.ProjectInferenceTesterBody,
                },
                _.createElement(
                  "div",
                  {
                    className: _.Keys,
                  },
                  (0, _._)("#SteamLearn_InferenceTester_Keys"),
                ),
                _.createElement("input", {
                  type: "text",
                  className: _.ValueInput,
                  value: _,
                  onChange: (_) => _(_.target.value),
                }),
                _.createElement(
                  "div",
                  {
                    className: _.Keys,
                  },
                  (0, _._)("#SteamLearn_InferenceTester_NamedInference"),
                ),
                _.createElement("input", {
                  type: "text",
                  className: _.ValueInput,
                  value: _,
                  onChange: (_) => _(_.target.value),
                }),
                _.createElement("hr", null),
                _.map((_) =>
                  0 == _.input()
                    ? null
                    : _.createElement(
                        "div",
                        {
                          className: _.DataSourceElement,
                          key: _.data_element_path(),
                        },
                        _.createElement(
                          "div",
                          {
                            className: _.Name,
                          },
                          _.data_element_path(),
                        ),
                        _.createElement("input", {
                          type: "text",
                          className: _.ValueInput,
                          value: __webpack_require__[_.data_element_path()],
                          onChange: (_) =>
                            _({
                              ...__webpack_require__,
                              [_.data_element_path()]: _.target.value,
                            }),
                        }),
                      ),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(
                  "div",
                  {
                    className: _.OptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDetails,
                    },
                    (0, _._)("#SteamLearn_InferenceTester_AdditionalData"),
                  ),
                  _.createElement("input", {
                    type: "text",
                    className: _.ValueInput,
                    value: _,
                    onChange: (_) => _(_.target.value),
                  }),
                ),
                _.createElement(
                  "select",
                  {
                    className: _.TrainDropdown,
                    value: _,
                    onChange: (_) => _(parseInt(_.target.value)),
                  },
                  _.train_infos()
                    .map((_) => _.train_id())
                    .map((_, _) =>
                      _.createElement(
                        "option",
                        {
                          key: `Fetch_${_}_${_}`,
                          value: _,
                        },
                        (0, _._)("#SteamLearn_ManualTrain_TrainVersion", _),
                      ),
                    ),
                ),
                _.createElement(
                  "div",
                  {
                    className: (0, _._)(_.SteamLearnButton, _.Blue),
                    onClick: () =>
                      (async () => {
                        let _ = _._.Init(_);
                        _.Body().set_project_id(_);
                        const _ = _.split(",").map((_) => parseInt(_));
                        _.Body().set_additional_data(_);
                        const _ =
                          _.train_infos()
                            .find((_) => _.train_id() == _)
                            ?.fetch_id() || 0;
                        if (
                          (_.Body().set_fetch_id(_),
                          _.Body().set_train_id(_),
                          _.length > 0 && _.Body().set_named_inference(_),
                          _.length > 0)
                        ) {
                          const _ = _.split(",");
                          for (const _ of _) _.Body().add_keys(_);
                        } else {
                          const _ = _.sort(
                            (_, _) => _.sql_column() - _.sql_column(),
                          );
                          for (const _ of _) {
                            if (0 == _.input()) continue;
                            const _ = new _();
                            isNaN(+__webpack_require__[_.data_element_path()])
                              ? _.set_string_value(
                                  __webpack_require__[_.data_element_path()],
                                )
                              : _.set_float_value(
                                  parseFloat(
                                    __webpack_require__[_.data_element_path()],
                                  ),
                                ),
                              _.Body().add_data(_);
                          }
                        }
                        const _ = await _.InferenceBackend(
                          _.Get().GetServiceTransport(),
                          _,
                        );
                        if (
                          (console.log(_.Body().toObject()),
                          _.BIsValid() && 1 == _.GetEResult())
                        ) {
                          let _ = [];
                          for (const _ of _.Body().outputs()) {
                            if (_.regression().value().length > 0) {
                              _.push(_.createElement("div", null, "OUTPUT"));
                              for (
                                let _ = 0;
                                _ < _.regression().value().length;
                                _++
                              )
                                _.push(
                                  _.createElement(
                                    "div",
                                    null,
                                    `[${_}] ${_.regression().value()[_]}`,
                                  ),
                                );
                            }
                            if (_.named_inference().value().length > 0) {
                              _.push(_.createElement("div", null, "OUTPUT"));
                              for (
                                let _ = 0;
                                _ < _.named_inference().value().length;
                                _++
                              )
                                _.push(
                                  _.createElement(
                                    "div",
                                    null,
                                    `${_.named_inference().value()[_]}`,
                                  ),
                                );
                            }
                            if (
                              _.multi_binary_crossentropy().value().length > 0
                            ) {
                              _.push(_.createElement("div", null, "OUTPUT"));
                              for (
                                let _ = 0;
                                _ <
                                _.multi_binary_crossentropy().value().length;
                                _++
                              )
                                _.push(
                                  _.createElement(
                                    "div",
                                    null,
                                    `${_.multi_binary_crossentropy().value()[_]} - ${(100 * _.multi_binary_crossentropy().weight()[_]).toFixed(2)}%`,
                                  ),
                                );
                            }
                            if (
                              _.multi_binary_crossentropy().value_sequence()
                                .length > 0
                            ) {
                              _.push(_.createElement("div", null, "OUTPUT"));
                              for (
                                let _ = 0;
                                _ <
                                _.multi_binary_crossentropy().value_sequence()
                                  .length;
                                _++
                              )
                                _.push(
                                  _.createElement(
                                    "div",
                                    null,
                                    `${_.multi_binary_crossentropy().value_sequence()[_].value()} - ${(100 * _.multi_binary_crossentropy().weight()[_]).toFixed(2)}%`,
                                  ),
                                );
                            }
                            if (
                              (_.binary_crossentropy().value() &&
                                (_.push(_.createElement("div", null, "OUTPUT")),
                                _.push(
                                  _.createElement(
                                    "div",
                                    null,
                                    `${(100 * _.binary_crossentropy().value()).toFixed(2)}%`,
                                  ),
                                )),
                              _.categorical_crossentropy().value().length > 0)
                            )
                              for (
                                let _ = 0;
                                _ < _.categorical_crossentropy().value().length;
                                _++
                              )
                                _.push(
                                  _.createElement(
                                    "div",
                                    null,
                                    `${_.categorical_crossentropy().value()[_]} - ${(100 * _.categorical_crossentropy().weight()[_]).toFixed(2)}%`,
                                  ),
                                );
                            if (
                              _.categorical_crossentropy().value_sequence()
                                .length > 0
                            )
                              for (
                                let _ = 0;
                                _ <
                                _.categorical_crossentropy().value_sequence()
                                  .length;
                                _++
                              )
                                _.push(
                                  _.createElement(
                                    "div",
                                    null,
                                    `${_.categorical_crossentropy().value_sequence()[_]} - ${(100 * _.categorical_crossentropy().weight()[_]).toFixed(2)}%`,
                                  ),
                                );
                          }
                          _(_.createElement("div", null, _));
                        } else _(_.createElement("div", null, "ERROR"));
                      })(),
                  },
                  (0, _._)("#SteamLearn_InferenceTester_Infer"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.Results,
                  },
                  _,
                ),
              ),
            );
      };
      var _ = __webpack_require__("chunkid"),
        _ = (__webpack_require__("chunkid"), __webpack_require__("chunkid")),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid");
      const _ = (_) =>
          _.hidden
            ? null
            : _.createElement(_, {
                ..._,
              }),
        _ = (_) => {
          const {
              nProjectID: _,
              nPublishedVersion: __webpack_require__,
              msgWorkingProjectConfig: _,
            } = _(),
            [_, _] = _.useState(_.fnGetInitialValue()),
            [_, _] = _.useState(_.fnGetInitialValue()),
            [_, _] = _.useState(
              !_.fnValidateValue || _.fnValidateValue(_.fnGetInitialValue()),
            ),
            [_, _] = _.useState(_),
            [_, _] = _.useState(__webpack_require__);
          _.useEffect(() => {
            const _ = _.digitCount && _.digitCount > 0;
            ((!_ && parseInt(_.fnGetInitialValue()) != parseInt(_)) ||
              (_ &&
                parseFloat(_.fnGetInitialValue()).toFixed(_.digitCount) !=
                  parseFloat(_).toFixed(_.digitCount)) ||
              _ != _ ||
              _ != __webpack_require__) &&
              (_(_.fnGetInitialValue()),
              _(!_.fnValidateValue || _.fnValidateValue(_.fnGetInitialValue())),
              _(_),
              _(__webpack_require__));
          }, [_, _, _, _, __webpack_require__, _]);
          return _.createElement(
            "div",
            {
              className: _.InputOption,
            },
            _.label &&
              _.createElement(
                _._,
                {
                  toolTipContent: _.labelTooltip,
                  direction: "top",
                  bDisabled: null == _.labelTooltip,
                },
                _.createElement(
                  "div",
                  {
                    className: (0, _._)(_.Name, _.smallLabel && _.Small),
                  },
                  _.label,
                ),
              ),
            _.createElement("input", {
              type: "text",
              className: (0, _._)(_.ValueInput, !_ && _.Invalid),
              disabled: _.readOnly,
              value: _,
              onChange: (_) =>
                ((_) => {
                  const _ = !_.fnValidateValue || _.fnValidateValue(_);
                  _ && (_.fnSetValue(_), _(_), _.dontUpdateProject || _(_)),
                    _(_),
                    _(_);
                })(_.target.value),
              style: {
                width: _.width || 100,
                textAlign: _.isText ? "left" : "right",
              },
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _();
          return _.hidden
            ? null
            : _.createElement(
                "div",
                {
                  className: _.InputOption,
                },
                _.label &&
                  _.createElement(
                    "div",
                    {
                      className: _.Name,
                    },
                    _.label,
                  ),
                _.createElement(
                  "select",
                  {
                    className: _.InputSelect,
                    disabled: _.readOnly,
                    value: _.fnGetValue(),
                    onChange: (_) => {
                      _.fnSetValue(_.target.value), _.dontUpdateProject || _(_);
                    },
                  },
                  _.options.map(
                    (_, _) =>
                      !_.hidden &&
                      _.createElement(
                        "option",
                        {
                          key: `${_.value}_${_}`,
                          value: _.value,
                        },
                        _.label,
                      ),
                  ),
                ),
              );
        },
        _ = (_) => {
          const {
              nProjectID: _,
              nPublishedVersion: __webpack_require__,
              msgWorkingProjectConfig: _,
            } = _(),
            [_, _] = _.useState(_.fnGetInitialValue()),
            [_, _] = _.useState(_),
            [_, _] = _.useState(__webpack_require__);
          return (
            _.useEffect(() => {
              (_.fnGetInitialValue() != _ ||
                _ != _ ||
                _ != __webpack_require__) &&
                (_(_.fnGetInitialValue()), _(_), _(__webpack_require__));
            }, [_, _, _, _, __webpack_require__, _]),
            _.hidden
              ? null
              : _.createElement(
                  "div",
                  {
                    className: _.InputOption,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.CheckboxWithLabel,
                    },
                    _.createElement("input", {
                      type: "checkbox",
                      _: "InputCheckbox",
                      checked: _,
                      onChange: () => {
                        _.fnSetValue(!_), _(!_), _.dontUpdateProject || _(_);
                      },
                    }),
                    _.createElement(
                      "label",
                      {
                        htmlFor: "InputCheckbox",
                      },
                      (0, _._)(_.label),
                    ),
                  ),
                )
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(
                _.FlowNode,
                _.BatchNormalizationNode,
                _.Keras,
              ),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_BatchNormalization"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment());
          _.useEffect(() => {
            _(_.msgNode.comment());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_BatchNormalization"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_BatchNormalization"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          let _ = "";
          switch (_.bert_finetune().bert_model()) {
            case 0:
              _ = "#SteamLearn_Config_Node_Bert_Model_TinyEnUncased";
              break;
            case 1:
              _ = "#SteamLearn_Config_Node_Bert_Model_SmallEnUncased";
              break;
            case 2:
              _ = "#SteamLearn_Config_Node_Bert_Model_MediumEnUncased";
              break;
            case 3:
              _ = "#SteamLearn_Config_Node_Bert_Model_BaseEn";
              break;
            case 4:
              _ = "#SteamLearn_Config_Node_Bert_Model_BaseEnUncased";
              break;
            case 5:
              _ = "#SteamLearn_Config_Node_Bert_Model_BaseMulti";
          }
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.BertFinetuneNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  toolTipContent: (0, _._)(
                    `#SteamLearn_Config_Node_Bert_Finetune_Input_${_}`,
                  ),
                  direction: "top",
                },
                _.createElement(
                  _._,
                  {
                    key: _,
                    type: "target",
                    position: _._.Top,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_BertFinetune"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Bert_Model"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    (0, _._)(_),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalModel_UnfrozenLayers",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.bert_finetune().unfrozen_layers(),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(_.msgNode.bert_finetune().bert_model()),
            [_, _] = _.useState(
              _.msgNode.bert_finetune().unfrozen_layers()?.toString() || "0",
            );
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.bert_finetune().bert_model()),
              _(_.msgNode.bert_finetune().unfrozen_layers().toString());
          }, [_.bVisible, _.msgNode]);
          let _ = [
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Bert_Model_TinyEnUncased",
              ),
              value: 0,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Bert_Model_SmallEnUncased",
              ),
              value: 1,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Bert_Model_MediumEnUncased",
              ),
              value: 2,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Bert_Model_BaseEn"),
              value: 3,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Bert_Model_BaseEnUncased",
              ),
              value: 4,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Bert_Model_BaseMulti"),
              value: 5,
            },
          ];
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_BertFinetune"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_BertFinetune"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Bert_Model"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Bert_ModelDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_ExternalModel_UnfrozenLayers",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_ExternalModel_UnfrozenLayersDesc",
                  ),
                ),
                _.createElement(_, {
                  width: 200,
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, void 0),
                  fnSetValue: (_) => _(_),
                }),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _.msgNode.bert_finetune().set_bert_model(_),
                      _.msgNode
                        .bert_finetune()
                        .set_unfrozen_layers(parseInt(_)),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.BertNode, _.Preprocessing),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Bert"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment());
          _.useEffect(() => {
            _(_.msgNode.comment());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Bert"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Bert"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          let _ = "";
          switch (_.bert_tokenizer().bert_model()) {
            case 0:
              _ = "#SteamLearn_Config_Node_Bert_Model_TinyEnUncased";
              break;
            case 1:
              _ = "#SteamLearn_Config_Node_Bert_Model_SmallEnUncased";
              break;
            case 2:
              _ = "#SteamLearn_Config_Node_Bert_Model_MediumEnUncased";
              break;
            case 3:
              _ = "#SteamLearn_Config_Node_Bert_Model_BaseEn";
              break;
            case 4:
              _ = "#SteamLearn_Config_Node_Bert_Model_BaseEnUncased";
              break;
            case 5:
              _ = "#SteamLearn_Config_Node_Bert_Model_BaseMulti";
          }
          return _.createElement(
            "div",
            {
              className: (0, _._)(
                _.FlowNode,
                _.BertTokenizerNode,
                _.Preprocessing,
              ),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_BertTokenizer"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Bert_Model"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    (0, _._)(_),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Bert_SequenceLength"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.bert_tokenizer().sequence_length(),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  toolTipContent: (0, _._)(
                    `#SteamLearn_Config_Node_Bert_Tokenizer_Output_${_}`,
                  ),
                  direction: "top",
                },
                _.createElement(
                  _._,
                  {
                    key: _,
                    type: "source",
                    position: _._.Bottom,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(_.msgNode.bert_tokenizer().bert_model()),
            [_, _] = _.useState(
              _.msgNode.bert_tokenizer().sequence_length()?.toString() || "512",
            );
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.bert_tokenizer().bert_model()),
              _(_.msgNode.bert_tokenizer().sequence_length()?.toString());
          }, [_.bVisible, _.msgNode]);
          let _ = [
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Bert_Model_TinyEnUncased",
              ),
              value: 0,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Bert_Model_SmallEnUncased",
              ),
              value: 1,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Bert_Model_MediumEnUncased",
              ),
              value: 2,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Bert_Model_BaseEn"),
              value: 3,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Bert_Model_BaseEnUncased",
              ),
              value: 4,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Bert_Model_BaseMulti"),
              value: 5,
            },
          ];
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_BertTokenizer"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_BertTokenizer"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Bert_Model"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Bert_ModelDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Bert_SequenceLength"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Bert_SequenceLengthDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 16, 512),
                  fnSetValue: (_) => _(_),
                }),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _.msgNode.bert_tokenizer().set_bert_model(_),
                      _.msgNode
                        .bert_tokenizer()
                        .set_sequence_length(parseInt(_)),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = (0, _._)(),
            _ = _.data.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()),
            _ = _.data.msgNode
              .connectors()
              .filter((_) => !_.is_input_connector());
          return (
            _.useEffect(() => {
              setTimeout(() => {
                for (const _ of _.project_nodes())
                  15 == _.type() && _(_(_.node_id()));
              }, 0.1);
            }, [_, _]),
            _.createElement(
              "div",
              {
                className: (0, _._)(_.FlowNode, _.CombineNode, _.Preprocessing),
              },
              _.createElement(_, {
                bVisible: __webpack_require__,
                fnSetPopupVisible: _,
                msgNode: _,
              }),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "target",
                    position: _._.Top,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
              _.createElement(
                "div",
                {
                  className: _.Title,
                },
                _.createElement(
                  "div",
                  {
                    className: _.TitleText,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Title_Combine"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeID,
                  },
                  _.node_id(),
                ),
                _.createElement("div", {
                  className: _.EditGear,
                  onClick: () => _(!0),
                }),
                _.createElement("div", {
                  className: _.Delete,
                  onClick: () =>
                    (0, _._)(
                      _.createElement(_._, {
                        strTitle: (0, _._)(
                          "#SteamLearn_Config_Node_Delete_Node",
                        ),
                        strDescription: (0, _._)(
                          "#SteamLearn_Config_Node_Delete_NodeDetails",
                        ),
                        onOK: () => _(_, _.node_id()),
                      }),
                      window,
                    ),
                }),
              ),
              _.createElement("div", {
                className: _.TitleUnderBar,
              }),
              _.createElement(
                "div",
                {
                  className: _.Body,
                },
                _.createElement(
                  "div",
                  {
                    className: _.CenterSection,
                  },
                  _.comment().length > 0 &&
                    _.createElement(
                      "div",
                      {
                        className: _.Comment,
                      },
                      _.comment(),
                    ),
                ),
              ),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "source",
                    position: _._.Bottom,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
            )
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            _ = _.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()).length,
            [_, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(__webpack_require__.toString());
          _.useEffect(() => {
            _(_.msgNode.comment()), _(__webpack_require__.toString());
          }, [_.bVisible, _.msgNode, _]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Onehot"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Onehot"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 300,
                  fnGetInitialValue: () => _,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Combine_NumInputs"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Combine_NumInputsDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 9),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.Buttons,
                },
                _.createElement(
                  _._,
                  {
                    onClick: () => {
                      const _ = parseInt(_);
                      if (_ > _) {
                        const _ = _ - _,
                          _ = _(_, _);
                        for (let _ = 0; _ < _; _++) {
                          let _ = new _();
                          __webpack_require__.set_connector_id(_[_]),
                            __webpack_require__.set_is_input_connector(!0),
                            _.msgNode.add_connectors(_);
                        }
                      } else if (_ < _) {
                        const _ = _.msgNode
                          .connectors()
                          .filter((_) => _.is_input_connector())
                          .slice(_)
                          .map((_) => _.connector_id());
                        for (let _ of _.project_nodes())
                          for (let _ of _.connectors())
                            _.set_linked_connector_ids(
                              _.linked_connector_ids().filter(
                                (_) => !__webpack_require__.includes(_),
                              ),
                            );
                        _.msgNode.set_connectors([
                          ..._.msgNode
                            .connectors()
                            .filter((_) => !_.is_input_connector()),
                          ..._.msgNode
                            .connectors()
                            .filter((_) => _.is_input_connector())
                            .slice(0, _),
                        ]);
                      }
                      _.msgNode.set_comment(_), _(_), _.fnSetPopupVisible(!1);
                    },
                  },
                  (0, _._)("#SteamLearn_Confirm"),
                ),
                _.createElement(
                  _._,
                  {
                    onClick: () => _.fnSetPopupVisible(!1),
                  },
                  (0, _._)("#SteamLearn_Cancel"),
                ),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = (0, _._)(),
            _ = _.data.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()),
            _ = _.data.msgNode
              .connectors()
              .filter((_) => !_.is_input_connector());
          return (
            _.useEffect(() => {
              setTimeout(() => {
                for (const _ of _.project_nodes())
                  8 == _.type() && _(_(_.node_id()));
              }, 0.1);
            }, [_, _]),
            _.createElement(
              "div",
              {
                className: (0, _._)(_.FlowNode, _.ConcatNode, _.Keras),
              },
              _.createElement(_, {
                bVisible: __webpack_require__,
                fnSetPopupVisible: _,
                msgNode: _,
              }),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "target",
                    position: _._.Top,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
              _.createElement(
                "div",
                {
                  className: _.Title,
                },
                _.createElement(
                  "div",
                  {
                    className: _.TitleText,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Title_Concat"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeID,
                  },
                  _.node_id(),
                ),
                _.createElement("div", {
                  className: _.EditGear,
                  onClick: () => _(!0),
                }),
                _.createElement("div", {
                  className: _.Delete,
                  onClick: () =>
                    (0, _._)(
                      _.createElement(_._, {
                        strTitle: (0, _._)(
                          "#SteamLearn_Config_Node_Delete_Node",
                        ),
                        strDescription: (0, _._)(
                          "#SteamLearn_Config_Node_Delete_NodeDetails",
                        ),
                        onOK: () => _(_, _.node_id()),
                      }),
                      window,
                    ),
                }),
              ),
              _.createElement("div", {
                className: _.TitleUnderBar,
              }),
              _.createElement(
                "div",
                {
                  className: _.Body,
                },
                _.createElement(
                  "div",
                  {
                    className: _.CenterSection,
                  },
                  _.comment().length > 0 &&
                    _.createElement(
                      "div",
                      {
                        className: _.Comment,
                      },
                      _.comment(),
                    ),
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)("#SteamLearn_Config_Node_Concat_Axis"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.concatenate().axis(),
                    ),
                  ),
                ),
              ),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "source",
                    position: _._.Bottom,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
            )
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            _ = _.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()).length,
            [_, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(__webpack_require__.toString()),
            [_, _] = _.useState(
              _.msgNode.concatenate().axis()?.toString() || "0",
            );
          return (
            _.useEffect(() => {
              _(_.msgNode.comment()),
                _(_.msgNode.concatenate().axis()?.toString() || "1"),
                _(__webpack_require__.toString());
            }, [_.bVisible, _.msgNode, _]),
            _.createElement(
              _._,
              {
                active: _.bVisible,
                onDismiss: () => _.fnSetPopupVisible(!1),
                modalClassName: "NodeEditDialog",
              },
              _.createElement(
                "div",
                {
                  className: _.NodeHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Concat"),
                _.createElement(
                  "div",
                  {
                    className: _.SubHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Tooltip_Concat"),
                ),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeBody,
                },
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Comment"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                  ),
                  _.createElement(_, {
                    isText: !0,
                    dontUpdateProject: !0,
                    width: 200,
                    fnGetInitialValue: () => _,
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Concat_NumInputs"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Concat_NumInputsDesc"),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 1, 8),
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Concat_Axis"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Concat_AxisDesc"),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 0, void 0),
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.Buttons,
                },
                _.createElement(
                  _._,
                  {
                    onClick: () => {
                      const _ = parseInt(_);
                      if (_ > _) {
                        const _ = _ - _,
                          _ = _(_, _);
                        for (let _ = 0; _ < _; _++) {
                          let _ = new _();
                          __webpack_require__.set_connector_id(_[_]),
                            __webpack_require__.set_is_input_connector(!0),
                            _.msgNode.add_connectors(_);
                        }
                      } else if (_ < _) {
                        const _ = _.msgNode
                          .connectors()
                          .filter((_) => _.is_input_connector())
                          .slice(_)
                          .map((_) => _.connector_id());
                        for (let _ of _.project_nodes())
                          for (let _ of _.connectors())
                            _.set_linked_connector_ids(
                              _.linked_connector_ids().filter(
                                (_) => !__webpack_require__.includes(_),
                              ),
                            );
                        _.msgNode.set_connectors([
                          ..._.msgNode
                            .connectors()
                            .filter((_) => !_.is_input_connector()),
                          ..._.msgNode
                            .connectors()
                            .filter((_) => _.is_input_connector())
                            .slice(0, _),
                        ]);
                      }
                      _.msgNode.concatenate().set_axis(parseInt(_)),
                        _.msgNode.set_comment(_),
                        _(_),
                        _.fnSetPopupVisible(!1);
                    },
                  },
                  (0, _._)("#SteamLearn_Confirm"),
                ),
                _.createElement(
                  _._,
                  {
                    onClick: () => _.fnSetPopupVisible(!1),
                  },
                  (0, _._)("#SteamLearn_Cancel"),
                ),
              ),
            )
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = (0, _._)(),
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector()),
            _ = _.filter((_, _) => _ % 2 == 0),
            _ = _.filter((_, _) => _ % 2 == 1);
          _.useEffect(() => {
            setTimeout(() => {
              for (const _ of _.project_nodes())
                7 == _.type() && _(_(_.node_id()));
            }, 0.1);
          }, [_, _]);
          const _ = Math.max(78, 20 * _.length);
          let _ = "";
          switch (_.conditional_extract().extract_filter_type()) {
            case 1:
              _ = (0, _._)(
                "#SteamLearn_Config_Node_ConditionalExtract_FilterType_Random",
              );
              break;
            case 2:
              _ = (0, _._)(
                "#SteamLearn_Config_Node_ConditionalExtract_FilterType_AppID",
              );
              break;
            case 4:
              _ = (0, _._)(
                "#SteamLearn_Config_Node_ConditionalExtract_FilterType_AppIDFeatured",
              );
              break;
            case 7:
              _ = (0, _._)(
                "#SteamLearn_Config_Node_ConditionalExtract_FilterType_First",
              );
          }
          const _ =
            2 == _.conditional_extract().extract_filter_type() ||
            4 == _.conditional_extract().extract_filter_type();
          return _.createElement(
            "div",
            {
              className: (0, _._)(
                _.FlowNode,
                _.ConditionalExtractNode,
                _.Preprocessing,
              ),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_ConditionalExtract"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ConditionalExtract_FilterType",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _,
                  ),
                ),
                _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_Age",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.conditional_extract()
                        .filter_info()
                        .appid_release_recency_months(),
                    ),
                  ),
                _ &&
                  2 == _.conditional_extract().extract_weight_type() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_BiasFactor",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.conditional_extract()
                        .weight_info()
                        .appid_release_recency_bias()
                        ?.toFixed(2) || "0",
                    ),
                  ),
                _ &&
                  3 == _.conditional_extract().extract_weight_type() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_Input",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.conditional_extract()
                        .weight_info()
                        .input_number()
                        ?.toFixed(0) || "0",
                    ),
                  ),
                _ &&
                  3 == _.conditional_extract().extract_weight_type() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_InputStr",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.conditional_extract()
                        .weight_info()
                        .input_strength()
                        ?.toFixed(2) || "0",
                    ),
                  ),
                _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_CompactTable",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.conditional_extract().compact_table(),
                    ),
                  ),
                _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_ExtractedCompactTable",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.conditional_extract().extracted_compact_table(),
                    ),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.map((_, _) => {
              const _ = Math.floor(((_ + 1) / (_.length + 1)) * (_ - 24)),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Right,
                  _: _,
                  style: {
                    top: _ + 24,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            _ = _.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()).length,
            [_, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(__webpack_require__.toString()),
            [_, _] = _.useState(
              _.msgNode.conditional_extract().extract_filter_type(),
            ),
            [_, _] = _.useState(
              _.msgNode.conditional_extract().extract_weight_type(),
            ),
            [_, _] = _.useState(
              _.msgNode
                .conditional_extract()
                .filter_info()
                .appid_release_recency_months()
                ?.toString() || "0",
            ),
            [_, _] = _.useState(
              _.msgNode
                .conditional_extract()
                .weight_info()
                .appid_release_recency_bias()
                ?.toFixed(2) || "0",
            ),
            [_, _] = _.useState(
              _.msgNode
                .conditional_extract()
                .weight_info()
                .input_number()
                ?.toFixed(0) || "1",
            ),
            [_, _] = _.useState(
              _.msgNode
                .conditional_extract()
                .weight_info()
                .input_strength()
                ?.toFixed(2) || "1.00",
            ),
            [_, _] = _.useState(
              _.msgNode.conditional_extract().compact_table(),
            ),
            [_, _] = _.useState(
              _.msgNode.conditional_extract().extracted_compact_table(),
            );
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(__webpack_require__.toString()),
              _(_.msgNode.conditional_extract().extract_filter_type()),
              _(_.msgNode.conditional_extract().extract_weight_type()),
              _(
                _.msgNode
                  .conditional_extract()
                  .filter_info()
                  .appid_release_recency_months()
                  ?.toString() || "0",
              ),
              _(
                _.msgNode
                  .conditional_extract()
                  .weight_info()
                  .appid_release_recency_bias()
                  ?.toFixed(2) || "0",
              ),
              _(
                _.msgNode
                  .conditional_extract()
                  .weight_info()
                  .input_number()
                  ?.toFixed(0) || "1",
              ),
              _(
                _.msgNode
                  .conditional_extract()
                  .weight_info()
                  .input_strength()
                  ?.toFixed(2) || "1.00",
              ),
              _(_.msgNode.conditional_extract().compact_table()),
              _(_.msgNode.conditional_extract().extracted_compact_table());
          }, [_.bVisible, _.msgNode, _]);
          let _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_ConditionalExtract_FilterType_All",
                ),
                value: 6,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_ConditionalExtract_FilterType_Random",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_ConditionalExtract_FilterType_AppID",
                ),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_ConditionalExtract_FilterType_AppIDFeatured",
                ),
                value: 4,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_ConditionalExtract_FilterType_First",
                ),
                value: 7,
              },
            ],
            _ = [];
          switch (_) {
            case 6:
              _.push({
                label: (0, _._)(
                  "#SteamLearn_Config_Node_ConditionalExtract_WeightType_Input",
                ),
                value: 3,
              });
              break;
            case 2:
            case 4:
              _.push({
                label: (0, _._)(
                  "#SteamLearn_Config_Node_ConditionalExtract_WeightType_Input",
                ),
                value: 3,
              }),
                _.push({
                  label: (0, _._)(
                    "#SteamLearn_Config_Node_ConditionalExtract_WeightType_AppIDRecency",
                  ),
                  value: 2,
                });
          }
          const _ = 2 == _ || 4 == _,
            _ = 1 == _,
            _ = _ && 2 == _,
            _ = !_ && 3 == _,
            _ = !_ && 7 != _;
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_ConditionalExtract"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_ConditionalExtract"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_ConditionalExtract_NumInputs",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_ConditionalExtract_NumInputsDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 5),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_ConditionalExtract_FilterType",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_ConditionalExtract_FilterTypeDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
                _ &&
                  _.createElement(_, {
                    label: (0, _._)(
                      "#SteamLearn_Config_Node_ConditionalExtract_AppID_Age",
                    ),
                    labelTooltip: (0, _._)(
                      "#SteamLearn_Config_Node_ConditionalExtract_AppID_AgeDesc",
                    ),
                    smallLabel: !0,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 0, 360),
                    fnSetValue: (_) => _(_),
                  }),
              ),
              _ &&
                _.createElement("div", {
                  className: _.Separator,
                }),
              _ &&
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ConditionalExtract_WeightType",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ConditionalExtract_WeightTypeDesc",
                    ),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetValue: () => _,
                    fnSetValue: (_) => _(parseInt(_)),
                    options: _,
                  }),
                  _ &&
                    _.createElement(_, {
                      label: (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_BiasFactor",
                      ),
                      labelTooltip: (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_BiasFactorDesc",
                      ),
                      smallLabel: !0,
                      dontUpdateProject: !0,
                      fnGetInitialValue: () => _,
                      digitCount: 2,
                      fnValidateValue: (_) => _(_, 0, 1),
                      fnSetValue: (_) => _(_),
                    }),
                  _ &&
                    _.createElement(_, {
                      label: (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_Input",
                      ),
                      labelTooltip: (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_InputDesc",
                      ),
                      smallLabel: !0,
                      dontUpdateProject: !0,
                      fnGetInitialValue: () => _,
                      fnValidateValue: (_) =>
                        _(
                          _,
                          1,
                          _.msgNode
                            .connectors()
                            .filter((_) => _.is_input_connector()).length - 1,
                        ),
                      fnSetValue: (_) => _(_),
                    }),
                  _ &&
                    _.createElement(_, {
                      label: (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_InputStr",
                      ),
                      labelTooltip: (0, _._)(
                        "#SteamLearn_Config_Node_ConditionalExtract_AppID_InputStrDesc",
                      ),
                      smallLabel: !0,
                      dontUpdateProject: !0,
                      fnGetInitialValue: () => _,
                      digitCount: 2,
                      fnValidateValue: (_) => _(_, 0, 20),
                      fnSetValue: (_) => _(_),
                    }),
                ),
              _ &&
                _.createElement("div", {
                  className: _.Separator,
                }),
              _ &&
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ConditionalExtract_AppID_CompactTable",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ConditionalExtract_AppID_CompactTableDesc",
                    ),
                  ),
                  _.createElement(_, {
                    label: (0, _._)(
                      "#SteamLearn_Config_Node_ConditionalExtract_AppID_CompactTable",
                    ),
                    labelTooltip: (0, _._)(
                      "#SteamLearn_Config_Node_ConditionalExtract_AppID_CompactTableDesc",
                    ),
                    smallLabel: !0,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, _),
                    fnSetValue: (_) => _(_),
                  }),
                  _.createElement(_, {
                    label: (0, _._)(
                      "#SteamLearn_Config_Node_ConditionalExtract_AppID_ExtractedCompactTable",
                    ),
                    labelTooltip: (0, _._)(
                      "#SteamLearn_Config_Node_ConditionalExtract_AppID_ExtractedCompactTableDesc",
                    ),
                    smallLabel: !0,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => !_(_, _, _.msgNode),
                    fnSetValue: (_) => _(_),
                  }),
                ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    const _ = parseInt(_);
                    if (_ > _) {
                      const _ = 3 * (_ - _),
                        _ = _(_, _);
                      for (let _ = 0; _ < _; _++) {
                        const _ = _ % 3 != 0;
                        let _ = new _();
                        _.set_connector_id(_[_]),
                          _.set_is_input_connector(!_),
                          _.msgNode.add_connectors(_);
                      }
                    } else if (_ < _) {
                      let _ = _.msgNode
                        .connectors()
                        .filter((_) => _.is_input_connector())
                        .slice(_)
                        .map((_) => _.connector_id());
                      __webpack_require__.push(
                        ..._.msgNode
                          .connectors()
                          .filter((_) => !_.is_input_connector())
                          .slice(2 * _)
                          .map((_) => _.connector_id()),
                      );
                      for (let _ of _.project_nodes())
                        for (let _ of _.connectors())
                          _.set_linked_connector_ids(
                            _.linked_connector_ids().filter(
                              (_) => !__webpack_require__.includes(_),
                            ),
                          );
                      let _ = _.msgNode
                        .connectors()
                        .filter(
                          (_) =>
                            !__webpack_require__.includes(_.connector_id()),
                        );
                      _.msgNode.set_connectors(_);
                    }
                    _.msgNode.set_comment(_),
                      _.msgNode
                        .conditional_extract()
                        .set_extract_filter_type(_),
                      _.msgNode
                        .conditional_extract()
                        .set_extract_weight_type(_),
                      _.msgNode
                        .conditional_extract()
                        .filter_info()
                        .set_appid_release_recency_months(parseInt(_)),
                      _.msgNode
                        .conditional_extract()
                        .weight_info()
                        .set_appid_release_recency_bias(parseFloat(_)),
                      _.msgNode
                        .conditional_extract()
                        .weight_info()
                        .set_input_number(parseInt(_)),
                      _.msgNode
                        .conditional_extract()
                        .weight_info()
                        .set_input_strength(parseFloat(_)),
                      _.msgNode.conditional_extract().set_compact_table(_),
                      _.msgNode
                        .conditional_extract()
                        .set_extracted_compact_table(_),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector()),
            _ = _.splice(0, 1)[0];
          return _.createElement(
            "div",
            {
              className: (0, _._)(
                _.FlowNode,
                _.ConditionalSwapNode,
                _.Preprocessing,
              ),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              _._,
              {
                type: "target",
                position: _._.Left,
                _: _(_.connector_id()),
                style: {
                  top: "50%",
                },
              },
              _.createElement(
                "div",
                {
                  className: _.ConnectorID,
                },
                _.connector_id(),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_ConditionalSwap"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment());
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Onehot"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Onehot"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 300,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.Buttons,
                },
                _.createElement(
                  _._,
                  {
                    onClick: () => {
                      _.msgNode.set_comment(__webpack_require__),
                        _(_),
                        _.fnSetPopupVisible(!1);
                    },
                  },
                  (0, _._)("#SteamLearn_Confirm"),
                ),
                _.createElement(
                  _._,
                  {
                    onClick: () => _.fnSetPopupVisible(!1),
                  },
                  (0, _._)("#SteamLearn_Cancel"),
                ),
              ),
            ),
          );
        };
      var _ = __webpack_require__("chunkid");
      function _(_) {
        switch (_) {
          case 1:
            return "RELU";
          case 2:
            return "ELU";
          case 3:
            return "TANH";
          case 4:
            return "SIGMOID";
          case 5:
            return "LINEAR";
        }
        return "";
      }
      function _(_) {
        switch (_) {
          case 0:
            return "None";
          case 1:
            return "L1";
          case 2:
            return "L2";
          case 3:
            return "ElasticNet (L1+L2)";
        }
        return "";
      }
      const _ = (_) => {
          const _ = _.data.msgNode,
            [__webpack_require__, _] = _.useState(!1),
            { msgWorkingProjectConfig: _ } = _(),
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.DenseNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Dense"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Dense_Width"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.dense().width(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_DenseStack_Activation"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _(_.dense().activation()),
                  ),
                ),
                0 != _.dense().regularization() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_DenseStack_Regularization",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _(_.dense().regularization()),
                    ),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(_.msgNode.dense().width().toString()),
            [_, _] = _.useState(_.msgNode.dense().activation()),
            [_, _] = _.useState(_.msgNode.dense().regularization());
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.dense().width().toString()),
              _(_.msgNode.dense().activation()),
              _(_.msgNode.dense().regularization());
          }, [_]);
          let _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Activation_RELU",
                ),
                value: 1,
              },
              {
                label: (0, _._)("#SteamLearn_Config_Node_Train_Activation_ELU"),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Activation_TANH",
                ),
                value: 3,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Activation_SIGMOID",
                ),
                value: 4,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Activation_LINEAR",
                ),
                value: 5,
              },
            ],
            _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Regularization_None",
                ),
                value: 0,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Regularization_L1",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Regularization_L2",
                ),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Regularization_L1_L2",
                ),
                value: 3,
              },
            ];
          _.useId();
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_DenseStack"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_DenseStack"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Dense_Width"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Dense_WidthDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 8196),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_Activation"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_ActivationDesc"),
                ),
                _.createElement(
                  "select",
                  {
                    className: _.InputSelect,
                    value: _,
                    onChange: (_) => _(parseInt(_.target.value)),
                  },
                  _.map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: _.value,
                        value: _.value,
                      },
                      _.label,
                    ),
                  ),
                ),
                1 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_DenseStack_ActivationDescSub1",
                    ),
                  ),
                2 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_DenseStack_ActivationDescSub2",
                    ),
                  ),
                3 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_DenseStack_ActivationDescSub3",
                    ),
                  ),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_Regularization"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_DenseStack_RegularizationDesc",
                  ),
                ),
                _.createElement(
                  "select",
                  {
                    className: _.InputSelect,
                    value: _,
                    onChange: (_) => _(parseInt(_.target.value)),
                  },
                  _.map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: _.value,
                        value: _.value,
                      },
                      _.label,
                    ),
                  ),
                ),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.dense().set_width(parseInt(_)),
                      _.msgNode.dense().set_activation(_),
                      _.msgNode.dense().set_regularization(_),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.Conv1DNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Conv1D"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Conv1D_Filters"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.conv_1d().filters(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Conv1D_KernelSize"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.conv_1d().kernel_size(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Conv1D_Strides"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.conv_1d().strides(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_DenseStack_Activation"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _(_.conv_1d().activation()),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(_.msgNode.conv_1d().filters().toString()),
            [_, _] = _.useState(_.msgNode.conv_1d().kernel_size().toString()),
            [_, _] = _.useState(
              _.msgNode.conv_1d()?.strides().toString() || "1",
            ),
            [_, _] = _.useState(_.msgNode.conv_1d().activation());
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.conv_1d().filters().toString()),
              _(_.msgNode.conv_1d().kernel_size().toString()),
              _(_.msgNode.conv_1d().strides().toString());
          }, [_]);
          let _ = [
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_Activation_RELU"),
              value: 1,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_Activation_ELU"),
              value: 2,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_Activation_TANH"),
              value: 3,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Train_Activation_SIGMOID",
              ),
              value: 4,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Train_Activation_LINEAR",
              ),
              value: 5,
            },
          ];
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Conv1D"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Conv1D"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Conv1D_Filters"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Conv1D_FiltersDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Conv1D_KernelSize"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Conv1D_KernelSizeDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Conv1D_Strides"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Conv1D_StridesDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, void 0),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.Option,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionTitle,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_Activation"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.OptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_ActivationDesc"),
                ),
                _.createElement(
                  "select",
                  {
                    className: _.InputSelect,
                    value: _,
                    onChange: (_) => _(parseInt(_.target.value)),
                  },
                  _.map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: _.value,
                        value: _.value,
                      },
                      _.label,
                    ),
                  ),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.conv_1d().set_filters(parseInt(_)),
                      _.msgNode.conv_1d().set_kernel_size(parseInt(_)),
                      _.msgNode.conv_1d().set_strides(parseInt(_)),
                      _.msgNode.conv_1d().set_activation(_),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.DenseStackNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_DenseStack"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                (0, _._)(0, _.dense_stack().width().length - 1).map((_) =>
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                      key: _,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_DenseStack_LayerWidth",
                        _ + 1,
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.dense_stack().width()[_],
                    ),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_DenseStack_DropoutPct"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    `${_.dense_stack().dropout_pct()}%`,
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_DenseStack_Activation"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _(_.dense_stack().activation()),
                  ),
                ),
                0 != _.dense_stack().regularization() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_DenseStack_Regularization",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _(_.dense_stack().regularization()),
                    ),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(
              _.msgNode.dense_stack().width().length.toString(),
            ),
            [_, _] = _.useState(
              _.msgNode
                .dense_stack()
                .width()
                .map((_) => _.toString()),
            ),
            [_, _] = _.useState(
              _.msgNode.dense_stack().dropout_pct().toString(),
            ),
            [_, _] = _.useState(_.msgNode.dense_stack().activation()),
            [_, _] = _.useState(_.msgNode.dense_stack().regularization());
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.dense_stack().width().length.toString()),
              _(
                _.msgNode
                  .dense_stack()
                  .width()
                  .map((_) => _.toString()),
              ),
              _(_.msgNode.dense_stack().dropout_pct().toString()),
              _(_.msgNode.dense_stack().activation()),
              _(_.msgNode.dense_stack().regularization());
          }, [_.bVisible, _.msgNode]);
          let _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Activation_RELU",
                ),
                value: 1,
              },
              {
                label: (0, _._)("#SteamLearn_Config_Node_Train_Activation_ELU"),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Activation_TANH",
                ),
                value: 3,
              },
            ],
            _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Regularization_None",
                ),
                value: 0,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Regularization_L1",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Regularization_L2",
                ),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Regularization_L1_L2",
                ),
                value: 3,
              },
            ];
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_DenseStack"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_DenseStack"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_NumLayers"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 6),
                  fnSetValue: (_) =>
                    ((_) => {
                      _(_);
                      const _ = parseInt(_);
                      if (_ < _.length) _.splice(_);
                      else
                        for (let _ = _.length; _ < _; _++)
                          _.push(_[_.length - 1]);
                    })(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_LayerWidths"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_DenseStack_LayerWidthsDesc",
                  ),
                ),
                (0, _._)(0, _.length - 1).map((_) =>
                  _.createElement(_, {
                    key: _,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _[_],
                    fnValidateValue: (_) => _(_, 1, 8196),
                    fnSetValue: (_) =>
                      ((_, _) => {
                        if (_ < 0 || _ >= _.length) return;
                        let _ = [..._];
                        (_[_] = _), _(_);
                      })(_, _),
                  }),
                ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_DropoutPct"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_DropoutPctDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, 99),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_Activation"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_ActivationDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.Option,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionTitle,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_Regularization"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.OptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_DenseStack_RegularizationDesc",
                  ),
                ),
                _.createElement(
                  "select",
                  {
                    className: _.InputSelect,
                    value: _,
                    onChange: (_) => _(parseInt(_.target.value)),
                  },
                  _.map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: _.value,
                        value: _.value,
                      },
                      _.label,
                    ),
                  ),
                ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode
                      .dense_stack()
                      .set_width(_.map((_) => parseInt(_))),
                      _.msgNode.dense_stack().set_dropout_pct(parseInt(_)),
                      _.msgNode.dense_stack().set_activation(_),
                      _.msgNode.dense_stack().set_regularization(_),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.DotNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Dot"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Dot_Normalize"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.dot().normalize()
                      ? (0, _._)("#SteamLearn_Yes")
                      : (0, _._)("#SteamLearn_No"),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(_.msgNode.dot().normalize());
          _.useEffect(() => {
            _(_.msgNode.comment()), _(_.msgNode.dot().normalize());
          }, [_]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Dot"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Dot"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Dot_Normalize"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Dot_NormalizeDesc"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.CheckboxWithLabel,
                  },
                  _.createElement("input", {
                    type: "checkbox",
                    _: "editnormalize",
                    checked: _,
                    onChange: () => _(!_),
                  }),
                  _.createElement(
                    "label",
                    {
                      htmlFor: "editnormalize",
                    },
                    (0, _._)("#SteamLearn_Config_Node_Dot_Normalize"),
                  ),
                ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.dot().set_normalize(_),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.DropoutNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Dropout"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_DenseStack_DropoutPct"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    `${_.dropout().dropout_pct()}%`,
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(_.msgNode.dropout().dropout_pct().toString());
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.dropout().dropout_pct().toString());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Dropout"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Dropout"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_DropoutPct"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_DropoutPctDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, 99),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.dropout().set_dropout_pct(parseInt(_)),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector()),
            _ = _.embedding().compact_table().length > 0;
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.EmbeddingNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Embedding"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Embedding_MaxValue"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _
                      ? _.embedding().compact_table()
                      : _.embedding().max_value(),
                  ),
                ),
                _.embedding().embed_name()?.length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)("#SteamLearn_Config_Node_Embedding_Name"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.embedding().embed_name(),
                    ),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Embedding_Width"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.embedding().embedding_width(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Embedding_Flatten"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.embedding().flatten()
                      ? (0, _._)("#SteamLearn_Yes")
                      : (0, _._)("#SteamLearn_No"),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(
              _.msgNode.embedding().compact_table().length > 0
                ? _.msgNode.embedding().compact_table()
                : _.msgNode.embedding().max_value().toString(),
            ),
            [_, _] = _.useState(
              _.msgNode.embedding().embedding_width().toString(),
            ),
            [_, _] = _.useState(_.msgNode.embedding().flatten()),
            [_, _] = _.useState(_.msgNode.embedding().export_name()),
            [_, _] = _.useState(_.msgNode.embedding().embed_name());
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(
                _.msgNode.embedding().compact_table().length > 0
                  ? _.msgNode.embedding().compact_table()
                  : _.msgNode.embedding().max_value().toString(),
              ),
              _(_.msgNode.embedding().embedding_width().toString()),
              _(_.msgNode.embedding().flatten()),
              _(_.msgNode.embedding().export_name());
          }, [_]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Embedding"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Embedding"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Embedding_Name"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Embedding_NameDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Embedding_MaxValue"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Embedding_MaxValueDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1) || _(_, _),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Embedding_Width"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Embedding_WidthDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Embedding_OutputShape"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Embedding_OutputShapeDesc"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.CheckboxWithLabel,
                  },
                  _.createElement("input", {
                    type: "checkbox",
                    _: "editflatten",
                    checked: _,
                    onChange: () => _(!_),
                  }),
                  _.createElement(
                    "label",
                    {
                      htmlFor: "editflatten",
                    },
                    (0, _._)("#SteamLearn_Config_Node_Embedding_Flatten"),
                  ),
                ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Extract_Name"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Extract_NameDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    const _ = _(_, 1),
                      _ = _(_, _);
                    _
                      ? (_.msgNode
                          .embedding()
                          .set_max_value(parseInt(_.length > 0 ? _ : "100")),
                        _.msgNode.embedding().set_compact_table(""))
                      : _ &&
                        (_.msgNode.embedding().set_compact_table(_),
                        _.msgNode.embedding().set_max_value(0)),
                      _.msgNode.embedding().set_embedding_width(parseInt(_)),
                      _.msgNode.embedding().set_flatten(_),
                      _.msgNode.embedding().set_export_name(_),
                      _.msgNode.embedding().set_embed_name(_),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = (0, _._)();
          _.useEffect(() => {
            const _ = _.connectors()
              .find((_) => _.is_input_connector())
              ?.connector_id();
            if (!_)
              return void (0, _._)(
                !1,
                `No input connector on node ${_.toObject()}`,
              );
            const {
                msgIncomingNode: __webpack_require__,
                nIncomingConnectorID: _,
              } = _(_, _),
              _ = _.connectors().filter((_) => !_.is_input_connector()).length;
            let _ = _;
            if (__webpack_require__) {
              const _ = _(_, __webpack_require__, _);
              (0, _._)(
                _.length <= 1,
                `Input tensor to STEAMLEARN_NODE_TYPE_EXPLODE not one-dimensional! ( ${_.length} ) (node ${__webpack_require__.node_id()}, connector ${_}`,
              ),
                1 == _.length && (_ = Math.min(9, _[0]));
            } else _ = 0;
            if (_ > _) {
              const _ = _ - _,
                _ = _(_, _);
              for (let _ = 0; _ < _; _++) {
                let _ = new _();
                _.set_connector_id(_[_]),
                  _.set_is_input_connector(!1),
                  _.add_connectors(_);
              }
            } else if (_ < _) {
              let _ = [];
              _.push(
                ..._.connectors()
                  .filter((_) => !_.is_input_connector())
                  .slice(_)
                  .map((_) => _.connector_id()),
              );
              for (let _ of _.project_nodes())
                for (let _ of __webpack_require__.connectors())
                  _.set_linked_connector_ids(
                    _.linked_connector_ids().filter((_) => !_.includes(_)),
                  );
              _.set_connectors([
                ..._.connectors().filter((_) => _.is_input_connector()),
                ..._.connectors()
                  .filter((_) => !_.is_input_connector())
                  .slice(0, _),
              ]);
            }
            _ != _ && _(_),
              setTimeout(() => {
                for (const _ of _.project_nodes())
                  12 == _.type() && _(_(_.node_id()));
              }, 0.1);
          }, [_, _, _]);
          const _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.ExplodeNode, _.Preprocessing),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Explode"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment());
          _.useEffect(() => {
            _(_.msgNode.comment());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Explode"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Explode"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 300,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.Buttons,
                },
                _.createElement(
                  _._,
                  {
                    onClick: () => {
                      _.msgNode.set_comment(__webpack_require__),
                        _(_),
                        _.fnSetPopupVisible(!1);
                    },
                  },
                  (0, _._)("#SteamLearn_Confirm"),
                ),
                _.createElement(
                  _._,
                  {
                    onClick: () => _.fnSetPopupVisible(!1),
                  },
                  (0, _._)("#SteamLearn_Cancel"),
                ),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ =
              ((0, _._)(),
              _.data.msgNode
                .connectors()
                .filter((_) => _.is_input_connector())),
            _ = _.data.msgNode
              .connectors()
              .filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(
                _.FlowNode,
                _.ExternalEmbeddingNode,
                _.Preprocessing,
              ),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_ExternalEmbedding"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_ProjectID",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.external_embedding().project_id(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_FetchID",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.external_embedding().fetch_id(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_TrainID",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.external_embedding().train_id(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_ExternalEmbedding_Name"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.external_embedding().embedding_name(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_CompactTable",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.external_embedding().compact_table(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_ExcludeMissing",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.external_embedding().exclude_missing()
                      ? (0, _._)("#SteamLearn_Yes")
                      : (0, _._)("#SteamLearn_No"),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] =
              (_.msgNode.connectors().filter((_) => _.is_input_connector())
                .length,
              _.msgNode.connectors().filter((_) => !_.is_input_connector())
                .length,
              _.useState(_.msgNode.comment())),
            [_, _] = _.useState(
              _.msgNode.external_embedding().project_id()?.toString() || "0",
            ),
            [_, _] = _.useState(
              _.msgNode.external_embedding().fetch_id()?.toString() || "0",
            ),
            [_, _] = _.useState(
              _.msgNode.external_embedding().train_id()?.toString() || "0",
            ),
            [_, _] = _.useState(
              _.msgNode.external_embedding().embedding_name() || "",
            ),
            [_, _] = _.useState(_.msgNode.external_embedding().compact_table()),
            [_, _] = _.useState(
              _.msgNode.external_embedding().exclude_missing(),
            );
          return (
            _.useEffect(() => {
              _(_.msgNode.comment()),
                _(
                  _.msgNode.external_embedding().project_id().toString() || "0",
                ),
                _(_.msgNode.external_embedding().train_id().toString() || "0"),
                _(_.msgNode.external_embedding().embedding_name() || ""),
                _(_.msgNode.external_embedding().compact_table()),
                _(_.msgNode.external_embedding().exclude_missing());
            }, [_.bVisible, _.msgNode]),
            _.createElement(
              _._,
              {
                active: _.bVisible,
                onDismiss: () => _.fnSetPopupVisible(!1),
                modalClassName: "NodeEditDialog",
              },
              _.createElement(
                "div",
                {
                  className: _.NodeHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_ExternalEmbedding"),
                _.createElement(
                  "div",
                  {
                    className: _.SubHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Tooltip_ExternalEmbedding"),
                ),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeBody,
                },
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Comment"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                  ),
                  _.createElement(_, {
                    isText: !0,
                    dontUpdateProject: !0,
                    width: 200,
                    fnGetInitialValue: () => __webpack_require__,
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_ProjectID",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_ProjectIDDesc",
                    ),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 0, void 0),
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_FetchID",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_FetchIDDesc",
                    ),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 0, void 0),
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_TrainID",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_TrainIDDesc",
                    ),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 0, void 0),
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_ExternalEmbedding_Name"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_NameDesc",
                    ),
                  ),
                  _.createElement(_, {
                    width: 200,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_CompactTable",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_CompactTableDesc",
                    ),
                  ),
                  _.createElement(_, {
                    width: 200,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_ExcludeMissing",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalEmbedding_ExcludeMissingDesc",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.CheckboxWithLabel,
                    },
                    _.createElement("input", {
                      type: "checkbox",
                      _: "editexcludemissing",
                      checked: _,
                      onChange: () => _(!_),
                    }),
                    _.createElement(
                      "label",
                      {
                        htmlFor: "editexcludemissing",
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_ExternalEmbedding_ExcludeMissing",
                      ),
                    ),
                  ),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.Buttons,
                },
                _.createElement(
                  _._,
                  {
                    onClick: () => {
                      _.msgNode
                        .external_embedding()
                        .set_project_id(parseInt(_)),
                        _.msgNode
                          .external_embedding()
                          .set_fetch_id(parseInt(_)),
                        _.msgNode
                          .external_embedding()
                          .set_train_id(parseInt(_)),
                        _.msgNode.external_embedding().set_embedding_name(_),
                        _.msgNode.external_embedding().set_compact_table(_),
                        _.msgNode.external_embedding().set_exclude_missing(_),
                        _.msgNode.set_comment(__webpack_require__),
                        _(_),
                        _.fnSetPopupVisible(!1);
                    },
                  },
                  (0, _._)("#SteamLearn_Confirm"),
                ),
                _.createElement(
                  _._,
                  {
                    onClick: () => _.fnSetPopupVisible(!1),
                  },
                  (0, _._)("#SteamLearn_Cancel"),
                ),
              ),
            )
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = (0, _._)(),
            _ = _(_.data.msgNode.external_model().project_id()),
            _ = _.data.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()),
            _ = _.data.msgNode
              .connectors()
              .filter((_) => !_.is_input_connector());
          return (
            _.useEffect(() => {
              setTimeout(() => {
                for (const _ of _.project_nodes())
                  8 == _.type() && _(_(_.node_id()));
              }, 0.1);
            }, [_, _]),
            _.createElement(
              "div",
              {
                className: (0, _._)(_.FlowNode, _.ExternalModelNode, _.Keras),
              },
              _.createElement(_, {
                bVisible: __webpack_require__,
                fnSetPopupVisible: _,
                msgNode: _,
              }),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "target",
                    position: _._.Top,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
              _.createElement(
                "div",
                {
                  className: _.Title,
                },
                _.createElement(
                  "div",
                  {
                    className: _.TitleText,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Title_ExternalModel"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeID,
                  },
                  _.node_id(),
                ),
                _.createElement("div", {
                  className: _.EditGear,
                  onClick: () => _(!0),
                }),
                _.createElement("div", {
                  className: _.Delete,
                  onClick: () =>
                    (0, _._)(
                      _.createElement(_._, {
                        strTitle: (0, _._)(
                          "#SteamLearn_Config_Node_Delete_Node",
                        ),
                        strDescription: (0, _._)(
                          "#SteamLearn_Config_Node_Delete_NodeDetails",
                        ),
                        onOK: () => _(_, _.node_id()),
                      }),
                      window,
                    ),
                }),
              ),
              _.createElement("div", {
                className: _.TitleUnderBar,
              }),
              _.createElement(
                "div",
                {
                  className: _.Body,
                },
                _.createElement(
                  "div",
                  {
                    className: _.CenterSection,
                  },
                  _.comment().length > 0 &&
                    _.createElement(
                      "div",
                      {
                        className: _.Comment,
                      },
                      _.comment(),
                    ),
                  _ &&
                    _.createElement(
                      "div",
                      {
                        className: _.LabelValue,
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.Label,
                        },
                        (0, _._)(
                          "#SteamLearn_Config_Node_ExternalModel_ProjectName",
                        ),
                      ),
                      _.createElement(
                        "div",
                        {
                          className: _.Value,
                        },
                        _,
                      ),
                    ),
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_ExternalModel_ProjectID",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.external_model().project_id(),
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)("#SteamLearn_Config_Node_ExternalModel_TrainID"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.external_model().train_id(),
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)("#SteamLearn_Config_Node_ExternalModel_Name"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.external_model().named_inference_name(),
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)("#SteamLearn_Config_Node_ExternalModel_Freeze"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.external_model().freeze_weights()
                        ? (0, _._)("#SteamLearn_Yes")
                        : (0, _._)("#SteamLearn_No"),
                    ),
                  ),
                  _.external_model().freeze_weights() &&
                    _.createElement(
                      "div",
                      {
                        className: _.LabelValue,
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.Label,
                        },
                        (0, _._)(
                          "#SteamLearn_Config_Node_ExternalModel_UnfrozenLayers",
                        ),
                      ),
                      _.createElement(
                        "div",
                        {
                          className: _.Value,
                        },
                        _.external_model().unfrozen_layers(),
                      ),
                    ),
                ),
              ),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "source",
                    position: _._.Bottom,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
            )
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            _ = _.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()).length,
            _ = _.msgNode
              .connectors()
              .filter((_) => !_.is_input_connector()).length,
            [_, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(__webpack_require__.toString()),
            [_, _] = _.useState(_.toString()),
            [_, _] = _.useState(
              _.msgNode.external_model().project_id()?.toString() || "0",
            ),
            [_, _] = _.useState(
              _.msgNode.external_model().train_id()?.toString() || "0",
            ),
            [_, _] = _.useState(
              _.msgNode.external_model().named_inference_name() || "",
            ),
            [_, _] = _.useState(_.msgNode.external_model().freeze_weights()),
            [_, _] = _.useState(
              _.msgNode.external_model().unfrozen_layers()?.toString() || "0",
            );
          return (
            _.useEffect(() => {
              _(_.msgNode.comment()),
                _(_.msgNode.external_model().project_id().toString() || "0"),
                _(_.msgNode.external_model().train_id().toString() || "0"),
                _(_.msgNode.external_model().named_inference_name() || ""),
                _(__webpack_require__.toString()),
                _(_.msgNode.external_model().freeze_weights()),
                _(
                  _.msgNode.external_model().unfrozen_layers()?.toString() ||
                    "0",
                );
            }, [_.bVisible, _.msgNode, _, _]),
            _.createElement(
              _._,
              {
                active: _.bVisible,
                onDismiss: () => _.fnSetPopupVisible(!1),
                modalClassName: "NodeEditDialog",
              },
              _.createElement(
                "div",
                {
                  className: _.NodeHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_ExternalModel"),
                _.createElement(
                  "div",
                  {
                    className: _.SubHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Tooltip_ExternalModel"),
                ),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeBody,
                },
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Comment"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                  ),
                  _.createElement(_, {
                    isText: !0,
                    dontUpdateProject: !0,
                    width: 200,
                    fnGetInitialValue: () => _,
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_ExternalModel_NumInputs"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalModel_NumInputsDesc",
                    ),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 1, 8),
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalModel_NumOutputs",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalModel_NumOutputsDesc",
                    ),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 1, 8),
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_ExternalModel_ProjectID"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalModel_ProjectIDDesc",
                    ),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 0, void 0),
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_ExternalModel_TrainID"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalModel_TrainIDDesc",
                    ),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 0, void 0),
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_ExternalModel_Name"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)("#SteamLearn_Config_Node_ExternalModel_NameDesc"),
                  ),
                  _.createElement(_, {
                    width: 200,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_ExternalModel_Freeze"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalModel_FreezeDesc",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.CheckboxWithLabel,
                    },
                    _.createElement("input", {
                      type: "checkbox",
                      _: "editfreeze",
                      checked: _,
                      onChange: () => _(!_),
                    }),
                    _.createElement(
                      "label",
                      {
                        htmlFor: "editfreeze",
                      },
                      (0, _._)("#SteamLearn_Config_Node_ExternalModel_Freeze"),
                    ),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalModel_UnfrozenLayers",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_ExternalModel_UnfrozenLayersDesc",
                    ),
                  ),
                  _.createElement(_, {
                    width: 200,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 0, void 0),
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.Buttons,
                },
                _.createElement(
                  _._,
                  {
                    onClick: () => {
                      const _ = parseInt(_),
                        _ = parseInt(_);
                      if (_ > _) {
                        const _ = _ - _,
                          _ = _(_, _);
                        for (let _ = 0; _ < _; _++) {
                          let _ = new _();
                          __webpack_require__.set_connector_id(_[_]),
                            __webpack_require__.set_is_input_connector(!0),
                            _.msgNode.add_connectors(_);
                        }
                      } else if (_ < _) {
                        const _ = _.msgNode
                          .connectors()
                          .filter((_) => _.is_input_connector())
                          .slice(_)
                          .map((_) => _.connector_id());
                        for (let _ of _.project_nodes())
                          for (let _ of _.connectors())
                            _.set_linked_connector_ids(
                              _.linked_connector_ids().filter(
                                (_) => !__webpack_require__.includes(_),
                              ),
                            );
                        _.msgNode.set_connectors([
                          ..._.msgNode
                            .connectors()
                            .filter((_) => !_.is_input_connector()),
                          ..._.msgNode
                            .connectors()
                            .filter((_) => _.is_input_connector())
                            .slice(0, _),
                        ]);
                      }
                      if ((_(_), _ > _)) {
                        const _ = _ - _,
                          _ = _(_, _);
                        for (let _ = 0; _ < _; _++) {
                          let _ = new _();
                          __webpack_require__.set_connector_id(_[_]),
                            __webpack_require__.set_is_input_connector(!1),
                            _.msgNode.add_connectors(_);
                        }
                      } else if (_ < _) {
                        const _ = _.msgNode
                          .connectors()
                          .filter((_) => !_.is_input_connector())
                          .slice(_)
                          .map((_) => _.connector_id());
                        for (let _ of _.project_nodes())
                          for (let _ of _.connectors())
                            _.set_linked_connector_ids(
                              _.linked_connector_ids().filter(
                                (_) => !__webpack_require__.includes(_),
                              ),
                            );
                        _.msgNode.set_connectors([
                          ..._.msgNode
                            .connectors()
                            .filter((_) => !_.is_input_connector())
                            .slice(0, _),
                          ..._.msgNode
                            .connectors()
                            .filter((_) => _.is_input_connector()),
                        ]);
                      }
                      _.msgNode.external_model().set_project_id(parseInt(_)),
                        _.msgNode.external_model().set_train_id(parseInt(_)),
                        _.msgNode.external_model().set_named_inference_name(_),
                        _.msgNode.external_model().set_freeze_weights(_),
                        _.msgNode
                          .external_model()
                          .set_unfrozen_layers(parseInt(_)),
                        _.msgNode.set_comment(_),
                        _(_),
                        _.fnSetPopupVisible(!1);
                    },
                  },
                  (0, _._)("#SteamLearn_Confirm"),
                ),
                _.createElement(
                  _._,
                  {
                    onClick: () => _.fnSetPopupVisible(!1),
                  },
                  (0, _._)("#SteamLearn_Cancel"),
                ),
              ),
            )
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = (0, _._)(),
            _ = 1 == _.extract().mode(),
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector()),
            _ = _.filter((_, _) => (_ + 1) % 2 == 0 && 0 != _),
            _ = _.filter((_, _) => (_ + 1) % 2 == 1 && 0 != _),
            _ = _.filter((_, _) => _ && 0 == _);
          _.useEffect(() => {
            setTimeout(() => {
              for (const _ of _.project_nodes())
                21 == _.type() && _(_(_.node_id()));
            }, 0.1);
          }, [_, _]);
          const _ = Math.max(78, 20 * _.length);
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.ExtractNode, _.Preprocessing),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  toolTipContent: `Input ${_}`,
                  direction: "top",
                },
                _.createElement(
                  _._,
                  {
                    key: _,
                    type: "target",
                    position: _._.Top,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Extract"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Extract_InputType"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    0 == _.extract().input_type() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_InputType_Misc",
                      ),
                    1 == _.extract().input_type() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_InputType_AppID",
                      ),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Extract_Mode"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    0 == _.extract().mode() &&
                      (0, _._)("#SteamLearn_Config_Node_Extract_Mode_Extract"),
                    1 == _.extract().mode() &&
                      (0, _._)("#SteamLearn_Config_Node_Extract_Mode_PosNeg"),
                  ),
                ),
                1 == _.extract().mode() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)("#SteamLearn_Config_Node_Extract_PosSamplePct"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      `${_.extract().positive_sample_percent()}%`,
                    ),
                  ),
                1 == _.extract().exclusion() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)("#SteamLearn_Config_Node_Extract_Exclusion"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_Exclusion_AppIDRecency",
                      ),
                    ),
                  ),
                1 == _.extract().exclusion() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_Selection_Recency",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      `${_.extract().recency_months()} months`,
                    ),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Extract_Selection"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    0 == _.extract().selection() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_Selection_Random",
                      ),
                    1 == _.extract().selection() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_Selection_First",
                      ),
                    2 == _.extract().selection() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_Selection_Last",
                      ),
                    3 == _.extract().selection() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_Selection_LinearBias",
                      ),
                    4 == _.extract().selection() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_Selection_InputBias",
                      ),
                    5 == _.extract().selection() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_Selection_Recency",
                      ),
                  ),
                ),
                _.extract().fest_name()?.length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_Exclusion_Fest",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.extract().fest_name(),
                    ),
                  ),
                3 == _.extract().selection() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_Selection_LinearBias",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      `${_.extract().bias_start().toFixed(2)} - ${_.extract().bias_end().toFixed(2)}`,
                    ),
                  ),
                4 == _.extract().selection() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_Extract_Selection_InputBias",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      `Input ${_.extract().input_bias_input_number().toFixed(0)}, weight ${_.extract().input_bias_strength().toFixed(2)}`,
                    ),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  toolTipContent: `Filtered Output ${_}`,
                  direction: "top",
                },
                _.createElement(
                  _._,
                  {
                    type: "source",
                    position: _._.Bottom,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                ),
              );
            }),
            _.map((_, _) => {
              const _ = Math.floor(((_ + 1) * _) / (_.length + 1)),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  toolTipContent: `Pos/Neg (1 or -1) ${_}`,
                  direction: "top",
                },
                _.createElement(
                  _._,
                  {
                    key: _,
                    type: "source",
                    position: _._.Right,
                    _: _,
                    style: {
                      top: _ + 24,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                ),
              );
            }),
            _.map((_, _) => {
              const _ = Math.floor(((_ + 1) * _) / (_.length + 1)),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  toolTipContent: `Extracted Output ${_}`,
                  direction: "top",
                },
                _.createElement(
                  _._,
                  {
                    key: _,
                    type: "source",
                    position: _._.Left,
                    _: _,
                    style: {
                      top: _ + 24,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            _ = _.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()).length,
            [_, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(__webpack_require__.toString()),
            [_, _] = _.useState(_.msgNode.extract().input_type()),
            [_, _] = _.useState(_.msgNode.extract().mode()),
            [_, _] = _.useState(_.msgNode.extract().exclusion()),
            [_, _] = _.useState(_.msgNode.extract().selection()),
            [_, _] = _.useState(
              _.msgNode.extract().recency_months().toFixed(0),
            ),
            [_, _] = _.useState(_.msgNode.extract().fest_name() || ""),
            [_, _] = _.useState(_.msgNode.extract().bias_start().toFixed(2)),
            [_, _] = _.useState(_.msgNode.extract().bias_end().toFixed(2)),
            [_, _] = _.useState(
              _.msgNode.extract().input_bias_input_number().toFixed(0),
            ),
            [_, _] = _.useState(
              _.msgNode.extract().input_bias_strength().toFixed(2),
            ),
            [_, _] = _.useState(
              _.msgNode.extract().positive_sample_percent().toFixed(0),
            ),
            [_, _] = _.useState(_.msgNode.extract().compact_table()),
            [_, _] = _.useState(_.msgNode.extract().extracted_compact_table());
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(__webpack_require__.toString()),
              _(_.msgNode.extract().input_type()),
              _(_.msgNode.extract().mode()),
              _(_.msgNode.extract().exclusion()),
              _(_.msgNode.extract().selection()),
              _(_.msgNode.extract().recency_months().toFixed(0)),
              _(_.msgNode.extract().fest_name() || ""),
              _(_.msgNode.extract().bias_start().toFixed(2)),
              _(_.msgNode.extract().bias_end().toFixed(2)),
              _(_.msgNode.extract().input_bias_input_number().toFixed(0)),
              _(_.msgNode.extract().input_bias_strength().toFixed(2)),
              _(_.msgNode.extract().positive_sample_percent().toFixed(0)),
              _(_.msgNode.extract().compact_table()),
              _(_.msgNode.extract().extracted_compact_table());
          }, [_.bVisible, _.msgNode, _]);
          let _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Extract_InputType_Misc",
                ),
                value: 0,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Extract_InputType_AppID",
                ),
                value: 1,
              },
            ],
            _ = [
              {
                label: (0, _._)("#SteamLearn_Config_Node_Extract_Mode_Extract"),
                value: 0,
              },
              {
                label: (0, _._)("#SteamLearn_Config_Node_Extract_Mode_PosNeg"),
                value: 1,
              },
            ],
            _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Extract_Exclusion_None",
                ),
                value: 0,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Extract_Exclusion_AppIDRecency",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Extract_Exclusion_Fest",
                ),
                value: 2,
              },
            ],
            _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Extract_Selection_Random",
                ),
                value: 0,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Extract_Selection_First",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Extract_Selection_Last",
                ),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Extract_Selection_LinearBias",
                ),
                value: 3,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Extract_Selection_InputBias",
                ),
                value: 4,
              },
            ];
          1 == _ &&
            _.push({
              label: (0, _._)(
                "#SteamLearn_Config_Node_Extract_Selection_Recency",
              ),
              value: 5,
            });
          const _ = 1 == _,
            _ = 1 == _,
            _ = 3 == _,
            _ = 4 == _;
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Extract"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Extract"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Extract_NumInputs"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Extract_NumInputsDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 5),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Extract_InputType"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Extract_InputTypeDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Extract_Mode"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Extract_ModeDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_Config_Node_Extract_PosSamplePct",
                  ),
                  labelTooltip: (0, _._)(
                    "#SteamLearn_Config_Node_Extract_PosSamplePctDesc",
                  ),
                  smallLabel: !0,
                  hidden: !_,
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, 100),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _ &&
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Extract_Exclusion"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Extract_ExclusionDesc"),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetValue: () => _,
                    fnSetValue: (_) => _(parseInt(_)),
                    options: _,
                  }),
                  _.createElement(_, {
                    label: (0, _._)(
                      "#SteamLearn_Config_Node_Extract_Selection_Recency",
                    ),
                    labelTooltip: (0, _._)(
                      "#SteamLearn_Config_Node_Extract_Selection_AppIDRecencyDesc",
                    ),
                    smallLabel: !0,
                    hidden: 1 != _,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 0, 600),
                    fnSetValue: (_) => _(_),
                  }),
                  _.createElement(_, {
                    label: (0, _._)(
                      "#SteamLearn_Config_Node_Extract_Selection_Fest",
                    ),
                    labelTooltip: (0, _._)(
                      "#SteamLearn_Config_Node_Extract_Selection_FestDesc",
                    ),
                    smallLabel: !0,
                    hidden: 2 != _,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnSetValue: (_) => _(_),
                  }),
                  _.createElement("div", {
                    className: _.Separator,
                  }),
                ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Extract_Selection"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Extract_SelectionDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
                _.createElement(_, {
                  label: (0, _._)("#SteamLearn_Config_Node_Extract_BiasStart"),
                  labelTooltip: (0, _._)(
                    "#SteamLearn_Config_Node_Extract_BiasStartDesc",
                  ),
                  smallLabel: !0,
                  hidden: !_ && 5 != _,
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  digitCount: 2,
                  fnValidateValue: (_) => _(_, 0, 1),
                  fnSetValue: (_) => _(_),
                }),
                _.createElement(_, {
                  label: (0, _._)("#SteamLearn_Config_Node_Extract_BiasEnd"),
                  labelTooltip: (0, _._)(
                    "#SteamLearn_Config_Node_Extract_BiasEndDesc",
                  ),
                  smallLabel: !0,
                  hidden: !_ && 5 != _,
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  digitCount: 2,
                  fnValidateValue: (_) => _(_, 0, 1),
                  fnSetValue: (_) => _(_),
                }),
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_Config_Node_Extract_BiasInputNumber",
                  ),
                  labelTooltip: (0, _._)(
                    "#SteamLearn_Config_Node_Extract_BiasInputNumberDesc",
                  ),
                  smallLabel: !0,
                  hidden: !_,
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) =>
                    _(
                      _,
                      1,
                      _.msgNode
                        .connectors()
                        .filter((_) => _.is_input_connector()).length,
                    ),
                  fnSetValue: (_) => _(_),
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_Config_Node_Extract_BiasStrength",
                  ),
                  labelTooltip: (0, _._)(
                    "#SteamLearn_Config_Node_Extract_BiasStrengthDesc",
                  ),
                  smallLabel: !0,
                  hidden: !_,
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, 4),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              (1 == _ || 1 == _) &&
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Extract_CompactTable"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_Extract_CompactTableDesc",
                    ),
                  ),
                  _.createElement(_, {
                    label: (0, _._)(
                      "#SteamLearn_Config_Node_Extract_CompactTable",
                    ),
                    smallLabel: !0,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, _),
                    fnSetValue: (_) => _(_),
                  }),
                  _.createElement(_, {
                    label: (0, _._)(
                      "#SteamLearn_Config_Node_Extract_ExtractedCompactTable",
                    ),
                    labelTooltip: (0, _._)(
                      "#SteamLearn_Config_Node_Extract_AppID_ExtractedCompactTableDesc",
                    ),
                    smallLabel: !0,
                    hidden: 0 == _,
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => !_(_, _, _.msgNode),
                    fnSetValue: (_) => _(_),
                  }),
                  _.createElement("div", {
                    className: _.Separator,
                  }),
                ),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    const _ = _.msgNode
                        .connectors()
                        .filter((_) => _.is_input_connector()),
                      _ = _.msgNode
                        .connectors()
                        .filter((_) => !_.is_input_connector());
                    let _ = 0,
                      _ = [];
                    const _ = parseInt(_);
                    if ((_ > _ && (_ += 3 * (_ - _)), _ > 0)) {
                      const _ = _(_, _);
                      for (let _ = 0; _ < _; _++) {
                        const _ = _ % 3 == 0;
                        let _ = new _();
                        _.set_connector_id(_[_]),
                          _.set_is_input_connector(_),
                          _.msgNode.add_connectors(_);
                      }
                    }
                    if (_ < _)
                      for (let _ = 0; _ < _.length; _++)
                        _ >= _ &&
                          (_.push(_[_].connector_id()),
                          _.push(_[2 * _ + 1].connector_id()),
                          _.push(_[2 * _ + 2].connector_id()));
                    if (_.length > 0) {
                      for (let _ of _.project_nodes())
                        for (let _ of _.connectors())
                          _.set_linked_connector_ids(
                            _.linked_connector_ids().filter(
                              (_) => !_.includes(_),
                            ),
                          );
                      let _ = _.msgNode
                        .connectors()
                        .filter((_) => !_.includes(_.connector_id()));
                      _.msgNode.set_connectors(_);
                    }
                    _.msgNode.set_comment(_),
                      _.msgNode.extract().set_input_type(_),
                      _.msgNode.extract().set_mode(_),
                      _.msgNode.extract().set_exclusion(_),
                      _.msgNode.extract().set_selection(_),
                      _.msgNode.extract().set_recency_months(parseInt(_)),
                      _.msgNode.extract().set_bias_start(parseFloat(_)),
                      _.msgNode.extract().set_bias_end(parseFloat(_)),
                      _.msgNode
                        .extract()
                        .set_input_bias_input_number(parseInt(_)),
                      _.msgNode
                        .extract()
                        .set_input_bias_strength(parseFloat(_)),
                      _.msgNode
                        .extract()
                        .set_positive_sample_percent(parseInt(_)),
                      _.msgNode.extract().set_compact_table(_),
                      _.msgNode.extract().set_extracted_compact_table(_),
                      _.msgNode.extract().set_fest_name(_),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.FlattenNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Flatten"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment());
          _.useEffect(() => {
            _(_.msgNode.comment());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Flatten"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Flatten"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(
                _.FlowNode,
                _.GlobalAvgPooling1DNode,
                _.Keras,
              ),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_GlobalAvgPooling1D"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment());
          _.useEffect(() => {
            _(_.msgNode.comment());
          }, [_]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_GlobalAvgPooling1D"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_GlobalAvgPooling1D"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(
                _.FlowNode,
                _.GlobalMaxPooling1DNode,
                _.Keras,
              ),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_GlobalMaxPooling1D"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment());
          _.useEffect(() => {
            _(_.msgNode.comment());
          }, [_]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_GlobalMaxPooling1D"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_GlobalMaxPooling1D"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _(_, _.input().input_num()),
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          let _ = 0,
            _ = [],
            _ = !1;
          for (const _ of _.data_source_element_usages())
            _.input() == _.input().input_num() &&
              ((_ += 1),
              _.push(_.data_element_path()),
              6 == _.preprocessing_type() && (_ = !0));
          return (
            _ && (_ = 1),
            _.createElement(
              "div",
              {
                className: (0, _._)(_.FlowNode, _.InputNode, _.Preprocessing),
              },
              _.createElement(_, {
                bVisible: __webpack_require__,
                fnSetPopupVisible: _,
                msgNode: _.data.msgNode,
              }),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "target",
                    position: _._.Top,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
              _.createElement(
                "div",
                {
                  className: _.Title,
                },
                _.createElement(
                  "div",
                  {
                    className: _.TitleText,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_Title_Input",
                    _.data.msgNode.input().input_num(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeID,
                  },
                  _.node_id(),
                ),
                _.createElement("div", {
                  className: _.EditGear,
                  onClick: () => _(!0),
                }),
              ),
              _.createElement("div", {
                className: _.TitleUnderBar,
              }),
              _.createElement(
                "div",
                {
                  className: _.Body,
                },
                _.createElement(
                  "div",
                  {
                    className: _.CenterSection,
                  },
                  _.comment() &&
                    _.createElement(
                      "div",
                      {
                        className: _.Comment,
                      },
                      _.comment(),
                    ),
                  !_.comment() &&
                    _ &&
                    _.createElement(
                      "div",
                      {
                        className: _.Comment,
                      },
                      _,
                    ),
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)("#SteamLearn_Config_Node_Width"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _,
                    ),
                  ),
                  _.input().inference_iterate() &&
                    _.createElement(
                      "div",
                      {
                        className: _.LabelValue,
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.Label,
                        },
                        (0, _._)(
                          "#SteamLearn_Config_Node_Input_InferenceIterate",
                        ),
                      ),
                      _.createElement(
                        "div",
                        {
                          className: _.Value,
                        },
                        (0, _._)("#SteamLearn_Yes"),
                      ),
                    ),
                ),
              ),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "source",
                    position: _._.Bottom,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
            )
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(_.msgNode.input().inference_iterate());
          _.useEffect(() => {
            _(_.msgNode.comment()), _(_.msgNode.input().inference_iterate());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)(
                "#SteamLearn_Config_Node_Title_Input",
                _.msgNode.input().input_num(),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 300,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Input_InferenceIterate"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_Input_InferenceIterateDesc",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.CheckboxWithLabel,
                  },
                  _.createElement("input", {
                    type: "checkbox",
                    _: "editinferenceiterate",
                    checked: _,
                    onChange: () => _(!_),
                  }),
                  _.createElement(
                    "label",
                    {
                      htmlFor: "editinferenceiterate",
                    },
                    (0, _._)("#SteamLearn_Config_Node_Input_InferenceIterate"),
                  ),
                ),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _.msgNode.input().set_inference_iterate(_),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = (0, _._)(),
            _ = _.data.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()),
            _ = _.data.msgNode
              .connectors()
              .filter((_) => !_.is_input_connector());
          return (
            _.useEffect(() => {
              setTimeout(() => {
                for (const _ of _.project_nodes())
                  14 == _.type() && _(_(_.node_id()));
              }, 0.1);
            }, [_, _]),
            _.createElement(
              "div",
              {
                className: (0, _._)(_.FlowNode, _.KMeansNode, _.Preprocessing),
              },
              _.createElement(_, {
                bVisible: __webpack_require__,
                fnSetPopupVisible: _,
                msgNode: _,
              }),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "target",
                    position: _._.Top,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
              _.createElement(
                "div",
                {
                  className: _.Title,
                },
                _.createElement(
                  "div",
                  {
                    className: _.TitleText,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Title_KMeans"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeID,
                  },
                  _.node_id(),
                ),
                _.createElement("div", {
                  className: _.EditGear,
                  onClick: () => _(!0),
                }),
                _.createElement("div", {
                  className: _.Delete,
                  onClick: () =>
                    (0, _._)(
                      _.createElement(_._, {
                        strTitle: (0, _._)(
                          "#SteamLearn_Config_Node_Delete_Node",
                        ),
                        strDescription: (0, _._)(
                          "#SteamLearn_Config_Node_Delete_NodeDetails",
                        ),
                        onOK: () => _(_, _.node_id()),
                      }),
                      window,
                    ),
                }),
              ),
              _.createElement("div", {
                className: _.TitleUnderBar,
              }),
              _.createElement(
                "div",
                {
                  className: _.Body,
                },
                _.createElement(
                  "div",
                  {
                    className: _.CenterSection,
                  },
                  _.comment().length > 0 &&
                    _.createElement(
                      "div",
                      {
                        className: _.Comment,
                      },
                      _.comment(),
                    ),
                  _.kmeans().generate_clusters() &&
                    _.createElement(
                      "div",
                      {
                        className: _.LabelValue,
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.Label,
                        },
                        (0, _._)("#SteamLearn_Config_Node_KMeans_NumClusters"),
                      ),
                      _.createElement(
                        "div",
                        {
                          className: _.Value,
                        },
                        _.kmeans().num_clusters(),
                      ),
                    ),
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)("#SteamLearn_Config_Node_KMeans_Name"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.kmeans().name(),
                    ),
                  ),
                ),
              ),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "source",
                    position: _._.Bottom,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
            )
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(
              _.msgNode.kmeans()?.num_clusters().toString() || "0",
            ),
            [_, _] = _.useState(_.msgNode.kmeans()?.generate_clusters()),
            [_, _] = _.useState(_.msgNode.kmeans()?.name() || "");
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.kmeans()?.num_clusters().toString()),
              _(_.msgNode.kmeans()?.generate_clusters()),
              _(_.msgNode.kmeans()?.name());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_KMeans"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_KMeans"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 300,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_KMeans_Name"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_KMeans_NameDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_KMeans_GenerateClusters"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_KMeans_GenerateClustersDesc",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.CheckboxWithLabel,
                  },
                  _.createElement("input", {
                    type: "checkbox",
                    _: "editflatten",
                    checked: _,
                    onChange: () => _(!_),
                  }),
                  _.createElement(
                    "label",
                    {
                      htmlFor: "editflatten",
                    },
                    (0, _._)("#SteamLearn_Config_Node_KMeans_GenerateClusters"),
                  ),
                ),
                _ &&
                  _.createElement(_, {
                    label: (0, _._)(
                      "#SteamLearn_Config_Node_KMeans_NumClusters",
                    ),
                    labelTooltip: (0, _._)(
                      "#SteamLearn_Config_Node_KMeans_NumClustersDesc",
                    ),
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 1, 1e4),
                    fnSetValue: (_) => _(_),
                  }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _.msgNode.kmeans().set_num_clusters(parseInt(_)),
                      _.msgNode.kmeans().set_name(_),
                      _.msgNode.kmeans().set_generate_clusters(_),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.MaskedHeadNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  toolTipContent: (0, _._)(
                    `#SteamLearn_Config_Node_MaskedHead_Input_${_}`,
                  ),
                  direction: "top",
                },
                _.createElement(
                  _._,
                  {
                    key: _,
                    type: "target",
                    position: _._.Top,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_MaskedHead"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment());
          _.useEffect(() => {
            _(_.msgNode.comment());
          }, [_]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_MaskedHead"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_MaskedHead"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.MaxPooling1DNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_MaxPooling1D"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_MaxPooling1D_PoolSize"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.max_pooling_1d().pool_size(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_MaxPooling1D_Strides"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.max_pooling_1d().strides(),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(
              _.msgNode.max_pooling_1d().pool_size().toString(),
            ),
            [_, _] = _.useState(
              _.msgNode.max_pooling_1d()?.strides().toString() || "1",
            );
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.max_pooling_1d().pool_size().toString()),
              _(_.msgNode.max_pooling_1d().strides().toString());
          }, [_]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_MaxPooling1D"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_MaxPooling1D"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_MaxPooling1D_PoolSize"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_MaxPooling1D_PoolSizeDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_MaxPooling1D_Strides"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_MaxPooling1D_StridesDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, void 0),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.max_pooling_1d().set_pool_size(parseInt(_)),
                      _.msgNode.max_pooling_1d().set_strides(parseInt(_)),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.NamedInferenceNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_NamedInference"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_NamedInference_Name"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.named_inference().name(),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(_.msgNode.named_inference().name());
          _.useEffect(() => {
            _(_.msgNode.comment()), _(_.msgNode.named_inference().name());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_DenseStack"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_DenseStack"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_NamedInference_Name"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.named_inference().set_name(_),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.NormalizeNode, _.Preprocessing),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Normalize"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment());
          _.useEffect(() => {
            _(_.msgNode.comment());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Normalize"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Normalize"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector()),
            _ = _.onehot().compact_table()?.length > 0;
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.OnehotNode, _.Preprocessing),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Onehot"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Onehot_Width"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _ ? _.onehot().compact_table() : _.onehot().width(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Onehot_MultiHot"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.onehot().multi_hot()
                      ? (0, _._)("#SteamLearn_Yes")
                      : (0, _._)("#SteamLearn_No"),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(
              _.msgNode.onehot().compact_table().length > 0
                ? _.msgNode.onehot().compact_table()
                : _.msgNode.onehot().width().toString(),
            ),
            [_, _] = _.useState(_.msgNode.onehot().multi_hot());
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(
                _.msgNode.onehot().compact_table().length > 0
                  ? _.msgNode.onehot().compact_table()
                  : _.msgNode.onehot().width().toString(),
              ),
              _(_.msgNode.onehot().multi_hot());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Onehot"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Onehot"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Onehot_Width"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Onehot_WidthDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  isText: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 8096) || _(_, _),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Onehot_MultiHot"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Onehot_MultiHotDesc"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.CheckboxWithLabel,
                  },
                  _.createElement("input", {
                    type: "checkbox",
                    _: "editmultihot",
                    checked: _,
                    onChange: () => _(!_),
                  }),
                  _.createElement(
                    "label",
                    {
                      htmlFor: "editmultihot",
                    },
                    (0, _._)("#SteamLearn_Config_Node_Onehot_MultiHot"),
                  ),
                ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    const _ = _(_, 1, 8096),
                      _ = _(_, _);
                    _
                      ? (_.msgNode.onehot().set_width(parseInt(_)),
                        _.msgNode.onehot().set_compact_table(""))
                      : _ &&
                        (_.msgNode.onehot().set_compact_table(_),
                        _.msgNode.onehot().set_width(0)),
                      _.msgNode.onehot().set_multi_hot(_),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.Reshape2DNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Reshape2D"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Reshape2D_Dimension"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.reshape_2d().dimension(),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(
              _.msgNode.reshape_2d().dimension()?.toString() || "1",
            );
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.reshape_2d().dimension().toString());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Reshape2D"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Reshape2D"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Reshape2D_Dimension"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Reshape2D_DimensionDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, void 0),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _.msgNode.reshape_2d().set_dimension(parseInt(_)),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = (0, _._)(),
            _ = _.data.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()),
            _ = _.data.msgNode
              .connectors()
              .filter((_) => !_.is_input_connector());
          return (
            _.useEffect(() => {
              setTimeout(() => {
                for (const _ of _.project_nodes())
                  8 == _.type() && _(_(_.node_id()));
              }, 0.1);
            }, [_, _]),
            _.createElement(
              "div",
              {
                className: (0, _._)(_.FlowNode, _.RowExtractNode, _.Keras),
              },
              _.createElement(_, {
                bVisible: __webpack_require__,
                fnSetPopupVisible: _,
                msgNode: _,
              }),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "target",
                    position: _._.Top,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
              _.createElement(
                "div",
                {
                  className: _.Title,
                },
                _.createElement(
                  "div",
                  {
                    className: _.TitleText,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Title_RowExtract"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeID,
                  },
                  _.node_id(),
                ),
                _.createElement("div", {
                  className: _.EditGear,
                  onClick: () => _(!0),
                }),
                _.createElement("div", {
                  className: _.Delete,
                  onClick: () =>
                    (0, _._)(
                      _.createElement(_._, {
                        strTitle: (0, _._)(
                          "#SteamLearn_Config_Node_Delete_Node",
                        ),
                        strDescription: (0, _._)(
                          "#SteamLearn_Config_Node_Delete_NodeDetails",
                        ),
                        onOK: () => _(_, _.node_id()),
                      }),
                      window,
                    ),
                }),
              ),
              _.createElement("div", {
                className: _.TitleUnderBar,
              }),
              _.createElement(
                "div",
                {
                  className: _.Body,
                },
                _.createElement(
                  "div",
                  {
                    className: _.CenterSection,
                  },
                  _.comment().length > 0 &&
                    _.createElement(
                      "div",
                      {
                        className: _.Comment,
                      },
                      _.comment(),
                    ),
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)("#SteamLearn_Config_Node_RowExtract_Row"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.row_extract().row(),
                    ),
                  ),
                ),
              ),
              _.map((_, _) => {
                const _ = Math.floor(
                    ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                  ),
                  _ = _(_.connector_id());
                return _.createElement(
                  _._,
                  {
                    key: _,
                    type: "source",
                    position: _._.Bottom,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                );
              }),
            )
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            _ = _.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()).length,
            _ = _.msgNode
              .connectors()
              .filter((_) => !_.is_input_connector()).length,
            [_, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(
              _.msgNode.row_extract().row()?.toString() || "0",
            );
          return (
            _.useEffect(() => {
              _(_.msgNode.comment()),
                _(_.msgNode.row_extract().row()?.toString() || "0");
            }, [_.bVisible, _.msgNode, _, _]),
            _.createElement(
              _._,
              {
                active: _.bVisible,
                onDismiss: () => _.fnSetPopupVisible(!1),
                modalClassName: "NodeEditDialog",
              },
              _.createElement(
                "div",
                {
                  className: _.NodeHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_RowExtract"),
                _.createElement(
                  "div",
                  {
                    className: _.SubHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Tooltip_RowExtract"),
                ),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeBody,
                },
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Comment"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                  ),
                  _.createElement(_, {
                    isText: !0,
                    dontUpdateProject: !0,
                    width: 200,
                    fnGetInitialValue: () => _,
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_RowExtract_Row"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)("#SteamLearn_Config_Node_RowExtract_RowDesc"),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_),
                    fnSetValue: (_) => _(_),
                  }),
                ),
                _.createElement("div", {
                  className: _.Separator,
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.Buttons,
                },
                _.createElement(
                  _._,
                  {
                    onClick: () => {
                      _.msgNode.row_extract().set_row(parseInt(_)),
                        _.msgNode.set_comment(_),
                        _(_),
                        _.fnSetPopupVisible(!1);
                    },
                  },
                  (0, _._)("#SteamLearn_Confirm"),
                ),
                _.createElement(
                  _._,
                  {
                    onClick: () => _.fnSetPopupVisible(!1),
                  },
                  (0, _._)("#SteamLearn_Cancel"),
                ),
              ),
            )
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(
                _.FlowNode,
                _.SequenceSplitNode,
                _.Preprocessing,
              ),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_SequenceSplit"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_SequenceSplit_HeadSplitChance",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    `${_.sequence_split().head_split_chance()}%`,
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_SequenceSplit_MidSplitChance",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    `${_.sequence_split().mid_split_chance()}%`,
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_SequenceSplit_TailSplitChance",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    `${_.sequence_split().tail_split_chance()}%`,
                  ),
                ),
                _.sequence_split().sequence_table_name().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_SequenceSplit_SequenceTableName",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.sequence_split().sequence_table_name(),
                    ),
                  ),
                _.sequence_split().compact_table_name()?.length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_SequenceSplit_CompactTableName",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.sequence_split().compact_table_name(),
                    ),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(
              _.msgNode.sequence_split().head_split_chance().toString(),
            ),
            [_, _] = _.useState(
              _.msgNode.sequence_split().mid_split_chance().toString(),
            ),
            [_, _] = _.useState(
              _.msgNode.sequence_split().tail_split_chance().toString(),
            ),
            [_, _] = _.useState(
              _.msgNode.sequence_split().sequence_table_name(),
            ),
            [_, _] = _.useState(
              _.msgNode.sequence_split()?.compact_table_name() || "",
            );
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.sequence_split().head_split_chance().toString()),
              _(_.msgNode.sequence_split().mid_split_chance().toString()),
              _(_.msgNode.sequence_split().tail_split_chance().toString()),
              _(_.msgNode.sequence_split().sequence_table_name()),
              _(_.msgNode.sequence_split().compact_table_name());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_SequenceSplit"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_SequenceSplit"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_SequenceSplit_HeadSplitChance",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_SequenceSplit_HeadSplitChance_Desc",
                  ),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, 100),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_SequenceSplit_MidSplitChance",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_SequenceSplit_MidSplitChance_Desc",
                  ),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, 100),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_SequenceSplit_TailSplitChance",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_SequenceSplit_TailSplitChance_Desc",
                  ),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, 100),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_SequenceSplit_SequenceTableName",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_SequenceSplit_SequenceTableName_Desc",
                  ),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, _),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_SequenceSplit_CompactTableName",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_SequenceSplit_CompactTableName_Desc",
                  ),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, _),
                  fnSetValue: (_) => _(_),
                }),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _.msgNode
                        .sequence_split()
                        .set_head_split_chance(parseInt(_)),
                      _.msgNode
                        .sequence_split()
                        .set_mid_split_chance(parseInt(_)),
                      _.msgNode
                        .sequence_split()
                        .set_tail_split_chance(parseInt(_)),
                      _.msgNode.sequence_split().set_sequence_table_name(_),
                      _.msgNode.sequence_split().set_compact_table_name(_),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.ShuffleNode, _.Preprocessing),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Shuffle"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Shuffle_ExcludeZeroes"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.shuffle().exclude_zeroes()
                      ? (0, _._)("#SteamLearn_Yes")
                      : (0, _._)("#SteamLearn_No"),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(_.msgNode.shuffle().exclude_zeroes());
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Shuffle"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Shuffle"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Shuffle_ExcludeZeroes"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Shuffle_ExcludeZeroesDesc"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.CheckboxWithLabel,
                  },
                  _.createElement("input", {
                    type: "checkbox",
                    _: "editflatten",
                    checked: _,
                    onChange: () => _(!_),
                  }),
                  _.createElement(
                    "label",
                    {
                      htmlFor: "editflatten",
                    },
                    (0, _._)("#SteamLearn_Config_Node_Shuffle_ExcludeZeroes"),
                  ),
                ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.set_comment(__webpack_require__),
                      _.msgNode.shuffle().set_exclude_zeroes(_),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = (0, _._)();
          _.useEffect(() => {
            setTimeout(() => {
              for (const _ of _.project_nodes())
                10 == _.type() && _(_(_.node_id()));
            }, 0.1);
          }, [_, _]);
          const _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(
                _.FlowNode,
                _.SyncedShuffleNode,
                _.Preprocessing,
              ),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_SyncedShuffle"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Shuffle_ExcludeZeroes"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.synced_shuffle().exclude_zeroes()
                      ? (0, _._)("#SteamLearn_Yes")
                      : (0, _._)("#SteamLearn_No"),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            _ = _.msgNode
              .connectors()
              .filter((_) => _.is_input_connector()).length,
            [_, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(__webpack_require__.toString()),
            [_, _] = _.useState(_.msgNode.synced_shuffle().exclude_zeroes());
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(__webpack_require__.toString()),
              _(_.msgNode.synced_shuffle().exclude_zeroes());
          }, [_.bVisible, _.msgNode, _]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_SyncedShuffle"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_SyncedShuffle"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_Count"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_CountDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 10),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Shuffle_ExcludeZeroes"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Shuffle_ExcludeZeroesDesc"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.CheckboxWithLabel,
                  },
                  _.createElement("input", {
                    type: "checkbox",
                    _: "editflatten",
                    checked: _,
                    onChange: () => _(!_),
                  }),
                  _.createElement(
                    "label",
                    {
                      htmlFor: "editflatten",
                    },
                    (0, _._)("#SteamLearn_Config_Node_Shuffle_ExcludeZeroes"),
                  ),
                ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    const _ = parseInt(_),
                      _ = _;
                    if (_ > _) {
                      const _ = _ - _,
                        _ = _,
                        _ = _(_, _ + _);
                      for (let _ = 0; _ < _; _++) {
                        let _ = new _();
                        __webpack_require__.set_connector_id(_[_]),
                          __webpack_require__.set_is_input_connector(!0),
                          _.msgNode.add_connectors(_);
                      }
                      for (let _ = 0; _ < _; _++) {
                        let _ = new _();
                        __webpack_require__.set_connector_id(_[_ + _]),
                          __webpack_require__.set_is_input_connector(!1),
                          _.msgNode.add_connectors(_);
                      }
                    } else if (_ < _) {
                      let _ = [];
                      __webpack_require__.push(
                        ..._.msgNode
                          .connectors()
                          .filter((_) => _.is_input_connector())
                          .slice(_)
                          .map((_) => _.connector_id()),
                      ),
                        __webpack_require__.push(
                          ..._.msgNode
                            .connectors()
                            .filter((_) => !_.is_input_connector())
                            .slice(_)
                            .map((_) => _.connector_id()),
                        );
                      for (let _ of _.project_nodes())
                        for (let _ of _.connectors())
                          _.set_linked_connector_ids(
                            _.linked_connector_ids().filter(
                              (_) => !__webpack_require__.includes(_),
                            ),
                          );
                      _.msgNode.set_connectors([
                        ..._.msgNode
                          .connectors()
                          .filter((_) => _.is_input_connector())
                          .slice(0, _),
                        ..._.msgNode
                          .connectors()
                          .filter((_) => !_.is_input_connector())
                          .slice(0, _),
                      ]);
                    }
                    _.msgNode.set_comment(_),
                      _.msgNode.synced_shuffle().set_exclude_zeroes(_),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _(_.text_vectorization().other_project_id()),
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(
                _.FlowNode,
                _.TextVectorizationNode,
                _.Preprocessing,
              ),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_TextVectorization"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_VocabularySize",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.text_vectorization().vocabulary_size(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Standardize",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    0 == _.text_vectorization().standardize() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Standardize_0",
                      ),
                    1 == _.text_vectorization().standardize() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Standardize_1",
                      ),
                    2 == _.text_vectorization().standardize() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Standardize_2",
                      ),
                    3 == _.text_vectorization().standardize() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Standardize_3",
                      ),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Output",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    0 == _.text_vectorization().output() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Output_0",
                      ),
                    1 == _.text_vectorization().output() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Output_1",
                      ),
                    2 == _.text_vectorization().output() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Output_2",
                      ),
                    3 == _.text_vectorization().output() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Output_3",
                      ),
                  ),
                ),
                0 == _.text_vectorization().output() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_SeqLen",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.text_vectorization().sequence_length(),
                    ),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_TextVectorization_Split"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    0 == _.text_vectorization().split() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Split_0",
                      ),
                    1 == _.text_vectorization().split() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Split_1",
                      ),
                    2 == _.text_vectorization().split() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Split_2",
                      ),
                    3 == _.text_vectorization().split() &&
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorization_Split_3",
                      ),
                  ),
                ),
                _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_TextVectorizationOtherProjectName",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _,
                    ),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_NGrams",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    0 == _.text_vectorization().ngrams()
                      ? "None"
                      : _.text_vectorization().ngrams(),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(
              _.msgNode.text_vectorization().vocabulary_size().toString(),
            ),
            [_, _] = _.useState(_.msgNode.text_vectorization().standardize()),
            [_, _] = _.useState(_.msgNode.text_vectorization().output()),
            [_, _] = _.useState(
              _.msgNode.text_vectorization().vocabulary_size().toString(),
            ),
            [_, _] = _.useState(
              _.msgNode.text_vectorization().other_project_id()?.toString() ||
                "0",
            ),
            [_, _] = _.useState(
              _.msgNode.text_vectorization().other_fetch_id()?.toString() ||
                "0",
            ),
            [_, _] = _.useState(_.msgNode.text_vectorization().split()),
            [_, _] = _.useState(
              _.msgNode.text_vectorization().ngrams().toString(),
            );
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.text_vectorization().vocabulary_size().toString()),
              _(_.msgNode.text_vectorization().standardize()),
              _(_.msgNode.text_vectorization().output()),
              _(_.msgNode.text_vectorization().sequence_length().toString()),
              _(_.msgNode.text_vectorization().split()),
              _(_.msgNode.text_vectorization().ngrams().toString()),
              _(
                _.msgNode.text_vectorization().other_project_id()?.toString() ||
                  "0",
              ),
              _(
                _.msgNode.text_vectorization().other_fetch_id()?.toString() ||
                  "0",
              );
          }, [_.bVisible, _.msgNode]);
          const _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Standardize_0",
                ),
                value: 0,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Standardize_1",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Standardize_2",
                ),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Standardize_3",
                ),
                value: 3,
              },
            ],
            _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Output_0",
                ),
                value: 0,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Output_1",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Output_2",
                ),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Output_3",
                ),
                value: 3,
              },
            ],
            _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Split_0",
                ),
                value: 0,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Split_1",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Split_2",
                ),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_TextVectorization_Split_3",
                ),
                value: 3,
              },
            ];
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_TextVectorization"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_TextVectorization"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TextVectorization_VocabularySize",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TextVectorization_VocabularySizeDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  isText: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 1e6),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TextVectorization_Standardize",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TextVectorization_StandardizeDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
                0 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Standardize_Desc0",
                    ),
                  ),
                1 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Standardize_Desc1",
                    ),
                  ),
                2 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Standardize_Desc2",
                    ),
                  ),
                3 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Standardize_Desc3",
                    ),
                  ),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TextVectorization_Output"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TextVectorization_OutputDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
                0 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Output_Desc0",
                    ),
                  ),
                1 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Output_Desc1",
                    ),
                  ),
                2 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Output_Desc2",
                    ),
                  ),
                3 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Output_Desc3",
                    ),
                  ),
              ),
              0 == _ &&
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_SeqLen",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_SeqLenDesc",
                    ),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    isText: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) => _(_, 1, 1e4),
                    fnSetValue: (_) => _(_),
                  }),
                ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TextVectorization_Split"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TextVectorization_SplitDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
                0 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Split_Desc0",
                    ),
                  ),
                1 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Split_Desc1",
                    ),
                  ),
                2 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Split_Desc2",
                    ),
                  ),
                3 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TextVectorization_Split_Desc3",
                    ),
                  ),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TextVectorizationOtherProjectID",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TextVectorizationOtherProjectIDDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  isText: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0),
                  fnSetValue: (_) => _(_),
                }),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TextVectorizationOtherFetchIDDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  isText: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TextVectorization_NGrams"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TextVectorization_NGramsDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  isText: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, 100),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode
                      .text_vectorization()
                      .set_vocabulary_size(parseInt(_)),
                      _.msgNode.text_vectorization().set_standardize(_),
                      _.msgNode.text_vectorization().set_output(_),
                      _.msgNode
                        .text_vectorization()
                        .set_sequence_length(parseInt(_)),
                      _.msgNode.text_vectorization().set_split(_),
                      _.msgNode.text_vectorization().set_ngrams(parseInt(_)),
                      _.msgNode
                        .text_vectorization()
                        .set_other_project_id(parseInt(_)),
                      _.msgNode
                        .text_vectorization()
                        .set_other_fetch_id(parseInt(_)),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.TokenMaskNode, _.Preprocessing),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_TokenMask"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_TokenMask_MaskPct"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    `${_.token_mask().mask_pct()}%`,
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_TokenMask_MaskCount"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.token_mask().mask_count_limit(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_TokenMask_RandomPct"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    `${_.token_mask().random_pct()}%`,
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_TokenMask_KeepPct"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    `${_.token_mask().keep_pct()}%`,
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  toolTipContent: (0, _._)(
                    `#SteamLearn_Config_Node_TokenMask_Output_${_}`,
                  ),
                  direction: "top",
                },
                _.createElement(
                  _._,
                  {
                    key: _,
                    type: "source",
                    position: _._.Bottom,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(
              _.msgNode.token_mask().mask_pct().toString() || "10",
            ),
            [_, _] = _.useState(
              _.msgNode.token_mask().mask_count_limit().toString() || "5",
            ),
            [_, _] = _.useState(
              _.msgNode.token_mask().random_pct().toString() || "10",
            ),
            [_, _] = _.useState(
              _.msgNode.token_mask().keep_pct().toString() || "10",
            );
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.token_mask().mask_pct().toString()),
              _(_.msgNode.token_mask().mask_count_limit().toString()),
              _(_.msgNode.token_mask().random_pct().toString()),
              _(_.msgNode.token_mask().keep_pct().toString());
          }, [_]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_TokenMask"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_TokenMask"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TokenMask_MaskPct"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TokenMask_MaskPctDesc"),
                ),
                _.createElement(_, {
                  isText: !1,
                  dontUpdateProject: !0,
                  width: 100,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 100),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TokenMask_MaskCount"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TokenMask_MaskCountDesc"),
                ),
                _.createElement(_, {
                  isText: !1,
                  dontUpdateProject: !0,
                  width: 100,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TokenMask_RandomPct"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TokenMask_RandomPctDesc"),
                ),
                _.createElement(_, {
                  isText: !1,
                  dontUpdateProject: !0,
                  width: 100,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, 100),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TokenMask_KeepPct"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TokenMask_KeepPctDesc"),
                ),
                _.createElement(_, {
                  isText: !1,
                  dontUpdateProject: !0,
                  width: 100,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, 100),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.token_mask().set_mask_pct(parseInt(_)),
                      _.msgNode.token_mask().set_mask_count_limit(parseInt(_)),
                      _.msgNode.token_mask().set_random_pct(parseInt(_)),
                      _.msgNode.token_mask().set_keep_pct(parseInt(_)),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.TokenTransformerNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  toolTipContent: (0, _._)(
                    `#SteamLearn_Config_Node_TokenTransformer_Input_${_}`,
                  ),
                  direction: "top",
                },
                _.createElement(
                  _._,
                  {
                    key: _,
                    type: "target",
                    position: _._.Top,
                    _: _,
                    style: {
                      left: _,
                    },
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ConnectorID,
                    },
                    _.connector_id(),
                  ),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_TokenTransformer"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TokenTransformer_VocabularySize",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.token_transformer().compact_table()
                      ? _.token_transformer().compact_table()
                      : _.token_transformer().vocabulary_size(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TokenTransformer_SequenceLength",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.token_transformer().sequence_length(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TokenTransformer_EmbeddingWidth",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.token_transformer().embedding_width(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TokenTransformer_TransformerLayers",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.token_transformer().transformer_layers(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TokenTransformer_TransformerDim",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.token_transformer().transformer_dim(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TokenTransformer_TransformerHeads",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.token_transformer().transformer_heads(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_TokenTransformer_TransformerDropoutPct",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    `${_.token_transformer().transformer_dropout_pct()}%`,
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_TokenTransformer_Causal"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.token_transformer().is_causal()
                      ? (0, _._)("#SteamLearn_Yes")
                      : (0, _._)("#SteamLearn_No"),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(
              _.msgNode.token_transformer().compact_table()?.length > 0
                ? _.msgNode.token_transformer().compact_table()
                : _.msgNode.token_transformer().vocabulary_size().toString(),
            ),
            [_, _] = _.useState(
              _.msgNode.token_transformer().sequence_length().toString() ||
                "400",
            ),
            [_, _] = _.useState(
              _.msgNode.token_transformer().embedding_width().toString() ||
                "64",
            ),
            [_, _] = _.useState(
              _.msgNode.token_transformer().transformer_layers().toString() ||
                "3",
            ),
            [_, _] = _.useState(
              _.msgNode.token_transformer().transformer_dim().toString() ||
                "128",
            ),
            [_, _] = _.useState(
              _.msgNode.token_transformer().transformer_heads().toString() ||
                "4",
            ),
            [_, _] = _.useState(
              _.msgNode
                .token_transformer()
                .transformer_dropout_pct()
                .toString() || "30",
            ),
            [_, _] = _.useState(_.msgNode.token_transformer().is_causal());
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(
                _.msgNode.token_transformer().compact_table()?.length > 0
                  ? _.msgNode.token_transformer().compact_table()
                  : _.msgNode.token_transformer().vocabulary_size().toString(),
              ),
              _(_.msgNode.token_transformer().sequence_length().toString()),
              _(_.msgNode.token_transformer().embedding_width().toString()),
              _(_.msgNode.token_transformer().transformer_layers().toString()),
              _(_.msgNode.token_transformer().transformer_dim().toString()),
              _(_.msgNode.token_transformer().transformer_heads().toString()),
              _(
                _.msgNode
                  .token_transformer()
                  .transformer_dropout_pct()
                  .toString(),
              ),
              _(_.msgNode.token_transformer().is_causal());
          }, [_]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_TokenTransformer"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_TokenTransformer"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_VocabularySize",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_VocabularySizeDesc",
                  ),
                ),
                _.createElement(_, {
                  isText: !1,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1) || _(_, _),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_SequenceLength",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_SequenceLengthDesc",
                  ),
                ),
                _.createElement(_, {
                  isText: !1,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_EmbeddingWidth",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_EmbeddingWidthDesc",
                  ),
                ),
                _.createElement(_, {
                  isText: !1,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_TransformerLayers",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_TransformerLayersDesc",
                  ),
                ),
                _.createElement(_, {
                  isText: !1,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_TransformerDim",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_TransformerDimDesc",
                  ),
                ),
                _.createElement(_, {
                  isText: !1,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_TransformerHeads",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_TransformerHeadsDesc",
                  ),
                ),
                _.createElement(_, {
                  isText: !1,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_TransformerDropoutPct",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_TransformerDropoutPctDesc",
                  ),
                ),
                _.createElement(_, {
                  isText: !1,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 99),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_TokenTransformer_Causal"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_TokenTransformer_CausalDesc",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.CheckboxWithLabel,
                  },
                  _.createElement("input", {
                    type: "checkbox",
                    _: "editcausal",
                    checked: _,
                    onChange: () => _(!_),
                  }),
                  _.createElement(
                    "label",
                    {
                      htmlFor: "editcausal",
                    },
                    (0, _._)("#SteamLearn_Config_Node_TokenTransformer_Causal"),
                  ),
                ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    const _ = _(_, 1),
                      _ = _(_, _);
                    _
                      ? (_.msgNode
                          .token_transformer()
                          .set_vocabulary_size(
                            parseInt(_.length > 0 ? _ : "100"),
                          ),
                        _.msgNode.token_transformer().set_compact_table(""))
                      : _ &&
                        (_.msgNode.token_transformer().set_compact_table(_),
                        _.msgNode.token_transformer().set_vocabulary_size(0)),
                      _.msgNode
                        .token_transformer()
                        .set_sequence_length(parseInt(_)),
                      _.msgNode
                        .token_transformer()
                        .set_embedding_width(parseInt(_)),
                      _.msgNode
                        .token_transformer()
                        .set_transformer_layers(parseInt(_)),
                      _.msgNode
                        .token_transformer()
                        .set_transformer_dim(parseInt(_)),
                      _.msgNode
                        .token_transformer()
                        .set_transformer_heads(parseInt(_)),
                      _.msgNode
                        .token_transformer()
                        .set_transformer_dropout_pct(parseInt(_)),
                      _.msgNode.token_transformer().set_is_causal(_),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        };
      const _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = (0, _._)();
          _.useEffect(() => {
            setTimeout(() => {
              for (const _ of _.project_nodes())
                6 == _.type() && _(_(_.node_id()));
            }, 0.1);
          }, [_, _]);
          const _ = Math.max(150, 40 + 22 * (_.length - 1));
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.TrainNode, _.Trainer),
              style: {
                height: _,
              },
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = _.train().uses_weight_mask() ? 2 : 1,
                _ = _.length - _,
                _ = _ >= _,
                _ = _ ? _ - _ : _,
                _ = _ ? _ : _,
                _ = Math.floor(((_ + 1) / (_ + 1)) * (_ - 24)),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _ ? _._.Right : _._.Left,
                  _: _,
                  style: {
                    top: _ + 24,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Train"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: (0, _._)(_.SideSection, _.Left),
                },
                _.createElement(
                  "div",
                  {
                    className: _.SideInput,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_Input"),
                ),
                _.train().uses_weight_mask() &&
                  _.createElement(
                    "div",
                    {
                      className: (0, _._)(_.SideSection, _.Left),
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.SideInput,
                      },
                      (0, _._)("#SteamLearn_Config_Node_Train_WeightMask"),
                    ),
                  ),
              ),
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Train_Activation"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    (function (_) {
                      switch (_) {
                        case 2:
                          return "Sigmoid";
                        case 1:
                          return "Softmax";
                        case 3:
                          return "Linear";
                      }
                      return console.error("Invalid activation", _), "";
                    })(_.train().activation()),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Train_Loss"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    (function (_) {
                      switch (_) {
                        case 1:
                          return "Binary Crossentropy";
                        case 2:
                          return "Categorical Crossentropy";
                        case 3:
                          return "Sparse Categorical Crossentropy";
                        case 4:
                          return "Regression";
                      }
                      return console.error("Invalid loss", _), "";
                    })(_.train().loss()),
                  ),
                ),
                _.train().compact_table().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)("#SteamLearn_Config_Node_Train_CompactTable"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _.train().compact_table(),
                    ),
                  ),
              ),
              _.createElement(
                "div",
                {
                  className: (0, _._)(_.SideSection, _.Right),
                },
                (0, _._)(1, _.train().input_count()).map((_) =>
                  _.createElement(
                    "div",
                    {
                      key: _,
                      className: _.SideInput,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Train_Label", _),
                  ),
                ),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(
              _.msgNode.train().input_count().toString(),
            ),
            [_, _] = _.useState(_.msgNode.train().activation()),
            [_, _] = _.useState(_.msgNode.train().loss()),
            [_, _] = _.useState(_.msgNode.train().uses_weight_mask() || !1),
            [_, _] = _.useState(_.msgNode.train().compact_table());
          _.useEffect(() => {
            _(_.msgNode.train().input_count().toString()),
              _(_.msgNode.train().activation()),
              _(_.msgNode.train().loss()),
              _(_.msgNode.train().compact_table()),
              _(_.msgNode.train().uses_weight_mask() || !1);
          }, [_.bVisible, _.msgNode]);
          let _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Activation_Sigmoid",
                ),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Activation_Softmax",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Activation_Linear",
                ),
                value: 3,
              },
            ],
            _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Loss_BinaryCrossEntropy",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Loss_CategoricalCrossEntropy",
                ),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Loss_SparseCategoricalCrossEntropy",
                ),
                value: 3,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_Config_Node_Train_Loss_Regression",
                ),
                value: 4,
              },
            ],
            _ = !1;
          for (let _ = 1; _ < _.msgNode.connectors().length; _ += 2) {
            const { msgIncomingNode: _, nIncomingConnectorID: _ } = _(
              _,
              _.msgNode.connectors()[_].connector_id(),
            );
            if (_) {
              const _ = _(_, _, _);
              if (_.length > 1)
                return (
                  (0, _._)(
                    !1,
                    `Incoming node/connector ${_.node_id()}, ${_} have a shape with a primary dimension of ${_.length}: ${_}!`,
                  ),
                  null
                );
              if (_.length > 0 && (_[0] > 1 || void 0 === _[0])) {
                _ = !0;
                break;
              }
            }
          }
          const _ = 3 == _ || (1 == _ && _);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Train"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Train"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_Count"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_CountDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 9),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_Activation"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_ActivationDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
                2 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_Train_ActivationDescSub1",
                    ),
                  ),
                1 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_Train_ActivationDescSub2",
                    ),
                  ),
                3 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_Train_ActivationDescSub3",
                    ),
                  ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_Loss"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_LossDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetValue: () => _,
                  fnSetValue: (_) => _(parseInt(_)),
                  options: _,
                }),
                1 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Train_LossDescSub1"),
                  ),
                2 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Train_LossDescSub2"),
                  ),
                3 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Train_LossDescSub3"),
                  ),
                4 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDescSub,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Train_LossDescSub4"),
                  ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_UsesWeightMask"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Train_UsesWeightMaskDesc"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.CheckboxWithLabel,
                  },
                  _.createElement("input", {
                    type: "checkbox",
                    _: "editusesweightmask",
                    checked: _,
                    onChange: () => _(!_),
                  }),
                  _.createElement(
                    "label",
                    {
                      htmlFor: "editusesweightmask",
                    },
                    (0, _._)("#SteamLearn_Config_Node_Train_UsesWeightMask"),
                  ),
                ),
              ),
              _ &&
                _.createElement("div", {
                  className: _.Separator,
                }),
              _ &&
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionHeader,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Train_CompactTable"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.NodeOptionDesc,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Train_CompactTableDesc"),
                  ),
                  _.createElement(_, {
                    dontUpdateProject: !0,
                    fnGetInitialValue: () => _,
                    fnValidateValue: (_) =>
                      _(_, _) ||
                      (function (_, _) {
                        for (const _ of _.project_nodes())
                          if (
                            14 == __webpack_require__.type() &&
                            __webpack_require__.kmeans().name() == _
                          )
                            return !0;
                        return !1;
                      })(_, _) ||
                      _(_, _),
                    fnSetValue: (_) => _(_),
                  }),
                ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    const _ = _ && !_.msgNode.train().uses_weight_mask(),
                      _ = !_ && _.msgNode.train().uses_weight_mask(),
                      _ = Math.floor(
                        _.msgNode
                          .connectors()
                          .filter((_) => _.is_input_connector()).length,
                      ),
                      _ = parseInt(_) + (_ ? 2 : 1);
                    if (_ > _) {
                      const _ = _ - _,
                        _ = _(_, _);
                      for (let _ = 0; _ < _; _++) {
                        let _ = new _();
                        __webpack_require__.set_connector_id(_[_]),
                          __webpack_require__.set_is_input_connector(!0),
                          _.msgNode.add_connectors(_);
                      }
                      if (_) {
                        for (
                          let _ = _.msgNode.connectors().length - 1;
                          _ > 1;
                          _--
                        ) {
                          const _ = _.msgNode
                              .connectors()
                              [_ - 1].connector_id(),
                            _ = _.msgNode.connectors()[_].connector_id();
                          for (let _ of _.project_nodes())
                            for (let _ of _.connectors())
                              _.linked_connector_ids().includes(_) &&
                                (_.set_linked_connector_ids(
                                  _.linked_connector_ids().filter(
                                    (_) => _ != _,
                                  ),
                                ),
                                _.add_linked_connector_ids(_));
                        }
                        _.msgNode.connectors()[1].set_linked_connector_ids([]);
                      }
                    } else if (_ < _) {
                      if (_)
                        for (
                          let _ = _.msgNode.connectors().length - 1;
                          _ > 1;
                          _--
                        ) {
                          const _ = _.msgNode.connectors()[_].connector_id(),
                            _ = _.msgNode.connectors()[_ - 1].connector_id();
                          for (let _ of _.project_nodes())
                            for (let _ of __webpack_require__.connectors())
                              _.linked_connector_ids().includes(
                                _.msgNode.connectors()[1].connector_id(),
                              ) &&
                                _.set_linked_connector_ids(
                                  _.linked_connector_ids().filter(
                                    (_) =>
                                      _ !=
                                      _.msgNode.connectors()[1].connector_id(),
                                  ),
                                ),
                                _.linked_connector_ids().includes(_) &&
                                  (_.set_linked_connector_ids(
                                    _.linked_connector_ids().filter(
                                      (_) => _ != _,
                                    ),
                                  ),
                                  _.add_linked_connector_ids(_));
                        }
                      const _ = _.msgNode
                        .connectors()
                        .filter((_) => _.is_input_connector())
                        .slice(_)
                        .map((_) => _.connector_id());
                      for (let _ of _.project_nodes())
                        for (let _ of _.connectors())
                          _.set_linked_connector_ids(
                            _.linked_connector_ids().filter(
                              (_) => !__webpack_require__.includes(_),
                            ),
                          );
                      _.msgNode.set_connectors([
                        ..._.msgNode
                          .connectors()
                          .filter((_) => !_.is_input_connector()),
                        ..._.msgNode
                          .connectors()
                          .filter((_) => _.is_input_connector())
                          .slice(0, _),
                      ]);
                    }
                    _.msgNode.train().set_input_count(parseInt(_)),
                      _.msgNode.train().set_activation(_),
                      _.msgNode.train().set_loss(_),
                      _.msgNode.train().set_compact_table(_),
                      _.msgNode.train().set_uses_weight_mask(_),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.TransformerNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_Transformer"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Transformer_NumHeads"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.transformer().num_heads(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_Transformer_FeedforwardSize",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.transformer().feedforward_size(),
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_Transformer_DropoutPct"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    `${_.transformer().dropout_pct()}%`,
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_Transformer_InternalBlocks",
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    `${_.transformer().num_internal_blocks()}`,
                  ),
                ),
                0 != _.transformer().regularization() &&
                  _.createElement(
                    "div",
                    {
                      className: _.LabelValue,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.Label,
                      },
                      (0, _._)(
                        "#SteamLearn_Config_Node_DenseStack_Regularization",
                      ),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.Value,
                      },
                      _(_.transformer().regularization()),
                    ),
                  ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(_.msgNode.transformer().num_heads().toString()),
            [_, _] = _.useState(
              _.msgNode.transformer().feedforward_size()?.toString() || "1024",
            ),
            [_, _] = _.useState(
              _.msgNode.transformer().dropout_pct()?.toString() || "30",
            ),
            [_, _] = _.useState(
              _.msgNode.transformer().num_internal_blocks()?.toString() || "2",
            ),
            [_, _] = _.useState(_.msgNode.transformer().regularization());
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.transformer().num_heads().toString()),
              _(
                _.msgNode.transformer().feedforward_size()?.toString() ||
                  "1024",
              ),
              _(_.msgNode.transformer().dropout_pct()?.toString() || "30"),
              _(
                _.msgNode.transformer().num_internal_blocks()?.toString() ||
                  "2",
              ),
              _(_.msgNode.transformer().regularization());
          }, [_]);
          let _ = [
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Train_Regularization_None",
              ),
              value: 0,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Train_Regularization_L1",
              ),
              value: 1,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Train_Regularization_L2",
              ),
              value: 2,
            },
          ];
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_Transformer"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_Transformer"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Transformer_NumHeads"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Transformer_NumHeadsDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 20),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_Transformer_FeedforwardSize",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_Transformer_FeedforwardSizeDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 16, 10240),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Transformer_DropoutPct"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_Transformer_DropoutPctDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 99),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_Transformer_InternalBlocks",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_Transformer_InternalBlocksDesc",
                  ),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 1, 16),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.Option,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionTitle,
                  },
                  (0, _._)("#SteamLearn_Config_Node_DenseStack_Regularization"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.OptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_DenseStack_RegularizationDesc",
                  ),
                ),
                _.createElement(
                  "select",
                  {
                    className: _.InputSelect,
                    value: _,
                    onChange: (_) => _(parseInt(_.target.value)),
                  },
                  _.map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: _.value,
                        value: _.value,
                      },
                      _.label,
                    ),
                  ),
                ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.transformer().set_num_heads(parseInt(_)),
                      _.msgNode.transformer().set_feedforward_size(parseInt(_)),
                      _.msgNode.transformer().set_dropout_pct(parseInt(_)),
                      _.msgNode
                        .transformer()
                        .set_num_internal_blocks(parseInt(_)),
                      _.msgNode.transformer().set_regularization(_),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(!1),
            _ = _.data.msgNode,
            _ = _.connectors().filter((_) => _.is_input_connector()),
            _ = _.connectors().filter((_) => !_.is_input_connector());
          return _.createElement(
            "div",
            {
              className: (0, _._)(_.FlowNode, _.WeightedAverageNode, _.Keras),
            },
            _.createElement(_, {
              bVisible: __webpack_require__,
              fnSetPopupVisible: _,
              msgNode: _,
            }),
            _.map((_, _) => {
              if (1 == _ && !_.weighted_average().use_weights()) return null;
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "target",
                  position: _._.Top,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
            _.createElement(
              "div",
              {
                className: _.Title,
              },
              _.createElement(
                "div",
                {
                  className: _.TitleText,
                },
                (0, _._)("#SteamLearn_Config_Node_Title_WeightedAverage"),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeID,
                },
                _.node_id(),
              ),
              _.createElement("div", {
                className: _.EditGear,
                onClick: () => _(!0),
              }),
              _.createElement("div", {
                className: _.Delete,
                onClick: () =>
                  (0, _._)(
                    _.createElement(_._, {
                      strTitle: (0, _._)("#SteamLearn_Config_Node_Delete_Node"),
                      strDescription: (0, _._)(
                        "#SteamLearn_Config_Node_Delete_NodeDetails",
                      ),
                      onOK: () => _(_, _.node_id()),
                    }),
                    window,
                  ),
              }),
            ),
            _.createElement("div", {
              className: _.TitleUnderBar,
            }),
            _.createElement(
              "div",
              {
                className: _.Body,
              },
              _.createElement(
                "div",
                {
                  className: _.CenterSection,
                },
                _.comment().length > 0 &&
                  _.createElement(
                    "div",
                    {
                      className: _.Comment,
                    },
                    _.comment(),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.LabelValue,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.Label,
                    },
                    (0, _._)("#SteamLearn_Config_Node_WeightedAverage_Axis"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.Value,
                    },
                    _.weighted_average().axis(),
                  ),
                ),
              ),
            ),
            _.map((_, _) => {
              const _ = Math.floor(
                  ((_ + 1) / (_.length + 1)) * parseInt(_.nodeWidth),
                ),
                _ = _(_.connector_id());
              return _.createElement(
                _._,
                {
                  key: _,
                  type: "source",
                  position: _._.Bottom,
                  _: _,
                  style: {
                    left: _,
                  },
                },
                _.createElement(
                  "div",
                  {
                    className: _.ConnectorID,
                  },
                  _.connector_id(),
                ),
              );
            }),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            [__webpack_require__, _] = _.useState(_.msgNode.comment()),
            [_, _] = _.useState(_.msgNode.weighted_average().axis().toString()),
            [_, _] = _.useState(_.msgNode.weighted_average().use_weights());
          _.useEffect(() => {
            _(_.msgNode.comment()),
              _(_.msgNode.weighted_average().axis().toString()),
              _(_.msgNode.weighted_average().use_weights());
          }, [_.bVisible, _.msgNode]);
          return _.createElement(
            _._,
            {
              active: _.bVisible,
              onDismiss: () => _.fnSetPopupVisible(!1),
              modalClassName: "NodeEditDialog",
            },
            _.createElement(
              "div",
              {
                className: _.NodeHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Title_WeightedAverage"),
              _.createElement(
                "div",
                {
                  className: _.SubHeader,
                },
                (0, _._)("#SteamLearn_Config_Node_Tooltip_WeightedAverage"),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.NodeBody,
              },
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_Comment"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_CommentDesc"),
                ),
                _.createElement(_, {
                  isText: !0,
                  dontUpdateProject: !0,
                  width: 200,
                  fnGetInitialValue: () => __webpack_require__,
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)("#SteamLearn_Config_Node_WeightedAverage_Axis"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)("#SteamLearn_Config_Node_WeightedAverage_AxisDesc"),
                ),
                _.createElement(_, {
                  dontUpdateProject: !0,
                  isText: !0,
                  fnGetInitialValue: () => _,
                  fnValidateValue: (_) => _(_, 0, void 0),
                  fnSetValue: (_) => _(_),
                }),
              ),
              _.createElement(
                "div",
                {
                  className: _.NodeOptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionHeader,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_WeightedAverage_UseWeights",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.NodeOptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_Config_Node_WeightedAverage_UseWeightsDesc",
                  ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.CheckboxWithLabel,
                  },
                  _.createElement("input", {
                    type: "checkbox",
                    _: "useweights",
                    checked: _,
                    onChange: () => _(!_),
                  }),
                  _.createElement(
                    "label",
                    {
                      htmlFor: "useweights",
                    },
                    (0, _._)(
                      "#SteamLearn_Config_Node_WeightedAverage_UseWeights",
                    ),
                  ),
                ),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
            ),
            _.createElement(
              "div",
              {
                className: _.Buttons,
              },
              _.createElement(
                _._,
                {
                  onClick: () => {
                    _.msgNode.weighted_average().set_axis(parseInt(_)),
                      _.msgNode.weighted_average().set_use_weights(_),
                      _.msgNode.set_comment(__webpack_require__),
                      _(_),
                      _.fnSetPopupVisible(!1);
                  },
                },
                (0, _._)("#SteamLearn_Confirm"),
              ),
              _.createElement(
                _._,
                {
                  onClick: () => _.fnSetPopupVisible(!1),
                },
                (0, _._)("#SteamLearn_Cancel"),
              ),
            ),
          );
        };
      var _ = __webpack_require__("chunkid");
      const _ = () =>
          _.createElement(
            "div",
            {
              className: _.ProjectModelPage,
            },
            _.createElement(_, null),
          ),
        _ = (_) =>
          _.createElement(
            _._,
            {
              toolTipContent: _.strTooltip,
              direction: "top",
              bDisabled: null == _.strTooltip,
            },
            _.createElement(
              "div",
              {
                className: (0, _._)(_.DragSource, _.DragCombine),
                onDragStart: (_) => _.fnDragStart(_, _.eType),
                draggable: !0,
              },
              _.strName,
            ),
          ),
        _ = () => {
          const _ = _.useRef(null),
            [_, __webpack_require__] = _.useState(null),
            { msgWorkingProjectConfig: _ } = _(),
            [_, _] = _(_),
            [_, _, _] = (0, _._)(_),
            [_, _, _] = (0, _._)(_),
            [_, _] = _.useState(null),
            [_, _] = _.useState(!1),
            _ = _.useMemo(
              () => ({
                nodeInput: _,
                nodeDenseStack: _,
                nodeDense: _,
                nodeDropout: _,
                nodeConcat: _,
                nodeCombine: _,
                nodeEmbedding: _,
                nodeTrain: _,
                nodeShuffle: _,
                nodeSyncedShuffle: _,
                nodeOnehot: _,
                nodeExplode: _,
                nodeConditionalSwap: _,
                nodeConditionalExtract: _,
                nodeKMeans: _,
                nodeTextVectorization: _,
                nodeBatchNormalization: _,
                nodeNormalize: _,
                nodeNamedInference: _,
                nodeDot: _,
                nodeExtract: _,
                nodeConv1D: _,
                nodeMaxPooling1D: _,
                nodeFlatten: _,
                nodeGlobalMaxPooling1D: _,
                nodeGlobalAvgPooling1D: _,
                nodeTransformer: _,
                nodeSequenceSplit: _,
                nodeWeightedAverage: _,
                nodeTokenMask: _,
                nodeTokenTransformer: _,
                nodeMaskedHead: _,
                nodeExternalModel: _,
                nodeExternalEmbedding: _,
                nodeReshape2D: _,
                nodeRowExtract: _,
                nodeBert: _,
                nodeBertTokenizer: _,
                nodeBertFinetune: _,
              }),
              [],
            );
          _.useEffect(() => {
            const [_, _] = _(_);
            _(_), _(_);
          }, [_, _, _]);
          const _ = _.useCallback((_, _) => {
              _.dataTransfer.setData("application/reactflow", _.toString()),
                (_.dataTransfer.effectAllowed = "move");
            }, []),
            _ = _.useCallback((_) => {
              _.preventDefault(), (_.dataTransfer.dropEffect = "move");
            }, []),
            _ = _.useCallback(
              (_) => {
                _.preventDefault();
                const _ = parseInt(
                  _.dataTransfer.getData("application/reactflow"),
                );
                if (void 0 === _ || !_) return;
                const _ = _.screenToFlowPosition({
                  _: _.clientX,
                  _: _.clientY,
                });
                !(function (_, _, _, _) {
                  let _ = new _();
                  _.set_node_id(_(_)),
                    _.set_location_x(Math.floor(_)),
                    _.set_location_y(Math.floor(_)),
                    _.set_type(_),
                    _.set_comment("");
                  let _ = 0,
                    _ = 0;
                  switch (_) {
                    case 1:
                    case 6:
                      return;
                    case 8:
                      (_ = 2), (_ = 1), _.concatenate().set_axis(0);
                      break;
                    case 15:
                    case 33:
                      (_ = 2), (_ = 1);
                      break;
                    case 2:
                      (_ = 1),
                        (_ = 1),
                        _.dense().set_width(128),
                        _.dense().set_activation(1),
                        _.dense().set_regularization(0);
                      break;
                    case 3:
                      (_ = 1),
                        (_ = 1),
                        _.dense_stack().set_width([128, 64]),
                        _.dense_stack().set_dropout_pct(30),
                        _.dense_stack().set_activation(1),
                        _.dense_stack().set_regularization(0);
                      break;
                    case 5:
                      (_ = 1),
                        (_ = 1),
                        _.embedding().set_max_value(100),
                        _.embedding().set_compact_table(""),
                        _.embedding().set_embedding_width(8),
                        _.embedding().set_flatten(!0);
                      break;
                    case 9:
                      (_ = 1), (_ = 1), _.shuffle().set_exclude_zeroes(!1);
                      break;
                    case 10:
                      (_ = 2),
                        (_ = 2),
                        _.synced_shuffle().set_exclude_zeroes(!1);
                      break;
                    case 11:
                      (_ = 1),
                        (_ = 1),
                        _.onehot().set_width(16),
                        _.onehot().set_compact_table("");
                      break;
                    case 12:
                      (_ = 1), (_ = 0);
                      break;
                    case 27:
                      (_ = 1),
                        (_ = 1),
                        _.external_embedding().set_project_id(0),
                        _.external_embedding().set_fetch_id(0),
                        _.external_embedding().set_train_id(0),
                        _.external_embedding().set_embedding_name(""),
                        _.external_embedding().set_compact_table(""),
                        _.external_embedding().set_exclude_missing(!1);
                      break;
                    case 36:
                      (_ = 1), (_ = 1), _.reshape_2d().set_dimension(1);
                      break;
                    case 37:
                      (_ = 1), (_ = 1), _.row_extract().set_row(0);
                      break;
                    case 38:
                    case 17:
                    case 18:
                    case 24:
                    case 25:
                    case 31:
                      (_ = 1), (_ = 1);
                      break;
                    case 39:
                      (_ = 1),
                        (_ = 3),
                        _.bert_tokenizer().set_bert_model(2),
                        _.bert_tokenizer().set_sequence_length(512);
                      break;
                    case 40:
                      (_ = 3),
                        (_ = 1),
                        _.bert_finetune().set_bert_model(2),
                        _.bert_finetune().set_unfrozen_layers(1);
                      break;
                    case 13:
                      (_ = 3), (_ = 2);
                      break;
                    case 4:
                      (_ = 1), (_ = 1), _.dropout().set_dropout_pct(30);
                      break;
                    case 7:
                      (_ = 1),
                        (_ = 2),
                        _.conditional_extract().set_extract_filter_type(1),
                        _.conditional_extract().set_extract_weight_type(0),
                        _.conditional_extract()
                          .filter_info()
                          .set_appid_release_recency_months(0),
                        _.conditional_extract()
                          .filter_info()
                          .set_appid_publisher_id(0),
                        _.conditional_extract()
                          .filter_info()
                          .set_appid_featured_tag_id(0),
                        _.conditional_extract()
                          .filter_info()
                          .set_appid_theme_tag_id(0),
                        _.conditional_extract()
                          .weight_info()
                          .set_appid_release_recency_bias(0),
                        _.conditional_extract()
                          .weight_info()
                          .set_input_number(0),
                        _.conditional_extract()
                          .weight_info()
                          .set_input_strength(0);
                      break;
                    case 14:
                      (_ = 1),
                        (_ = 1),
                        _.kmeans().set_num_clusters(10),
                        _.kmeans().set_name(""),
                        _.kmeans().set_generate_clusters(!1);
                      break;
                    case 16:
                      (_ = 1),
                        (_ = 1),
                        _.text_vectorization().set_vocabulary_size(1e3),
                        _.text_vectorization().set_standardize(0),
                        _.text_vectorization().set_output(0),
                        _.text_vectorization().set_sequence_length(500),
                        _.text_vectorization().set_split(1),
                        _.text_vectorization().set_ngrams(0),
                        _.text_vectorization().set_other_project_id(0),
                        _.text_vectorization().set_other_fetch_id(0);
                      break;
                    case 19:
                      (_ = 1), (_ = 1), _.named_inference().set_name("");
                      break;
                    case 20:
                      (_ = 2), (_ = 1), _.dot().set_normalize(!1);
                      break;
                    case 30:
                      (_ = 2),
                        (_ = 1),
                        _.weighted_average().set_axis(0),
                        _.weighted_average().set_use_weights(!0);
                      break;
                    case 22:
                      (_ = 1),
                        (_ = 1),
                        _.conv_1d().set_filters(32),
                        _.conv_1d().set_kernel_size(3),
                        _.conv_1d().set_strides(1),
                        _.conv_1d().set_activation(1);
                      break;
                    case 23:
                      (_ = 1),
                        (_ = 1),
                        _.max_pooling_1d().set_pool_size(3),
                        _.max_pooling_1d().set_strides(1);
                      break;
                    case 26:
                      (_ = 1),
                        (_ = 1),
                        _.transformer().set_num_heads(2),
                        _.transformer().set_feedforward_size(1024),
                        _.transformer().set_dropout_pct(30);
                      break;
                    case 28:
                      (_ = 1),
                        (_ = 1),
                        _.time_distributed_dense().set_width(1024),
                        _.time_distributed_dense().set_activation(1);
                      break;
                    case 29:
                      (_ = 1),
                        (_ = 2),
                        _.sequence_split().set_head_split_chance(0),
                        _.sequence_split().set_mid_split_chance(100),
                        _.sequence_split().set_tail_split_chance(0),
                        _.sequence_split().set_sequence_table_name(""),
                        _.sequence_split().set_compact_table_name("");
                      break;
                    case 21: {
                      _.extract().set_input_type(0),
                        _.extract().set_mode(0),
                        _.extract().set_exclusion(0),
                        _.extract().set_selection(0),
                        _.extract().set_recency_months(300),
                        _.extract().set_bias_start(0.5),
                        _.extract().set_bias_end(0.5),
                        _.extract().set_input_bias_input_number(1),
                        _.extract().set_input_bias_strength(1),
                        _.extract().set_positive_sample_percent(100),
                        _.extract().set_compact_table(""),
                        _.extract().set_extracted_compact_table(""),
                        _.extract().set_fest_name("");
                      const _ = _(_, 4);
                      {
                        let _ = new _();
                        _.set_connector_id(_[0]),
                          _.set_is_input_connector(!1),
                          _.add_connectors(_);
                      }
                      {
                        let _ = new _();
                        _.set_connector_id(_[1]),
                          _.set_is_input_connector(!0),
                          _.add_connectors(_);
                      }
                      {
                        let _ = new _();
                        _.set_connector_id(_[2]),
                          _.set_is_input_connector(!1),
                          _.add_connectors(_);
                      }
                      {
                        let _ = new _();
                        _.set_connector_id(_[3]),
                          _.set_is_input_connector(!1),
                          _.add_connectors(_);
                      }
                      break;
                    }
                    case 32:
                      (_ = 1),
                        (_ = 4),
                        _.token_mask().set_mask_pct(10),
                        _.token_mask().set_mask_count_limit(5),
                        _.token_mask().set_random_pct(10),
                        _.token_mask().set_keep_pct(10);
                      break;
                    case 34:
                      (_ = 3),
                        (_ = 1),
                        _.token_transformer().set_vocabulary_size(2e3),
                        _.token_transformer().set_sequence_length(400),
                        _.token_transformer().set_embedding_width(64),
                        _.token_transformer().set_transformer_layers(3),
                        _.token_transformer().set_transformer_dim(128),
                        _.token_transformer().set_transformer_heads(4),
                        _.token_transformer().set_transformer_dropout_pct(30),
                        _.token_transformer().set_is_causal(!1);
                      break;
                    case 35:
                      (_ = 1),
                        (_ = 1),
                        _.external_model().set_project_id(0),
                        _.external_model().set_train_id(0),
                        _.external_model().set_named_inference_name(""),
                        _.external_model().set_freeze_weights(!1),
                        _.external_model().set_unfrozen_layers(0);
                      break;
                    default:
                      (0, _._)(!1, `Unhandled type in AddNodeToConfig: ${_}`);
                  }
                  if (_ + _ > 0) {
                    const _ = _(_, _ + _);
                    if (_ > 0)
                      for (let _ = 0; _ < _; _++) {
                        let _ = new _();
                        __webpack_require__.set_connector_id(_[_]),
                          __webpack_require__.set_is_input_connector(!0),
                          _.add_connectors(_);
                      }
                    if (_ > 0)
                      for (let _ = 0; _ < _; _++) {
                        let _ = new _();
                        __webpack_require__.set_connector_id(_[_ + _]),
                          __webpack_require__.set_is_input_connector(!1),
                          _.add_connectors(_);
                      }
                  }
                  _.add_project_nodes(_), _(_);
                })(_, _, _._, _._);
              },
              [_, _],
            ),
            _ = _.useCallback(
              (_) => {
                _(_);
              },
              [_],
            ),
            _ = _.useCallback(
              (_, _, _) => {
                const _ = _(_._);
                let _ = _.project_nodes().find((_) => _.node_id() == _);
                _ &&
                  (_.set_location_x(Math.floor(_.position._)),
                  _.set_location_y(Math.floor(_.position._)),
                  _(_));
              },
              [_],
            ),
            _ = _.useCallback(
              (_) => {
                _(_);
              },
              [_],
            ),
            _ = _.useCallback(() => {
              _(null);
            }, []),
            _ = _.useCallback(
              (_, _) => {
                const _ = _(_.source),
                  _ = _(_.sourceHandle),
                  _ = _(_.target),
                  _ = _(_.targetHandle);
                _(_, _, _, _, _);
              },
              [_],
            ),
            _ = _.useCallback(
              (_, _) => {
                const _ = _(_.source),
                  _ = _(_.sourceHandle),
                  _ = _(_.target),
                  _ = _(_.targetHandle);
                !(function (_, _, _, _, _) {
                  let _ = _.project_nodes().find((_) => _.node_id() == _),
                    _ = _.project_nodes().find((_) => _.node_id() == _);
                  if (
                    ((0, _._)(
                      _,
                      `RemoveEdgeFromConfig: Failed to find source node: ${_}`,
                    ),
                    (0, _._)(
                      _,
                      `RemoveEdgeFromConfig: Failed to find target node: ${_}`,
                    ),
                    !_ || !_)
                  )
                    return;
                  let _ = _.connectors().find((_) => _.connector_id() == _),
                    _ = _.connectors().find((_) => _.connector_id() == _);
                  (0, _._)(
                    _,
                    `RemoveEdgeFromConfig: Failed to find source connector: ${_}, ${_}`,
                  ),
                    (0, _._)(
                      _,
                      `RemoveEdgeFromConfig: Failed to find target connector: ${_}, ${_}`,
                    ),
                    (0, _._)(
                      _.linked_connector_ids().includes(_),
                      `RemoveEdgeFromConfig: Failed to find target connector in source linked connectors: ${_}`,
                    ),
                    _.set_linked_connector_ids(
                      _.linked_connector_ids().filter((_) => _ != _),
                    ),
                    _(_);
                })(_, _, _, _, _);
              },
              [_],
            ),
            _ = _.useCallback(
              (_) => {
                const _ = _(_.source),
                  _ = _(_.sourceHandle),
                  _ = _(_.target),
                  _ = _(_.targetHandle);
                _(_, _, _, _, _);
              },
              [_],
            ),
            _ = _.useCallback(
              (_) => {
                const _ = _(_.source),
                  _ = _(_.sourceHandle),
                  _ = _(_.target),
                  _ = _(_.targetHandle);
                return _(_, _, _, _, _);
              },
              [_],
            );
          return _.createElement(
            "div",
            {
              className: _.ProjectModelReactFlow,
            },
            _.createElement(
              _._,
              null,
              _.createElement(
                "div",
                {
                  className: (0, _._)(_.ReactFlowWrapper, _ && "DebugEnabled"),
                  ref: _,
                },
                _.createElement(
                  "div",
                  {
                    className: _.DragSourcePanel,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.DragRow,
                    },
                    _.createElement(
                      "div",
                      {
                        className: (0, _._)(_.DragRowTitle, _.Preprocessing),
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.Title,
                        },
                        (0, _._)("#SteamLearn_Config_Node_Type_Preprocessing"),
                      ),
                      _.createElement("div", {
                        className: _.SpacerLine,
                      }),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: (0, _._)(_.DragRowElements, _.Preprocessing),
                      },
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 38,
                        strName: (0, _._)("#SteamLearn_Config_Node_Title_Bert"),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Bert",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 39,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_BertTokenizer",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_BertTokenizer",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 15,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Combine",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Combine",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 7,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_ConditionalExtract",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_ConditionalExtract",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 13,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_ConditionalSwap",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_ConditionalSwap",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 12,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Explode",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Explode",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 21,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Extract",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Extract",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 27,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_ExternalEmbedding",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_ExternalEmbedding",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 14,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_KMeans",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_KMeans",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 18,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Normalize",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Normalize",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 11,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Onehot",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Onehot",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 9,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Shuffle",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Shuffle",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 10,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_SyncedShuffle",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_SyncedShuffle",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 29,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_SequenceSplit",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_SequenceSplit",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 16,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_TextVectorization",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_TextVectorization",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 32,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_TokenMask",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_TokenMask",
                        ),
                      }),
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.DragRow,
                    },
                    _.createElement(
                      "div",
                      {
                        className: (0, _._)(_.DragRowTitle, _.Keras),
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.Title,
                        },
                        (0, _._)("#SteamLearn_Config_Node_Type_Keras"),
                      ),
                      _.createElement("div", {
                        className: _.SpacerLine,
                      }),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: (0, _._)(_.DragRowElements, _.Keras),
                      },
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 17,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_BatchNormalization",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_BatchNormalization",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 40,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_BertFinetune",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_BertFinetune",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 8,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Concat",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Concat",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 22,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Conv1D",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Conv1D",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 2,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Dense",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Dense",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 3,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_DenseStack",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_DenseStack",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 20,
                        strName: (0, _._)("#SteamLearn_Config_Node_Title_Dot"),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Dot",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 4,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Dropout",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Dropout",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 5,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Embedding",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Embedding",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 35,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_ExternalModel",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_ExternalModel",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 24,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Flatten",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Flatten",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 31,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_GlobalAvgPooling1D",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_GlobalAvgPooling1D",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 25,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_GlobalMaxPooling1D",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_GlobalMaxPooling1D",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 33,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_MaskedHead",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_MaskedHead",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 23,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_MaxPooling1D",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_MaxPooling1D",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 19,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_NamedInference",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_NamedInference",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 36,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Reshape2D",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Reshape2D",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 37,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_RowExtract",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_RowExtract",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 34,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_TokenTransformer",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_TokenTransformer",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 26,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_Transformer",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_Transformer",
                        ),
                      }),
                      _.createElement(_, {
                        fnDragStart: _,
                        eType: 30,
                        strName: (0, _._)(
                          "#SteamLearn_Config_Node_Title_WeightedAverage",
                        ),
                        strTooltip: (0, _._)(
                          "#SteamLearn_Config_Node_Tooltip_WeightedAverage",
                        ),
                      }),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: (0, _._)(_.DebugToggle, _ && _.Enabled),
                        onClick: () => _(!_),
                      },
                      "Debug",
                    ),
                  ),
                ),
                _.createElement(_._, {
                  nodeTypes: _,
                  nodes: _,
                  edges: _,
                  onNodesChange: _,
                  onEdgesChange: _,
                  onNodeDragStop: _,
                  onConnect: _,
                  onInit: __webpack_require__,
                  onDrop: _,
                  onDragOver: _,
                  onReconnect: _,
                  onReconnectStart: _,
                  onReconnectEnd: _,
                  snapToGrid: !0,
                  snapGrid: [5, 5],
                  fitView: !0,
                  fitViewOptions: {
                    minZoom: 1,
                    maxZoom: 1,
                  },
                  isValidConnection: _,
                }),
              ),
            ),
          );
        };
      function _(_) {
        switch (_) {
          case 8:
            return "nodeConcat";
          case 15:
            return "nodeCombine";
          case 2:
            return "nodeDense";
          case 3:
            return "nodeDenseStack";
          case 4:
            return "nodeDropout";
          case 1:
            return "nodeInput";
          case 5:
            return "nodeEmbedding";
          case 6:
            return "nodeTrain";
          case 9:
            return "nodeShuffle";
          case 10:
            return "nodeSyncedShuffle";
          case 11:
            return "nodeOnehot";
          case 12:
            return "nodeExplode";
          case 13:
            return "nodeConditionalSwap";
          case 7:
            return "nodeConditionalExtract";
          case 14:
            return "nodeKMeans";
          case 16:
            return "nodeTextVectorization";
          case 17:
            return "nodeBatchNormalization";
          case 18:
            return "nodeNormalize";
          case 19:
            return "nodeNamedInference";
          case 20:
            return "nodeDot";
          case 21:
            return "nodeExtract";
          case 22:
            return "nodeConv1D";
          case 23:
            return "nodeMaxPooling1D";
          case 24:
            return "nodeFlatten";
          case 25:
            return "nodeGlobalMaxPooling1D";
          case 31:
            return "nodeGlobalAvgPooling1D";
          case 26:
            return "nodeTransformer";
          case 29:
            return "nodeSequenceSplit";
          case 30:
            return "nodeWeightedAverage";
          case 32:
            return "nodeTokenMask";
          case 34:
            return "nodeTokenTransformer";
          case 33:
            return "nodeMaskedHead";
          case 35:
            return "nodeExternalModel";
          case 27:
            return "nodeExternalEmbedding";
          case 36:
            return "nodeReshape2D";
          case 37:
            return "nodeRowExtract";
          case 38:
            return "nodeBert";
          case 39:
            return "nodeBertTokenizer";
          case 40:
            return "nodeBertFinetune";
          default:
            (0, _._)(!1, `Unknown type in GetNodeTypeString: ${_}`);
        }
        return "";
      }
      function _(_) {
        let _ = [],
          _ = [];
        for (const _ of _.project_nodes()) {
          _.push({
            _: _(_.node_id()),
            type: _(_.type()),
            position: {
              _: _.location_x(),
              _: _.location_y(),
            },
            data: {
              msgNode: _,
            },
          });
          for (const _ of _.connectors())
            for (const _ of _.linked_connector_ids()) {
              const _ = _.project_nodes().find(
                (_) =>
                  null != _.connectors().find((_) => _.connector_id() == _),
              );
              _
                ? __webpack_require__.push({
                    _: _(_.connector_id(), _),
                    source: _(_.node_id()),
                    sourceHandle: _(_.connector_id()),
                    target: _(_.node_id()),
                    targetHandle: _(_),
                  })
                : console.error(
                    `Failed to find node ${_.node_id()} connector ${_.connector_id()} target ${_}`,
                  );
            }
        }
        return [_, _];
      }
      var _ = __webpack_require__("chunkid");
      const _ = () => {
          const { msgWorkingProjectConfig: _ } = _(),
            _ = _(),
            _ = _(_.project_id(), _.published_version(), 5).data,
            [_, _] = _.useState(!1);
          if (!_.isSuccess) return null;
          let _ = [];
          for (const _ of _.data_source_element_usages())
            _.push({
              label: _.data_element_path(),
              value: _.data_element_path(),
            });
          let _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_Histogram_ElementPathNone",
                ),
                value: "",
              },
              ..._,
            ],
            _ = [],
            _ = 0;
          for (const _ of _.data)
            _.data_source_ids().includes(__webpack_require__._()) &&
              ((_ = __webpack_require__.key_type()),
              __webpack_require__.supports_auto_snapshots() &&
                _.push({
                  label: __webpack_require__.name(),
                  value: __webpack_require__._(),
                }));
          const _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_Manual",
                ),
                value: 0,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_AutoAccountIDs",
                ),
                value: 1,
                hidden: 2 != _,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_AutoAppIDs",
                ),
                value: 2,
                hidden: 3 != _,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_ForumSpam",
                ),
                value: 4,
                hidden: 6 != _,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_GameReview",
                ),
                value: 5,
                hidden: 4 != _,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_GameReviewAll",
                ),
                value: 6,
                hidden: 4 != _,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_Comments",
                ),
                value: 7,
                hidden: 5 != _,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_OtherProject",
                ),
                value: 3,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_DataSource",
                ),
                value: 8,
                hidden: 0 == _.length,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_MarketingMessage",
                ),
                value: 9,
                hidden: 7 != _,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_ForumThread",
                ),
                value: 10,
                hidden: 8 != _,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_SnapshotType_ReviewsByApp",
                ),
                value: 11,
                hidden: 10 != _,
              },
            ],
            _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_AccountIDFilter_None",
                ),
                value: 0,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_AccountIDFilter_Activity",
                ),
                value: 1,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_AccountIDFilter_Wishlists",
                ),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_SnapshotFilter_AccountIDFilter_WishlistsRecent",
                ),
                value: 3,
              },
            ],
            _ = [
              {
                label: (0, _._)(
                  "#SteamLearn_ScheduledTrain_IntervalNotScheduled",
                ),
                value: 0,
              },
              {
                label: (0, _._)("#SteamLearn_ScheduledTrain_IntervalDaily"),
                value: 2,
              },
              {
                label: (0, _._)("#SteamLearn_ScheduledTrain_IntervalWeekly"),
                value: 3,
              },
              {
                label: (0, _._)("#SteamLearn_ScheduledTrain_IntervalMonthly"),
                value: 4,
              },
            ],
            _ = [
              {
                label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek_Sunday"),
                value: 0,
              },
              {
                label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek_Monday"),
                value: 1,
              },
              {
                label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek_Tuesday"),
                value: 2,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_ScheduledTrain_DayOfWeek_Wednesday",
                ),
                value: 3,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_ScheduledTrain_DayOfWeek_Thursday",
                ),
                value: 4,
              },
              {
                label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek_Friday"),
                value: 5,
              },
              {
                label: (0, _._)(
                  "#SteamLearn_ScheduledTrain_DayOfWeek_Saturday",
                ),
                value: 6,
              },
            ],
            _ =
              ((0, _._)("#SteamLearn_SnapshotFilter_SnapshotLocation_0"),
              (0, _._)("#SteamLearn_SnapshotFilter_SnapshotLocation_1"),
              (0, _._)("#SteamLearn_SnapshotFilter_SnapshotLocation_2"),
              _.snapshot_filter().histogram().data_element_path().length > 0),
            _ =
              _.snapshot_filter().filter_range()?.data_element_path()?.length >
              0,
            _ = 1 == _.snapshot_config().snapshot_type(),
            _ = 2 == _.snapshot_config().snapshot_type(),
            _ = 4 == _.snapshot_config().snapshot_type(),
            _ =
              5 == _.snapshot_config().snapshot_type() ||
              6 == _.snapshot_config().snapshot_type(),
            _ = 7 == _.snapshot_config().snapshot_type(),
            _ = 3 == _.snapshot_config().snapshot_type(),
            _ = 8 == _.snapshot_config().snapshot_type(),
            _ = 9 == _.snapshot_config().snapshot_type(),
            _ = 10 == _.snapshot_config().snapshot_type(),
            _ =
              1 == _.snapshot_config().snapshot_type() &&
              1 == _.snapshot_config().config_account_ids().filter(),
            _ = 0 != _.snapshot_config().snapshot_schedule_type(),
            _ = 3 == _.snapshot_config().snapshot_schedule_type(),
            _ = 4 == _.snapshot_config().snapshot_schedule_type();
          let _ = "";
          switch (__webpack_require__?.autosnapshot_status()) {
            case 0:
              _ = (0, _._)("#SteamLearn_SnapshotStatus_AS_Error");
              break;
            case 1:
              _ = (0, _._)("#SteamLearn_SnapshotStatus_AS_InProgress");
              break;
            case 2:
              _ = (0, _._)("#SteamLearn_SnapshotStatus_AS_Completed");
              break;
            case 3:
              _ = (0, _._)("#SteamLearn_SnapshotStatus_AS_Cancelled");
              break;
            case 4:
              _ = (0, _._)("#SteamLearn_SnapshotStatus_AS_Pending");
              break;
            case 5:
              _ = (0, _._)("#SteamLearn_SnapshotStatus_AS_Cleanup");
          }
          const _ = new Date(
              1e3 * __webpack_require__?.autosnapshot_time_started(),
            ),
            _ = new Date(1e3 * __webpack_require__?.autosnapshot_time_ended());
          let _;
          if (1 == __webpack_require__?.autosnapshot_status()) {
            const _ = new Date().valueOf() - _.valueOf(),
              _ =
                parseInt(__webpack_require__.autosnapshot_key_max()) /
                parseInt(__webpack_require__.autosnapshot_key_current());
            (_ = new Date()), _.setTime(_.getTime() + _ * _);
          }
          return _.createElement(
            "div",
            {
              className: _.ProjectSnapshotFilterPage,
            },
            _.createElement(
              "div",
              {
                className: _.ProjectConfigBody,
              },
              _.createElement(
                "div",
                {
                  className: _.OptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionHeader,
                  },
                  (0, _._)("#SteamLearn_SnapshotFilter_SamplePercent"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.OptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_SnapshotFilter_SamplePercentDesc",
                    _.createElement("ul", null),
                    _.createElement("li", null),
                  ),
                ),
                _.createElement(_, {
                  label: (0, _._)("#SteamLearn_SnapshotFilter_SamplePercent"),
                  fnGetInitialValue: () =>
                    _.snapshot_filter().sample_reduce_percent().toString() ||
                    "100",
                  fnValidateValue: (_) => _(_, 0, 1e3),
                  fnSetValue: (_) =>
                    _.snapshot_filter().set_sample_reduce_percent(parseInt(_)),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.OptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionHeader,
                  },
                  (0, _._)("#SteamLearn_SnapshotFilter_Histogram"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.OptionDesc,
                  },
                  (0, _._)("#SteamLearn_SnapshotFilter_HistogramDesc"),
                ),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_SnapshotFilter_Histogram_ElementPath",
                  ),
                  fnGetValue: () =>
                    _.snapshot_filter().histogram().data_element_path(),
                  fnSetValue: (_) =>
                    _.snapshot_filter().histogram().set_data_element_path(_),
                  options: _,
                }),
                _.createElement(_, {
                  label: (0, _._)("#SteamLearn_SnapshotFilter_HistogramMin"),
                  hidden: !_,
                  digitCount: 2,
                  fnGetInitialValue: () =>
                    _.snapshot_filter().histogram().min_value().toFixed(2) ||
                    "0.00",
                  fnValidateValue: (_) => _(_),
                  fnSetValue: (_) =>
                    _.snapshot_filter()
                      .histogram()
                      .set_min_value(parseFloat(_)),
                }),
                _.createElement(_, {
                  label: (0, _._)("#SteamLearn_SnapshotFilter_HistogramMax"),
                  hidden: !_,
                  digitCount: 2,
                  fnGetInitialValue: () =>
                    _.snapshot_filter().histogram().max_value().toFixed(2) ||
                    "0.00",
                  fnValidateValue: (_) => _(_),
                  fnSetValue: (_) =>
                    _.snapshot_filter()
                      .histogram()
                      .set_max_value(parseFloat(_)),
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_SnapshotFilter_HistogramBuckets",
                  ),
                  hidden: !_,
                  fnGetInitialValue: () =>
                    _.snapshot_filter().histogram().num_buckets().toString() ||
                    "0",
                  fnValidateValue: (_) => _(_, 2, void 0),
                  fnSetValue: (_) =>
                    _.snapshot_filter()
                      .histogram()
                      .set_num_buckets(parseInt(_)),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.OptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionHeader,
                  },
                  (0, _._)("#SteamLearn_SnapshotFilter_Range"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.OptionDesc,
                  },
                  (0, _._)("#SteamLearn_SnapshotFilter_RangeDesc"),
                ),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_SnapshotFilter_Range_ElementPath",
                  ),
                  fnGetValue: () =>
                    _.snapshot_filter().filter_range().data_element_path(),
                  fnSetValue: (_) =>
                    _.snapshot_filter().filter_range().set_data_element_path(_),
                  options: _,
                }),
                _.createElement(_, {
                  label: (0, _._)("#SteamLearn_SnapshotFilter_RangeMin"),
                  hidden: !_,
                  digitCount: 2,
                  fnGetInitialValue: () =>
                    _.snapshot_filter()
                      .filter_range()
                      ?.min_value()
                      ?.toFixed(2) || "0.00",
                  fnValidateValue: (_) => _(_),
                  fnSetValue: (_) =>
                    _.snapshot_filter()
                      .filter_range()
                      .set_min_value(parseFloat(_)),
                }),
                _.createElement(_, {
                  label: (0, _._)("#SteamLearn_SnapshotFilter_RangeMax"),
                  hidden: !_,
                  digitCount: 2,
                  fnGetInitialValue: () =>
                    _.snapshot_filter()
                      .filter_range()
                      ?.max_value()
                      ?.toFixed(2) || "0.00",
                  fnValidateValue: (_) => _(_),
                  fnSetValue: (_) =>
                    _.snapshot_filter()
                      .filter_range()
                      .set_max_value(parseFloat(_)),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.OptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionHeader,
                  },
                  (0, _._)("#SteamLearn_DataSettings_SnapshotDuration"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.OptionDesc,
                  },
                  (0, _._)("#SteamLearn_DataSettings_SnapshotDurationDesc"),
                ),
                _.createElement(_, {
                  label: (0, _._)("#SteamLearn_DataSettings_SnapshotDuration"),
                  fnGetInitialValue: () =>
                    _.data_retention_config()
                      .snapshot_keep_duration_days()
                      ?.toString() || "0",
                  fnValidateValue: (_) => _(_, 1),
                  fnSetValue: (_) =>
                    _.data_retention_config().set_snapshot_keep_duration_days(
                      parseInt(_),
                    ),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.OptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionHeader,
                  },
                  (0, _._)("#SteamLearn_DataSettings_FetchKeepCount"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.OptionDesc,
                  },
                  (0, _._)("#SteamLearn_DataSettings_FetchKeepCountDesc"),
                ),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_DataSettings_FetchKeepCountInput",
                  ),
                  fnGetInitialValue: () =>
                    _.data_retention_config().fetch_keep_count()?.toString() ||
                    "0",
                  fnValidateValue: (_) => _(_, 1),
                  fnSetValue: (_) =>
                    _.data_retention_config().set_fetch_keep_count(parseInt(_)),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.OptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionHeader,
                  },
                  (0, _._)("#SteamLearn_DataSettings_Compress"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.OptionDesc,
                  },
                  (0, _._)("#SteamLearn_DataSettings_CompressDesc"),
                ),
                _.createElement(_, {
                  label: (0, _._)("#SteamLearn_DataSettings_CompressInput"),
                  fnGetInitialValue: () => _.snapshot_config().compress() || !1,
                  fnSetValue: (_) => _.snapshot_config().set_compress(_),
                }),
              ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _.createElement(
                "div",
                {
                  className: _.OptionBlock,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionHeader,
                  },
                  (0, _._)("#SteamLearn_SnapshotFilter_SnapshotType"),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.OptionDesc,
                  },
                  (0, _._)(
                    "#SteamLearn_SnapshotFilter_SnapshotTypeDesc",
                    _.createElement("ul", null),
                    _.createElement("li", null),
                  ),
                ),
                _.createElement(_, {
                  label: (0, _._)("#SteamLearn_SnapshotFilter_SnapshotType"),
                  fnGetValue: () => _.snapshot_config().snapshot_type(),
                  fnSetValue: (_) => {
                    return (
                      (_ = parseInt(_)),
                      _.snapshot_config().set_snapshot_type(_),
                      void (
                        8 == _ &&
                        _.snapshot_config()
                          .config_data_source()
                          .set_data_source_id(_[0].value)
                      )
                    );
                    var _;
                  },
                  options: _,
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_SnapshotFilter_SnapshotAccountIDFilter",
                  ),
                  hidden: !_,
                  fnGetValue: () =>
                    _.snapshot_config().config_account_ids().filter(),
                  fnSetValue: (_) =>
                    _.snapshot_config()
                      .config_account_ids()
                      .set_filter(parseInt(_)),
                  options: _,
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_SnapshotFilter_Snapshot_Percentage",
                  ),
                  hidden: !_,
                  fnGetInitialValue: () =>
                    _.snapshot_config()
                      .config_account_ids()
                      ?.percent()
                      ?.toString() || "100",
                  fnValidateValue: (_) => _(_, 1, 100),
                  fnSetValue: (_) =>
                    _.snapshot_config()
                      .config_account_ids()
                      .set_percent(parseInt(_)),
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_SnapshotFilter_SnapshotAccountID_Recency",
                  ),
                  hidden: !_ || !_,
                  fnGetInitialValue: () =>
                    _.snapshot_config()
                      .config_account_ids()
                      ?.activity_recency_days()
                      ?.toString() || "180",
                  fnValidateValue: (_) => _(_, 1, void 0),
                  fnSetValue: (_) =>
                    _.snapshot_config()
                      .config_account_ids()
                      .set_activity_recency_days(parseInt(_)),
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_SnapshotFilter_Snapshot_Percentage",
                  ),
                  hidden: !_,
                  fnGetInitialValue: () =>
                    _.snapshot_config()
                      .config_app_ids()
                      ?.percent()
                      ?.toString() || "100",
                  fnValidateValue: (_) => _(_, 1, 100),
                  fnSetValue: (_) =>
                    _.snapshot_config()
                      .config_app_ids()
                      .set_percent(parseInt(_)),
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_SnapshotFilter_SnapshotAppID_Recency",
                  ),
                  hidden: !_,
                  fnGetInitialValue: () =>
                    _.snapshot_config()
                      .config_app_ids()
                      ?.release_recency_days()
                      ?.toString() || "240",
                  fnValidateValue: (_) => _(_, 1, void 0),
                  fnSetValue: (_) =>
                    _.snapshot_config()
                      .config_app_ids()
                      .set_release_recency_days(parseInt(_)),
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_SnapshotFilter_SnapshotOther_ProjectID",
                  ),
                  hidden: !_,
                  fnGetInitialValue: () =>
                    _.snapshot_config()
                      .config_other_project()
                      ?.project_id()
                      ?.toString() || "0",
                  fnValidateValue: (_) => _(_, 1),
                  fnSetValue: (_) =>
                    _.snapshot_config()
                      .config_other_project()
                      .set_project_id(parseInt(_)),
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_SnapshotFilter_SnapshotOther_PublishedVersion",
                  ),
                  hidden: !_,
                  fnGetInitialValue: () =>
                    _.snapshot_config()
                      .config_other_project()
                      ?.published_version()
                      ?.toString() || "0",
                  fnValidateValue: (_) => _(_, 1),
                  fnSetValue: (_) =>
                    _.snapshot_config()
                      .config_other_project()
                      .set_published_version(parseInt(_)),
                }),
                _.createElement(_, {
                  label: (0, _._)(
                    "#SteamLearn_SnapshotFilter_SnapshotDataSource_DataSource",
                  ),
                  fnGetValue: () =>
                    _.snapshot_config().config_data_source().data_source_id(),
                  fnSetValue: (_) =>
                    _.snapshot_config()
                      .config_data_source()
                      .set_data_source_id(parseInt(_)),
                  options: _,
                  hidden: !_,
                }),
              ),
              (_ || _ || _ || _ || _ || _ || _ || _) &&
                _.createElement(
                  "div",
                  {
                    className: _.OptionBlock,
                  },
                  _.createElement("div", {
                    className: _.Separator,
                  }),
                  _.createElement(
                    "div",
                    {
                      className: _.OptionHeader,
                    },
                    (0, _._)("#SteamLearn_SnapshotFilter_SnapshotSchedule"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDesc,
                    },
                    (0, _._)("#SteamLearn_SnapshotFilter_SnapshotScheduleDesc"),
                  ),
                  _.createElement(_, {
                    label: (0, _._)("#SteamLearn_ScheduledTrain_Heading"),
                    fnGetValue: () =>
                      _.snapshot_config().snapshot_schedule_type(),
                    fnSetValue: (_) =>
                      _.snapshot_config().set_snapshot_schedule_type(
                        parseInt(_),
                      ),
                    options: _,
                  }),
                  _.createElement(_, {
                    label: (0, _._)("#SteamLearn_ScheduledTrain_Hour"),
                    hidden: !_,
                    fnGetInitialValue: () =>
                      _.snapshot_config()
                        .snapshot_schedule_hour_of_day()
                        .toString() || "12",
                    fnValidateValue: (_) => _(_, 0, 24),
                    fnSetValue: (_) =>
                      _.snapshot_config().set_snapshot_schedule_hour_of_day(
                        parseInt(_),
                      ),
                  }),
                  _.createElement(_, {
                    label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfMonth"),
                    hidden: !_,
                    fnGetInitialValue: () =>
                      _.snapshot_config()
                        .snapshot_schedule_day_of_month()
                        .toString() || "1",
                    fnValidateValue: (_) => _(_, 1, 31),
                    fnSetValue: (_) =>
                      _.snapshot_config().set_snapshot_schedule_day_of_month(
                        parseInt(_),
                      ),
                  }),
                  _.createElement(_, {
                    label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek"),
                    hidden: !_,
                    fnGetValue: () =>
                      _.snapshot_config().snapshot_schedule_day_of_week(),
                    fnSetValue: (_) =>
                      _.snapshot_config().set_snapshot_schedule_day_of_week(
                        parseInt(_),
                      ),
                    options: _,
                  }),
                  _.createElement("div", {
                    className: _.Separator,
                  }),
                  _.createElement(
                    "div",
                    {
                      className: _.OptionHeader,
                    },
                    (0, _._)("#SteamLearn_SnapshotFilter_SnapshotJobs"),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.OptionDesc,
                    },
                    (0, _._)("#SteamLearn_SnapshotFilter_SnapshotJobsDesc"),
                  ),
                  _.createElement(_, {
                    label: (0, _._)("#SteamLearn_SnapshotFilter_SnapshotJobs"),
                    fnGetInitialValue: () =>
                      _.snapshot_config().job_count()?.toString() || "200",
                    fnValidateValue: (_) => _(_, 1, 600),
                    fnSetValue: (_) =>
                      _.snapshot_config().set_job_count(parseInt(_)),
                  }),
                ),
              _.createElement("div", {
                className: _.Separator,
              }),
              _ &&
                _.createElement(
                  "div",
                  {
                    className: _.SnapshotStatus,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.StatusRow,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.StatusLabel,
                      },
                      (0, _._)("#SteamLearn_SnapshotStatus_SnapshotCount"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.StatusValue,
                      },
                      __webpack_require__.snapshot_count()?.toLocaleString(),
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.StatusRow,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.StatusLabel,
                      },
                      (0, _._)("#SteamLearn_SnapshotStatus_SnapshotObjects"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.StatusValue,
                      },
                      __webpack_require__
                        .snapshot_object_count()
                        ?.toLocaleString(),
                    ),
                  ),
                  _ &&
                    _.createElement(
                      "div",
                      {
                        className: _.Autosnapshots,
                      },
                      _.createElement("div", {
                        className: _.Separator,
                      }),
                      _.createElement(
                        "div",
                        {
                          className: _.StatusRow,
                        },
                        _.createElement(
                          "div",
                          {
                            className: _.StatusLabel,
                          },
                          (0, _._)("#SteamLearn_SnapshotStatus_AS_Status"),
                        ),
                        _.createElement(
                          "div",
                          {
                            className: _.StatusValue,
                          },
                          _,
                        ),
                      ),
                      _.createElement(
                        "div",
                        {
                          className: _.StatusRow,
                        },
                        _.createElement(
                          "div",
                          {
                            className: _.StatusLabel,
                          },
                          (0, _._)("#SteamLearn_SnapshotStatus_AS_KeyCur"),
                        ),
                        _.createElement(
                          "div",
                          {
                            className: _.StatusValue,
                          },
                          __webpack_require__.autosnapshot_key_current(),
                        ),
                      ),
                      _.createElement(
                        "div",
                        {
                          className: _.StatusRow,
                        },
                        _.createElement(
                          "div",
                          {
                            className: _.StatusLabel,
                          },
                          (0, _._)("#SteamLearn_SnapshotStatus_AS_KeyMax"),
                        ),
                        _.createElement(
                          "div",
                          {
                            className: _.StatusValue,
                          },
                          __webpack_require__.autosnapshot_key_max(),
                        ),
                      ),
                      _.createElement(
                        "div",
                        {
                          className: _.StatusRow,
                        },
                        _.createElement(
                          "div",
                          {
                            className: _.StatusLabel,
                          },
                          (0, _._)("#SteamLearn_SnapshotStatus_AS_StartTime"),
                        ),
                        _.createElement(
                          "div",
                          {
                            className: _.StatusValue,
                          },
                          _.getHours() +
                            ":" +
                            _.getMinutes().toString().padStart(2, "0") +
                            ":" +
                            _.getSeconds().toString().padStart(2, "0") +
                            ", " +
                            _.toDateString(),
                        ),
                      ),
                      __webpack_require__.autosnapshot_time_ended() > 0 &&
                        _.createElement(
                          "div",
                          {
                            className: _.StatusRow,
                          },
                          _.createElement(
                            "div",
                            {
                              className: _.StatusLabel,
                            },
                            (0, _._)("#SteamLearn_SnapshotStatus_AS_EndTime"),
                          ),
                          _.createElement(
                            "div",
                            {
                              className: _.StatusValue,
                            },
                            _.getHours() +
                              ":" +
                              _.getMinutes().toString().padStart(2, "0") +
                              ":" +
                              _.getSeconds().toString().padStart(2, "0") +
                              ", " +
                              _.toDateString(),
                          ),
                        ),
                      _ &&
                        _.createElement(
                          "div",
                          {
                            className: _.StatusRow,
                          },
                          _.createElement(
                            "div",
                            {
                              className: _.StatusLabel,
                            },
                            (0, _._)(
                              "#SteamLearn_SnapshotStatus_AS_EstimatedEndTime",
                            ),
                          ),
                          _.createElement(
                            "div",
                            {
                              className: _.StatusValue,
                            },
                            _.getHours() +
                              ":" +
                              _.getMinutes().toString().padStart(2, "0") +
                              ":" +
                              _.getSeconds().toString().padStart(2, "0") +
                              ", " +
                              _.toDateString(),
                          ),
                        ),
                    ),
                  _ &&
                    _.createElement("div", {
                      className: _.Separator,
                    }),
                  _ &&
                    _.createElement(
                      "button",
                      {
                        className: (0, _._)(
                          _.DialogButton,
                          _.ShowExamplesButton,
                        ),
                        onClick: () => _(!_),
                      },
                      (0, _._)(
                        _
                          ? "#SteamLearn_SnapshotStatus_HideExamples"
                          : "#SteamLearn_SnapshotStatus_ShowExamples",
                      ),
                    ),
                  _ &&
                    _ &&
                    __webpack_require__.snapshot_examples().map((_, _) =>
                      _.createElement(_, {
                        key: `snapshotexample_${_}`,
                        nExample: _,
                        msgSnapshotExample: _,
                      }),
                    ),
                ),
            ),
          );
        },
        _ = (_) => {
          const { msgWorkingProjectConfig: _ } = _(),
            _ = _.msgSnapshotExample.map_storage_elements().sort((_, _) => {
              const _ = _.data_source_element_usages().find(
                  (_) => _.sql_column() == _.key(),
                ),
                _ = _.data_source_element_usages().find(
                  (_) => _.sql_column() == __webpack_require__.key(),
                );
              return _.data_element_path() < _.data_element_path() ? -1 : 1;
            });
          return _.createElement(
            "div",
            {
              className: _.SnapshotExample,
            },
            _.createElement(
              "div",
              {
                className: _.ExampleHeader,
              },
              (0, _._)(
                "#SteamLearn_SnapshotStatus_ExampleSnapshot",
                _.nExample + 1,
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.ExampleValues,
              },
              __webpack_require__.map((_) => {
                const _ = _.data_source_element_usages().find(
                  (_) =>
                    _.input() > 0 &&
                    _.sql_column() == __webpack_require__.key(),
                );
                return _
                  ? _.createElement(
                      "div",
                      {
                        key: `snapshotexamplevalue_${_.nExample}_${__webpack_require__.key()}`,
                        className: _.SnapshotExampleEntry,
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.DataElementPath,
                        },
                        _.data_element_path(),
                      ),
                      _.createElement(
                        "div",
                        {
                          className: _.DataElementValue,
                        },
                        __webpack_require__.value().string_value()?.length > 0
                          ? __webpack_require__.value().string_value()
                          : __webpack_require__.value().float_value(),
                      ),
                    )
                  : null;
              }),
            ),
          );
        };
      var _ = __webpack_require__("chunkid");
      const _ = () => {
        const { msgWorkingProjectConfig: _ } = _(),
          _ = [
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_Optimizer_None"),
              value: 0,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_Optimizer_Adam"),
              value: 2,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_Optimizer_AdamW"),
              value: 5,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Train_Optimizer_Adadelta",
              ),
              value: 3,
            },
            {
              label: (0, _._)(
                "#SteamLearn_Config_Node_Train_Optimizer_Adagrad",
              ),
              value: 4,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_Optimizer_SGD"),
              value: 1,
            },
          ],
          _ = [
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_GPU_V100"),
              value: 0,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_GPU_A100"),
              value: 1,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_GPU_H100"),
              value: 2,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_GPU_H100_SXM"),
              value: 3,
            },
            {
              label: (0, _._)("#SteamLearn_Config_Node_Train_GPU_H200"),
              value: 4,
            },
          ];
        return _.createElement(
          "div",
          {
            className: _.ProjectTrainSettingsPage,
          },
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_TrainSettings_FetchWorkers"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)("#SteamLearn_TrainSettings_FetchWorkersDesc"),
            ),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_TrainSettings_FetchWorkersInput"),
              fnGetInitialValue: () =>
                _.train_config().fetch_workers().toString() || "16",
              fnValidateValue: (_) => _(_, 0, 1024),
              fnSetValue: (_) =>
                _.train_config().set_fetch_workers(parseInt(_)),
            }),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_Config_Node_Train_GPU"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)(
                "#SteamLearn_Config_Node_Train_GPUDesc",
                _.createElement("ul", null),
                _.createElement("li", null),
              ),
            ),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_Config_Node_Train_GPU"),
              fnGetValue: () => _.train_config().train_gpu(),
              fnSetValue: (_) => _.train_config().set_train_gpu(parseInt(_)),
              options: _,
            }),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_Config_Node_Train_GPUCount"),
              fnGetInitialValue: () =>
                _.train_config().gpu_count()?.toString() || "1",
              fnValidateValue: (_) => _(_, 1, 4),
              fnSetValue: (_) => _.train_config().set_gpu_count(parseInt(_)),
            }),
            _.createElement(
              "div",
              {
                className: _.CheckboxWithLabel,
              },
              _.createElement(
                "label",
                {
                  htmlFor: "editmixedprecision",
                },
                (0, _._)("#SteamLearn_Config_Node_Train_MixedPrecision"),
              ),
              _.createElement("input", {
                type: "checkbox",
                _: "editmixedprecision",
                checked: _.train_config().mixed_precision(),
                onChange: () => {
                  _.train_config().set_mixed_precision(
                    !_.train_config().mixed_precision(),
                  ),
                    _(_);
                },
              }),
            ),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_TrainSettings_FetchChunkSize"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)("#SteamLearn_TrainSettings_FetchChunkSizeDesc"),
            ),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_TrainSettings_FetchChunkSizeInput"),
              fnGetInitialValue: () =>
                _.train_config().fetch_chunk_size()?.toString() || "10000",
              fnValidateValue: (_) => _(_, 10, 1e5),
              fnSetValue: (_) =>
                _.train_config().set_fetch_chunk_size(parseInt(_)),
            }),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_TrainSettings_TrainBatchSize"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)("#SteamLearn_TrainSettings_TrainBatchSizeDesc"),
            ),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_TrainSettings_TrainBatchSizeInput"),
              fnGetInitialValue: () =>
                _.train_config().train_batch_size()?.toString() || "1000",
              fnValidateValue: (_) => _(_, 10, 5e3),
              fnSetValue: (_) =>
                _.train_config().set_train_batch_size(parseInt(_)),
            }),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_TrainSettings_TrainOptimizer"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)(
                "#SteamLearn_TrainSettings_TrainOptimizerDesc",
                _.createElement("ul", null),
                _.createElement("li", null),
              ),
            ),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_TrainSettings_TrainOptimizer"),
              fnGetValue: () => _.train_config().train_optimizer(),
              fnSetValue: (_) =>
                _.train_config().set_train_optimizer(parseInt(_)),
              options: _,
            }),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_TrainSettings_TrainLearningRate"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)(
                "#SteamLearn_TrainSettings_TrainLearningRateDesc",
                _.createElement("ul", null),
                _.createElement("li", null),
              ),
            ),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_TrainSettings_TrainLearningRate"),
              digitCount: 5,
              fnGetInitialValue: () =>
                _.train_config().train_learning_rate()?.toFixed(5) || "0",
              fnValidateValue: (_) => _(_, 0, 1),
              fnSetValue: (_) =>
                _.train_config().set_train_learning_rate(parseFloat(_)),
            }),
            _.createElement(_, {
              label: (0, _._)(
                "#SteamLearn_TrainSettings_TrainLearningRateWarmupSteps",
              ),
              fnGetInitialValue: () =>
                _.train_config().train_warmup_steps()?.toString() || "0",
              fnValidateValue: (_) => _(_, 0, void 0),
              fnSetValue: (_) =>
                _.train_config().set_train_warmup_steps(parseInt(_)),
            }),
            _.createElement(_, {
              label: (0, _._)(
                "#SteamLearn_TrainSettings_TrainLearningRateWarmupStart",
              ),
              digitCount: 5,
              fnGetInitialValue: () =>
                _.train_config().train_warmup_start()?.toFixed(5) || "0.00000",
              fnValidateValue: (_) => _(_, 0, 1),
              fnSetValue: (_) =>
                _.train_config().set_train_warmup_start(parseFloat(_)),
            }),
            _.createElement(_, {
              label: (0, _._)(
                "#SteamLearn_TrainSettings_TrainLearningRateDecaySteps",
              ),
              fnGetInitialValue: () =>
                _.train_config().train_decay_steps()?.toString() || "0",
              fnValidateValue: (_) => _(_, 0, void 0),
              fnSetValue: (_) =>
                _.train_config().set_train_decay_steps(parseInt(_)),
            }),
            _.createElement(_, {
              label: (0, _._)(
                "#SteamLearn_TrainSettings_TrainLearningRateDecayRate",
              ),
              digitCount: 5,
              fnGetInitialValue: () =>
                _.train_config().train_decay_rate()?.toFixed(5) || "0.00000",
              fnValidateValue: (_) => _(_, 0, 1),
              fnSetValue: (_) =>
                _.train_config().set_train_decay_rate(parseFloat(_)),
            }),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_TrainSettings_TrainWeightDecay"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)(
                "#SteamLearn_TrainSettings_TrainWeightDecayDesc",
                _.createElement("ul", null),
                _.createElement("li", null),
              ),
            ),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_TrainSettings_TrainWeightDecay"),
              digitCount: 5,
              fnGetInitialValue: () =>
                _.train_config().train_weight_decay()?.toFixed(5) || "0",
              fnValidateValue: (_) => _(_, 0, 1),
              fnSetValue: (_) =>
                _.train_config().set_train_weight_decay(parseFloat(_)),
            }),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_TrainSettings_TrainClipNorm"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)(
                "#SteamLearn_TrainSettings_TrainClipNormDesc",
                _.createElement("ul", null),
                _.createElement("li", null),
              ),
            ),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_TrainSettings_TrainClipNorm"),
              digitCount: 5,
              fnGetInitialValue: () =>
                _.train_config().train_clip_norm()?.toFixed(5) || "0",
              fnValidateValue: (_) => _(_, 0, 1),
              fnSetValue: (_) =>
                _.train_config().set_train_clip_norm(parseFloat(_)),
            }),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_TrainSettings_TrainClassWeights"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)(
                "#SteamLearn_TrainSettings_TrainClassWeightsDesc",
                _.createElement("ul", null),
                _.createElement("li", null),
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.CheckboxWithLabel,
              },
              _.createElement(
                "label",
                {
                  htmlFor: "editclassweights",
                },
                (0, _._)("#SteamLearn_TrainSettings_TrainClassWeights"),
              ),
              _.createElement("input", {
                type: "checkbox",
                _: "editclassweights",
                checked: _.train_config().use_class_weights(),
                onChange: () => {
                  _.train_config().set_use_class_weights(
                    !_.train_config().use_class_weights(),
                  ),
                    _(_);
                },
              }),
            ),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_TrainSettings_TrainEpochCount"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)("#SteamLearn_TrainSettings_TrainEpochCountDesc"),
            ),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_TrainSettings_TrainEpochCountInput"),
              fnGetInitialValue: () =>
                _.train_config().train_epoch_count()?.toString() || "10",
              fnValidateValue: (_) => _(_, 1, 1e3),
              fnSetValue: (_) =>
                _.train_config().set_train_epoch_count(parseInt(_)),
            }),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)(
                "#SteamLearn_TrainSettings_TrainLossImprovementThreshold",
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)(
                "#SteamLearn_TrainSettings_TrainLossImprovementThresholdDesc",
              ),
            ),
            _.createElement(_, {
              label: (0, _._)(
                "#SteamLearn_TrainSettings_TrainLossImprovementThresholdInput",
              ),
              digitCount: 5,
              fnGetInitialValue: () =>
                _.train_config()
                  .train_loss_improvement_threshold()
                  ?.toFixed(5) || "0.00000",
              fnValidateValue: (_) => _(_),
              fnSetValue: (_) => {
                _.train_config().set_train_loss_improvement_threshold(
                  parseFloat(_),
                ),
                  console.log(`Setting str ${_} as ${parseFloat(_)}`);
              },
            }),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)(
                "#SteamLearn_TrainSettings_TrainNoLossImprovementEpochLimit",
              ),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)(
                "#SteamLearn_TrainSettings_TrainNoLossImprovementEpochLimitDesc",
              ),
            ),
            _.createElement(_, {
              label: (0, _._)(
                "#SteamLearn_TrainSettings_TrainNoLossImprovementEpochLimitInput",
              ),
              fnGetInitialValue: () =>
                _.train_config()
                  .train_no_loss_improvement_epoch_limit()
                  ?.toString() || "2",
              fnValidateValue: (_) => _(_, 0, 100),
              fnSetValue: (_) =>
                _.train_config().set_train_no_loss_improvement_epoch_limit(
                  parseInt(_),
                ),
            }),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_TrainSettings_Profile"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)("#SteamLearn_TrainSettings_ProfileDesc"),
            ),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_TrainSettings_ProfileEpoch"),
              fnGetInitialValue: () =>
                _.train_config().profile_epoch()?.toString() || "0",
              fnValidateValue: (_) =>
                _(_, 0, _.train_config().train_epoch_count()),
              fnSetValue: (_) =>
                _.train_config().set_profile_epoch(parseInt(_)),
            }),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_TrainSettings_ProfileBatchStart"),
              fnGetInitialValue: () =>
                _.train_config().profile_start_batch()?.toString() || "0",
              fnValidateValue: (_) => _(_, 0),
              fnSetValue: (_) =>
                _.train_config().set_profile_start_batch(parseInt(_)),
            }),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_TrainSettings_ProfileBatchEnd"),
              fnGetInitialValue: () =>
                _.train_config().profile_end_batch()?.toString() || "0",
              fnValidateValue: (_) => _(_, 0),
              fnSetValue: (_) =>
                _.train_config().set_profile_end_batch(parseInt(_)),
            }),
          ),
        );
      };
      var _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid");
      function _(_) {
        let _ = "";
        return (
          _ > 3600 && ((_ += `${Math.floor(_ / 3600)}:`), (_ %= 3600)),
          (_ += `${String(Math.floor(_ / 60)).padStart(2, "0")}:`),
          (_ %= 60),
          (_ += `${String(Math.floor(_)).padStart(2, "0")}`),
          _
        );
      }
      function _(_, _) {
        if (_.length < _) return _;
        let _ = [];
        const _ = (_.length - 1) / _;
        for (let _ = 0; _ + _ < _.length; _ += _) {
          const _ = _ + _,
            _ = 1 - (_ - Math.floor(_)),
            _ = _ - Math.floor(_);
          let _ = 0;
          (_ += _ * _[Math.floor(_)]), (_ += _ * _[Math.floor(_)]);
          for (let _ = Math.floor(_) + 1; _ < Math.floor(_); _++) _ += _[_];
          (_ /= _), __webpack_require__.push(_);
        }
        return _;
      }
      const _ = (_) => {
          const {
              nPublishedVersion: _,
              msgWorkingProjectConfig: __webpack_require__,
            } = _(),
            [_, _] = _.useState(!1),
            [_, _] = _.useState(""),
            _ = _(_.nProjectID, _.nFetchID),
            _ = _.data;
          (0, _._)(() => {
            _ && (_.status(), _(_.nProjectID, _.nFetchID));
          }, 3e3);
          if (0 == _)
            return _.createElement(
              "div",
              {
                className: _.StatusMessage,
              },
              (0, _._)("#SteamLearn_Status_Fetch_Status_Unpublished"),
            );
          if (0 == _.arrAllFetchIDs.length)
            return _.createElement(
              "div",
              {
                className: _.StatusMessage,
              },
              (0, _._)("#SteamLearn_Status_Fetch_Status_None"),
            );
          let _ = (0, _._)("#SteamLearn_Status_Fetch_Status_Unknown"),
            _ = _.Unknown;
          if (_)
            switch (_.status()) {
              case 0:
                (_ = (0, _._)("#SteamLearn_Status_Fetch_Status_Unknown")),
                  (_ = _.Unknown);
                break;
              case 1:
                (_ = (0, _._)("#SteamLearn_Status_Fetch_Status_Unstarted")),
                  (_ = _.Unstarted);
                break;
              case 5:
                (_ = _.InProgress),
                  (_ = (0, _._)(
                    "#SteamLearn_Status_Fetch_Status_InProgress_Metadata",
                  ));
                break;
              case 2:
                (_ = (0, _._)(
                  "#SteamLearn_Status_Fetch_Status_InProgress_Data",
                )),
                  (_ = _.InProgress);
                break;
              case 3:
                (_ = (0, _._)("#SteamLearn_Status_Fetch_Status_Complete")),
                  (_ = _.Complete);
                break;
              case 4:
                (_ = (0, _._)("#SteamLearn_Status_Fetch_Status_Error")),
                  (_ = _.Error);
                break;
              case 6:
                (_ = (0, _._)(
                  "#SteamLearn_Status_Fetch_Status_InProgress_Cleanup",
                )),
                  (_ = _.InProgress);
                break;
              case 7:
                (_ = (0, _._)("#SteamLearn_Status_Fetch_Status_CleanedUp")),
                  (_ = _.Complete);
                break;
              case 8:
                (_ = (0, _._)("#SteamLearn_Status_Fetch_Status_Canceled")),
                  (_ = _.Error);
            }
          const _ =
              _ && (5 == _.status() || 2 == _.status() || 6 == _.status()),
            _ = _ && _.cancel_pending(),
            _ = _ && 8 == _.status();
          _.isLoading &&
            (_ = (0, _._)("#SteamLearn_Status_Fetch_Status_Loading"));
          let _ = "";
          const _ = _ && _.total_rows() > 0;
          if (_ && !_) {
            const _ = _.total_rows_processed() / _.total_rows(),
              _ = Date.now() / 1e3 - _.start_time(),
              _ = _ / _;
            if (_.end_time()) {
              const _ = (0, _._)(
                "#SteamLearn_Status_Train_Fetch_Duration",
                _(_.end_time() - _.start_time()),
              );
              _ != _ && _(_);
              const _ = new Date(1e3 * _.end_time());
              _ = (0, _._)(
                "#SteamLearn_Status_Train_Fetch_Completed",
                _.getHours() +
                  ":" +
                  _.getMinutes().toString().padStart(2, "0") +
                  ":" +
                  _.getSeconds().toString().padStart(2, "0") +
                  ", " +
                  _.toDateString(),
              );
            } else {
              let _ = _ - _;
              if (!isNaN(_) && !_.isFetching) {
                const _ = (0, _._)(
                  "#SteamLearn_Status_Train_Fetch_TimeEstimate",
                  _(_),
                );
                _ != _ && _(_);
              }
              const _ = new Date(1e3 * _.start_time());
              _ = (0, _._)(
                "#SteamLearn_Status_Train_Fetch_Started",
                _.getHours() +
                  ":" +
                  _.getMinutes().toString().padStart(2, "0") +
                  ":" +
                  _.getSeconds().toString().padStart(2, "0") +
                  ", " +
                  _.toDateString(),
              );
            }
          }
          return _.createElement(
            "div",
            {
              className: _.FetchStatusPanel,
            },
            _.createElement(
              "div",
              {
                className: _.TopSection,
              },
              _.createElement(
                "div",
                {
                  className: _.TopLeft,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.OptionHeader,
                    },
                    (0, _._)("#SteamLearn_Status_Fetch_Status", _.nFetchID),
                  ),
                  _ &&
                    !_ &&
                    _.createElement(
                      _._,
                      {
                        onClick: () =>
                          (async (_) => {
                            let _ = _._.Init(_);
                            _.Body().set_project_config(_),
                              _.Body().fetch().set_fetch_id(_),
                              _.Body().fetch().set_request_cancel(!0),
                              await _.Train(_.Get().GetServiceTransport(), _),
                              _(_.nProjectID, _.nFetchID);
                          })(_.nFetchID),
                      },
                      (0, _._)("#SteamLearn_Status_Fetch_Cancel"),
                    ),
                  _ && _ && _.createElement("div", null, "Canceling..."),
                  _.createElement(
                    "div",
                    {
                      className: (0, _._)(_.StatusString, _),
                    },
                    _,
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.MetadataProcessingStatus,
                    },
                    _?.metadata().map((_, _) =>
                      0 == _.metadata_phase_value()
                        ? null
                        : _.createElement(
                            "div",
                            {
                              key: `MetadataStatus_${_}`,
                              className: _.MetadataEntry,
                            },
                            1 == _.metadata_phase() &&
                              _.createElement(
                                "div",
                                {
                                  className: _.MetadataEntryType,
                                },
                                (0, _._)(
                                  "#SteamLearn_Status_Fetch_Status_InProgress_Metadata_Ranges",
                                ),
                              ),
                            2 == _.metadata_phase() &&
                              _.createElement(
                                "div",
                                {
                                  className: _.MetadataEntryType,
                                },
                                (0, _._)(
                                  "#SteamLearn_Status_Fetch_Status_InProgress_Metadata_Stddevs",
                                ),
                              ),
                            3 == _.metadata_phase() &&
                              _.createElement(
                                "div",
                                {
                                  className: _.MetadataEntryType,
                                },
                                (0, _._)(
                                  "#SteamLearn_Status_Fetch_Status_InProgress_Metadata_CompactTables",
                                  _.metadata_phase_name(),
                                ),
                              ),
                            4 == _.metadata_phase() &&
                              _.createElement(
                                "div",
                                {
                                  className: _.MetadataEntryType,
                                },
                                (0, _._)(
                                  "#SteamLearn_Status_Fetch_Status_InProgress_Metadata_KMeans",
                                  _.metadata_phase_name(),
                                ),
                              ),
                            5 == _.metadata_phase() &&
                              _.createElement(
                                "div",
                                {
                                  className: _.MetadataEntryType,
                                },
                                (0, _._)(
                                  "#SteamLearn_Status_Fetch_Status_InProgress_Metadata_Histogram",
                                ),
                              ),
                            6 == _.metadata_phase() &&
                              _.createElement(
                                "div",
                                {
                                  className: _.MetadataEntryType,
                                },
                                (0, _._)(
                                  "#SteamLearn_Status_Fetch_Status_InProgress_Metadata_AppIDs",
                                  _.metadata_phase_name(),
                                ),
                              ),
                            7 == _.metadata_phase() &&
                              _.createElement(
                                "div",
                                {
                                  className: _.MetadataEntryType,
                                },
                                (0, _._)(
                                  "#SteamLearn_Status_Fetch_Status_InProgress_Metadata_TextVectorization",
                                  _.metadata_phase_name(),
                                ),
                              ),
                            8 == _.metadata_phase() &&
                              _.createElement(
                                "div",
                                {
                                  className: _.MetadataEntryType,
                                },
                                (0, _._)(
                                  "#SteamLearn_Status_Fetch_Status_InProgress_Metadata_TextVectorizationAdapt",
                                ),
                              ),
                            9 == _.metadata_phase() &&
                              _.createElement(
                                "div",
                                {
                                  className: _.MetadataEntryType,
                                },
                                (0, _._)(
                                  "#SteamLearn_Status_Fetch_Status_InProgress_Metadata_SequenceTables",
                                  _.metadata_phase_name(),
                                ),
                              ),
                            _.createElement(
                              "div",
                              {
                                className: (0, _._)(_.ProgressBar, _.Green),
                              },
                              _.createElement("div", {
                                className: _.ProgressBarInner,
                                style: {
                                  width: `${_.metadata_phase_value()}%`,
                                },
                              }),
                            ),
                            _.createElement(
                              "div",
                              {
                                className: _.ProgressValue,
                              },
                              `${_.metadata_phase_value()}%`,
                            ),
                          ),
                    ),
                  ),
                ),
              ),
              _.createElement(
                "div",
                {
                  className: _.TopRight,
                },
                _.createElement(
                  "select",
                  {
                    value: _.nFetchID,
                    onChange: (_) => _.fnSetFetchID(parseInt(_.target.value)),
                  },
                  _.arrAllFetchIDs.map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: `FetchOption_${_}`,
                        value: _,
                      },
                      (0, _._)("#SteamLearn_Status_Train_FetchOption", _),
                    ),
                  ),
                ),
              ),
            ),
            _ &&
              _.total_rows() > 0 &&
              _.createElement(
                "div",
                {
                  className: _.StatusProgress,
                },
                _.createElement(
                  "div",
                  {
                    className: _.RowProgress,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.RowCurrent,
                    },
                    _.total_rows_processed().toLocaleString(),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.RowSlash,
                    },
                    "/",
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.RowTotal,
                    },
                    _.total_rows().toLocaleString(),
                  ),
                ),
                _.total_rows_written() != _.total_rows_processed() &&
                  _.createElement(
                    "div",
                    {
                      className: _.RowProgress,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.RowCurrent,
                      },
                      (0, _._)(
                        "#SteamLearn_Status_Train_Fetch_Written",
                        _.total_rows_written().toLocaleString(),
                      ),
                    ),
                  ),
                _.createElement(
                  "div",
                  {
                    className: _.RowProgress,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.ProgressBar,
                    },
                    _.createElement("div", {
                      className: _.ProgressBarInner,
                      style: {
                        width:
                          (100 * _.total_rows_processed()) / _.total_rows() +
                          "%",
                      },
                    }),
                  ),
                  _ &&
                    _.createElement(
                      "div",
                      {
                        className: _.ProgressPct,
                      },
                      `${((100 * _.total_rows_processed()) / _.total_rows() - 0.5).toFixed(0)}%`,
                    ),
                ),
                _.createElement(
                  "div",
                  {
                    className: _.RowProgress,
                  },
                  _,
                ),
                _.createElement(
                  "div",
                  {
                    className: _.RowProgress,
                  },
                  _,
                ),
                _.createElement(
                  "div",
                  {
                    className: _.ShowWorkers,
                  },
                  _.createElement(
                    "div",
                    {
                      className: (0, _._)(_.WorkersContainer, _ && _.Expanded),
                      style: {
                        height: (_ ? 20 * _.workers().length : 0) + "px",
                      },
                    },
                    _.workers().map((_, _) =>
                      _.createElement(
                        "div",
                        {
                          className: _.Worker,
                          key: `$worker_${_}`,
                        },
                        _.createElement(
                          "div",
                          {
                            className: _.WorkerNumber,
                          },
                          _ + 1,
                        ),
                        _.createElement(
                          "div",
                          {
                            className: _.ProgressBar,
                          },
                          _.createElement("div", {
                            className: _.ProgressBarInner,
                            style: {
                              width:
                                (100 * _.rows_processed()) / _.rows_total() +
                                "%",
                            },
                          }),
                        ),
                      ),
                    ),
                  ),
                  _ &&
                    _.createElement(
                      "div",
                      {
                        className: _.ShowWorkersTextButton,
                        onClick: () => _(!_),
                      },
                      (0, _._)(
                        _
                          ? "#SteamLearn_Status_HideWorkers"
                          : "#SteamLearn_Status_ShowWorkers",
                      ),
                    ),
                ),
              ),
          );
        },
        _ = (_) => {
          let _, _, _, _;
          for (const _ of _.lines) {
            const _ = Math.min(..._.data.map((_) => _[_.strDataLabel])),
              _ = Math.max(..._.data.map((_) => _[_.strDataLabel]));
            (_ = Math.min(null == _ ? _ : _, _)),
              (_ = Math.max(null == _ ? _ : _, _));
          }
          const _ = Math.max(0, _ - (_ - _) * (_.fAxisPaddingPct / 100)),
            _ = _ + (_ - _) * (_.fAxisPaddingPct / 100);
          return (
            (_ = Math.floor(100 * _) / 100),
            (_ = Math.ceil(100 * _) / 100),
            _.createElement(
              "div",
              {
                className: _.TrainGraph,
              },
              _.createElement(
                "div",
                {
                  className: _.GraphTitle,
                },
                _.strHeading,
              ),
              _.createElement(
                "div",
                {
                  className: _.LineValues,
                },
                _.lines.map((_, _) =>
                  null == _.nFinalValue
                    ? null
                    : _.createElement(
                        "div",
                        {
                          key: `Legend_${_.strDataLabel}_${_}`,
                          className: _.LegendValue,
                          style: {
                            color: _.color,
                          },
                        },
                        `${_.strDataLabel}: `,
                        _.createElement(
                          "span",
                          {
                            className: _.Value,
                          },
                          "" + Math.round(1e4 * _.nFinalValue) / 1e4,
                        ),
                      ),
                ),
              ),
              _.createElement(
                _._,
                {
                  width: 500,
                  height: 300,
                },
                _.lines.map((_, _) =>
                  _.createElement(_._, {
                    key: `${_.strHeading}_${_.strDataLabel}_${_}`,
                    type: "number",
                    dataKey: "index",
                    domain: _.XAxisDomain,
                    xAxisId: `${_.strDataLabel}_${_}`,
                    axisLine: 0 == _ || _.bAxisLine,
                    tick: _.bAxisLine,
                    tickCount: _.data.length <= 10 ? _.data.length : void 0,
                  }),
                ),
                _.createElement(_._, {
                  type: "number",
                  tickCount: 5,
                  domain: [_, _],
                }),
                _.lines.map((_, _) =>
                  _.createElement(_._, {
                    key: `${_.strDataLabel}_${_}`,
                    type: "monotone",
                    stroke: _.color,
                    dataKey: _.strDataLabel,
                    dot: _.data.length < 10,
                    xAxisId: `${_.strDataLabel}_${_}`,
                    data: _.data,
                  }),
                ),
              ),
            )
          );
        };
      function _(_) {
        if (null != _)
          return Array.isArray(_) && _.length > 0
            ? _.reduce((_, _) => _ + _) / _.length
            : "number" == typeof _
              ? _
              : 0;
      }
      const _ = (_) => {
          const {
              nPublishedVersion: _,
              msgWorkingProjectConfig: __webpack_require__,
              msgProjectConfig: _,
            } = _(),
            _ = _(_.nProjectID, _.nTrainID),
            [_, _] = _.useState(-1),
            _ = _.data,
            _ = _.data?.status(),
            _ = _.data?.epochs().length;
          (0, _._)(() => {
            if (_)
              switch (_.status()) {
                case 0:
                case 2:
                case 1:
                case 6:
                default:
                  _(_.nProjectID, _.nTrainID);
                  break;
                case 3:
                  _.active() && !_.live() && _(_.nProjectID, _.nTrainID);
              }
          }, 3e3),
            _.useEffect(() => {
              -1 == _ && _ && _(3 == _ ? 0 : _);
            }, [_, _, _, _]),
            _.useEffect(() => {
              _ && _ > _ && _(-1);
            }, [_, _]);
          const _ = _.useCallback(
            (_, _) => {
              !(async function (_, _, _, _) {
                let _ = _._.Init(_);
                _.Body().set_project_id(_),
                  _.Body().set_published_version(_),
                  _.Body().set_train_id(_),
                  _.Body().set_from_scheduled(!1),
                  _.Body().set_deactivate(_);
                const _ = await _.SetTrainLive(
                  _.Get().GetServiceTransport(),
                  _,
                );
                _ &&
                  1 == _.GetEResult() &&
                  _._.invalidateQueries({
                    queryKey: [_, _],
                  }),
                  _.Body().result();
              })(__webpack_require__.project_id(), _, _, _);
            },
            [__webpack_require__, _],
          );
          if (0 == _)
            return _.createElement(
              "div",
              {
                className: _.StatusMessage,
              },
              (0, _._)("#SteamLearn_Status_Train_Status_Unpublished"),
            );
          const _ = [...new Set(_.arrAllTrainIDs)];
          if (0 == _.length)
            return _.createElement(
              "div",
              {
                className: _.StatusMessage,
              },
              (0, _._)("#SteamLearn_Status_Train_Status_None"),
            );
          let _,
            _,
            _,
            _ = (0, _._)("#SteamLearn_Status_Train_Status_Unknown"),
            _ = _.Unknown;
          if (_)
            switch (_.status()) {
              case 0:
                (_ = (0, _._)("#SteamLearn_Status_Train_Status_Unknown")),
                  (_ = _.Unknown);
                break;
              case 1:
                (_ = (0, _._)("#SteamLearn_Status_Train_Status_Unstarted")),
                  (_ = _.Unstarted);
                break;
              case 2:
                (_ = (0, _._)("#SteamLearn_Status_Train_Status_InProgress")),
                  (_ = _.InProgress);
                break;
              case 3:
                (_ = (0, _._)("#SteamLearn_Status_Train_Status_Complete")),
                  (_ = _.Complete);
                break;
              case 4:
                (_ = (0, _._)("#SteamLearn_Status_Train_Status_Error")),
                  (_ = _.Error);
                break;
              case 5:
                (_ = (0, _._)("#SteamLearn_Status_Train_Status_StoppedEarly")),
                  (_ = _.Complete);
                break;
              case 6:
                (_ = (0, _._)("#SteamLearn_Status_Train_Status_WaitingOnAS")),
                  (_ = _.InProgress);
            }
          _.isLoading &&
            (_ = (0, _._)("#SteamLearn_Status_Train_Status_Loading"));
          let _ = 0,
            _ = 0,
            _ = 0,
            _ = 0;
          const _ = 100;
          let _ = "";
          if (_)
            if (0 != _) {
              const _ = _ > _.epochs().length ? void 0 : _.epochs()[_ - 1];
              if (_) {
                if (
                  ((_ = _.train_batches().length),
                  (_ = _.validate_batches().length),
                  _.train_batches().length > 0 &&
                  _.train_batches()[0].batch_id() > 0
                    ? ((_ = Math.floor(
                        _.train_batch_count() / _.train_batches()[0].batch_id(),
                      )),
                      (_ = Math.floor(
                        _.validate_batch_count() /
                          _.train_batches()[0].batch_id(),
                      )))
                    : ((_ = Math.floor(_.train_batch_count() / 100)),
                      (_ = Math.floor(_.validate_batch_count() / 100))),
                  2 == _.status() || 3 == _.status() || 5 == _.status())
                ) {
                  const _ = (_ + _) / (_ + _),
                    _ = Date.now() / 1e3 - _.start_time(),
                    _ = _ / _;
                  if (_.end_time())
                    _ = (0, _._)(
                      "#SteamLearn_Status_Train_BatchCurrent_EpochDuration",
                      _(_.end_time() - _.start_time()),
                    );
                  else {
                    let _ = _ - _;
                    isNaN(_) ||
                      (_ = (0, _._)(
                        "#SteamLearn_Status_Train_BatchCurrent_TimeEstimate",
                        _(_),
                      ));
                  }
                }
                const _ = _ / _,
                  _ = _ / _,
                  _ = _(
                    _.train_batches().map((_) => _.loss()),
                    _,
                  ).map((_, _) => ({
                    index: _,
                    Train: _,
                  })),
                  _ = _(
                    _.validate_batches().map((_) => _.loss()),
                    _,
                  ).map((_, _) => ({
                    index: _,
                    Validate: _,
                  })),
                  _ =
                    _.train_batches().length > 0
                      ? _.train_batches()[_.train_batches().length - 1]
                      : void 0,
                  _ =
                    _.validate_batches().length > 0
                      ? _.validate_batches()[_.validate_batches().length - 1]
                      : void 0;
                _ = [
                  {
                    strDataLabel: "Train",
                    XAxisDomain: [0, Math.min(_, _.train_batches().length) / _],
                    data: _,
                    color: "#547d9e",
                    bAxisLine: !1,
                    nFinalValue: _?.loss(),
                  },
                  {
                    strDataLabel: "Validate",
                    XAxisDomain: [
                      0,
                      Math.min(_, _.validate_batches().length) / _,
                    ],
                    data: _,
                    color: "#609e54",
                    bAxisLine: !1,
                    nFinalValue: _?.loss(),
                  },
                ];
                const _ = _(
                    _.train_batches().map((_) => _(_.accuracy())),
                    _,
                  ).map((_, _) => ({
                    index: _,
                    Train: _,
                  })),
                  _ = _(
                    _.validate_batches().map((_) => _(_.accuracy())),
                    _,
                  ).map((_, _) => ({
                    index: _,
                    Validate: _,
                  }));
                _ = [
                  {
                    strDataLabel: "Train",
                    XAxisDomain: [0, Math.min(_, _.train_batches().length) / _],
                    data: _,
                    color: "#547d9e",
                    bAxisLine: !1,
                    nFinalValue: _(_?.accuracy()),
                  },
                  {
                    strDataLabel: "Validate",
                    XAxisDomain: [
                      0,
                      Math.min(_, _.validate_batches().length) / _,
                    ],
                    data: _,
                    color: "#609e54",
                    bAxisLine: !1,
                    nFinalValue: _(_?.accuracy()),
                  },
                ];
                const _ = _(
                    _.train_batches().map((_) => _(_.f1_score())),
                    _,
                  ).map((_, _) => ({
                    index: _,
                    Train: _,
                  })),
                  _ = _(
                    _.validate_batches().map((_) => _(_.f1_score())),
                    _,
                  ).map((_, _) => ({
                    index: _,
                    Validate: _,
                  }));
                _ = [
                  {
                    strDataLabel: "Train",
                    XAxisDomain: [0, Math.min(_, _.train_batches().length) / _],
                    data: _,
                    color: "#547d9e",
                    bAxisLine: !1,
                    nFinalValue: _(_?.f1_score()),
                  },
                  {
                    strDataLabel: "Validate",
                    XAxisDomain: [
                      0,
                      Math.min(_, _.validate_batches().length) / _,
                    ],
                    data: _,
                    color: "#609e54",
                    bAxisLine: !1,
                    nFinalValue: _(_?.f1_score()),
                  },
                ];
              }
            } else {
              const _ = _.epochs()
                  .map((_, _) => {
                    let _;
                    return (
                      _.validate_batches().length > 0 &&
                        (_ =
                          _.validate_batches()[
                            _.validate_batches().length - 1
                          ]),
                      {
                        index: _ + 1,
                        Value: __webpack_require__?.loss(),
                      }
                    );
                  })
                  .filter((_) => null != _.Value),
                _ = _.epochs()
                  .map((_, _) => {
                    let _;
                    return (
                      _.validate_batches().length > 0 &&
                        (_ =
                          _.validate_batches()[
                            _.validate_batches().length - 1
                          ]),
                      {
                        index: _ + 1,
                        Value: _(__webpack_require__?.accuracy()),
                      }
                    );
                  })
                  .filter((_) => null != _.Value),
                _ = _.epochs()
                  .map((_, _) => {
                    let _;
                    return (
                      _.validate_batches().length > 0 &&
                        (_ =
                          _.validate_batches()[
                            _.validate_batches().length - 1
                          ]),
                      {
                        index: _ + 1,
                        Value: _(__webpack_require__?.f1_score()),
                      }
                    );
                  })
                  .filter((_) => null != _.Value);
              _.length > 0 &&
                _.length > 0 &&
                ((_ = [
                  {
                    strDataLabel: "Value",
                    XAxisDomain: [1, _.length],
                    data: _,
                    color: "#609e54",
                    bAxisLine: !0,
                    nFinalValue: void 0,
                  },
                ]),
                (_ = [
                  {
                    strDataLabel: "Value",
                    XAxisDomain: [1, _.length],
                    data: _,
                    color: "#609e54",
                    bAxisLine: !0,
                    nFinalValue: void 0,
                  },
                ])),
                _.length > 0 &&
                  (_ = [
                    {
                      strDataLabel: "Value",
                      XAxisDomain: [1, _.length],
                      data: _,
                      color: "#609e54",
                      bAxisLine: !0,
                      nFinalValue: void 0,
                    },
                  ]);
            }
          const _ = _ && 3 == _.status(),
            _ = _ && 5 == _.status(),
            _ = _ && _.live(),
            _ = _ && _.active(),
            _ = _ && 2 == _.status(),
            _ =
              _ &&
              _ &&
              __webpack_require__.serializeBase64String() !=
                _.serializeBase64String();
          let _ = [
            {
              label: (0, _._)("#SteamLearn_Status_Train_AllEpochs"),
              value: 0,
            },
          ];
          if (_)
            for (let _ = 0; _ < _.epochs().length; _++)
              _.push({
                label: (0, _._)("#SteamLearn_Status_Train_EpochOption", _ + 1),
                value: _ + 1,
              });
          const _ = (0, _._)(
              "#SteamLearn_Status_Train_Duration",
              _(_?.end_time() - _?.start_time()),
            ),
            _ = new Date(1e3 * _?.end_time()),
            _ = (0, _._)(
              "#SteamLearn_Status_Train_Completed",
              _.getHours() +
                ":" +
                _.getMinutes().toString().padStart(2, "0") +
                ":" +
                _.getSeconds().toString().padStart(2, "0") +
                ", " +
                _.toDateString(),
            );
          let _,
            _,
            _ = 1 / 0;
          if (_)
            for (const _ of _.epochs())
              _.epoch_validate_loss() < _ &&
                ((_ = _.epoch_validate_loss()),
                (_ = _(_.epoch_validate_accuracy())),
                (_ = _(_.epoch_validate_f1_score())));
          return _.createElement(
            "div",
            {
              className: _.TrainStatusPanel,
            },
            _.createElement(
              "div",
              {
                className: _.TopSection,
              },
              _.createElement(
                "div",
                {
                  className: _.TopLeft,
                },
                _.createElement(
                  "div",
                  {
                    className: _.OptionBlock,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.OptionHeader,
                    },
                    (0, _._)("#SteamLearn_Status_Train_Status", _.nTrainID),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: (0, _._)(_.StatusString, _),
                    },
                    _,
                  ),
                  _ &&
                    _.createElement(
                      "div",
                      {
                        className: _.Timinginfo,
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.Timing,
                        },
                        _,
                      ),
                      _.createElement(
                        "div",
                        {
                          className: _.Timing,
                        },
                        _,
                      ),
                    ),
                  !_ &&
                    (_ || _) &&
                    !_ &&
                    !_ &&
                    _.createElement(
                      _._,
                      {
                        onClick: () => _(_.nTrainID, !1),
                      },
                      (0, _._)("#SteamLearn_Status_SetInferenceVersion"),
                    ),
                  _ &&
                    (_ || _) &&
                    !_ &&
                    !_ &&
                    _.createElement(
                      "div",
                      {
                        className: _.WarningMessage,
                      },
                      (0, _._)("#SteamLearn_Status_SaveOrDiscardFirst"),
                    ),
                  _ &&
                    _.createElement(
                      _._,
                      {
                        onClick: () =>
                          (async (_) => {
                            let _ = _._.Init(_);
                            _.Body().set_project_config(_),
                              _.Body().train().set_train_id(_),
                              _.Body().train().set_request_cancel(!0),
                              await _.Train(_.Get().GetServiceTransport(), _);
                          })(_.nTrainID),
                      },
                      (0, _._)("#SteamLearn_Status_Train_EndEarly"),
                    ),
                  _ &&
                    _.createElement(
                      "div",
                      {
                        onClick: () => _(_.nTrainID, !0),
                        className: _.TrainLive,
                      },
                      (0, _._)("#SteamLearn_Status_InferenceLive"),
                    ),
                  _ &&
                    !_ &&
                    _.createElement(
                      "div",
                      {
                        className: _.TrainLive,
                      },
                      (0, _._)("#SteamLearn_Status_InferenceActive"),
                    ),
                ),
              ),
              _.createElement(
                "div",
                {
                  className: _.TopRight,
                },
                _.createElement(
                  "select",
                  {
                    value: _.nTrainID,
                    onChange: (_) => _.fnSetTrainID(parseInt(_.target.value)),
                  },
                  _.map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: `TrainOption_${_}`,
                        value: _,
                      },
                      (0, _._)("#SteamLearn_Status_Train_TrainOption", _),
                    ),
                  ),
                ),
              ),
            ),
            _ &&
              _.createElement(
                "div",
                {
                  className: _.EpochSelectorSection,
                },
                _.createElement(
                  "select",
                  {
                    className: _.EpochSelector,
                    value: _,
                    onChange: (_) => _(parseInt(_.target.value)),
                  },
                  _.map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: `EpochOption_${_.value}`,
                        value: _.value,
                      },
                      _.label,
                    ),
                  ),
                ),
              ),
            _ &&
              _.createElement(
                "div",
                {
                  className: _.BatchStatus,
                },
                _ > 0 &&
                  0 != _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.BatchStatusRow,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.PhaseLabel,
                      },
                      (0, _._)("#SteamLearn_Status_Train_BatchCurrent_Train"),
                    ),
                    _ > 0 &&
                      _ == _ &&
                      _.createElement(
                        "div",
                        {
                          className: _.PhaseValues,
                        },
                        _.createElement(
                          "span",
                          {
                            className: _.Total,
                          },
                          (0, _._)("#SteamLearn_Status_Train_Status_Complete"),
                        ),
                      ),
                    _ > 0 &&
                      _ != _ &&
                      _.createElement(
                        "div",
                        {
                          className: _.PhaseValues,
                        },
                        (100 * _).toLocaleString(),
                        " / ",
                        _.createElement(
                          "span",
                          {
                            className: _.Total,
                          },
                          (100 * _).toLocaleString(),
                        ),
                      ),
                  ),
                _ > 0 &&
                  0 != _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.BatchStatusRow,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.PhaseLabel,
                      },
                      (0, _._)(
                        "#SteamLearn_Status_Train_BatchCurrent_Validate",
                      ),
                    ),
                    _ > 0 &&
                      _ == _ &&
                      _.createElement(
                        "div",
                        {
                          className: _.PhaseValues,
                        },
                        _.createElement(
                          "span",
                          {
                            className: _.Total,
                          },
                          (0, _._)("#SteamLearn_Status_Train_Status_Complete"),
                        ),
                      ),
                    _ > 0 &&
                      _ != _ &&
                      _.createElement(
                        "div",
                        {
                          className: _.PhaseValues,
                        },
                        (100 * _).toLocaleString(),
                        " / ",
                        _.createElement(
                          "span",
                          {
                            className: _.Total,
                          },
                          (100 * _).toLocaleString(),
                        ),
                      ),
                  ),
                0 != _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.BatchStatusRow,
                    },
                    _,
                  ),
                _ != 1 / 0 &&
                  0 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.BatchStatusRow,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.PhaseLabel,
                      },
                      (0, _._)("#SteamLearn_Status_Train_Epoch_BestLoss"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.PhaseValues,
                      },
                      _.createElement(
                        "span",
                        {
                          className: _.Total,
                        },
                        _.toFixed(4),
                      ),
                    ),
                  ),
                _ != 1 / 0 &&
                  0 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.BatchStatusRow,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.PhaseLabel,
                      },
                      (0, _._)("#SteamLearn_Status_Train_Epoch_BestAccuracy"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.PhaseValues,
                      },
                      _.createElement(
                        "span",
                        {
                          className: _.Total,
                        },
                        _.toFixed(4),
                      ),
                    ),
                  ),
                _ != 1 / 0 &&
                  0 == _ &&
                  _.createElement(
                    "div",
                    {
                      className: _.BatchStatusRow,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.PhaseLabel,
                      },
                      (0, _._)("#SteamLearn_Status_Train_Epoch_BestF1Score"),
                    ),
                    _.createElement(
                      "div",
                      {
                        className: _.PhaseValues,
                      },
                      _.createElement(
                        "span",
                        {
                          className: _.Total,
                        },
                        _.toFixed(4),
                      ),
                    ),
                  ),
              ),
            _ &&
              _ &&
              _ &&
              _.createElement(
                "div",
                {
                  className: _.CurrentEpoch,
                },
                _.createElement(
                  "div",
                  {
                    className: _.GraphPair,
                  },
                  _.createElement(_, {
                    strHeading: (0, _._)("#SteamLearn_Status_Train_Axis_Loss"),
                    lines: _,
                    fAxisPaddingPct: 25,
                  }),
                  _.createElement(_, {
                    strHeading: (0, _._)(
                      "#SteamLearn_Status_Train_Axis_Accuracy",
                    ),
                    lines: _,
                    fAxisPaddingPct: 25,
                  }),
                  _ &&
                    _.createElement(_, {
                      strHeading: (0, _._)(
                        "#SteamLearn_Status_Train_Axis_F1Score",
                      ),
                      lines: _,
                      fAxisPaddingPct: 25,
                    }),
                ),
              ),
          );
        },
        _ = () =>
          _.createElement(
            "div",
            {
              className: _.ProjectTrainStatusPage,
            },
            _.createElement(
              "div",
              {
                className: _.ProjectTrainStatusBody,
              },
              _.createElement(_, null),
            ),
          );
      var _;
      !(function (_) {
        (_[(_.NONE = 0)] = "NONE"),
          (_[(_.MAIN = 1)] = "MAIN"),
          (_[(_.FETCH_WORKERS = 2)] = "FETCH_WORKERS"),
          (_[(_.GPU = 3)] = "GPU");
      })(_ || (_ = {}));
      const _ = (_) => {
          const [_, __webpack_require__] = _.useState(_.NONE);
          return _.createElement(
            "div",
            {
              className: _.LogSection,
            },
            _.createElement(
              "div",
              {
                className: _.ButtonRow,
              },
              _.createElement(
                _._,
                {
                  onClick: () =>
                    __webpack_require__(_ == _.MAIN ? _.NONE : _.MAIN),
                },
                (0, _._)(
                  _ == _.MAIN
                    ? "#SteamLearn_Status_LogMain_Hide"
                    : "#SteamLearn_Status_LogMain_Show",
                ),
              ),
              _.createElement(
                _._,
                {
                  onClick: () =>
                    __webpack_require__(
                      _ == _.FETCH_WORKERS ? _.NONE : _.FETCH_WORKERS,
                    ),
                },
                (0, _._)(
                  _ == _.FETCH_WORKERS
                    ? "#SteamLearn_Status_LogFetchWorkers_Hide"
                    : "#SteamLearn_Status_LogFetchWorkers_Show",
                ),
              ),
              _.createElement(
                _._,
                {
                  onClick: () =>
                    __webpack_require__(_ == _.GPU ? _.NONE : _.GPU),
                },
                (0, _._)(
                  _ == _.GPU
                    ? "#SteamLearn_Status_LogTrain_Hide"
                    : "#SteamLearn_Status_LogTrain_Show",
                ),
              ),
            ),
            _ == _.MAIN &&
              _.createElement(_, {
                nFetchID: _.nFetchID,
                nTrainID: _.nTrainID,
              }),
            _ == _.FETCH_WORKERS &&
              _.createElement(_, {
                nFetchID: _.nFetchID,
                nTrainID: _.nTrainID,
              }),
            _ == _.GPU &&
              _.createElement(_, {
                nFetchID: _.nFetchID,
                nTrainID: _.nTrainID,
              }),
          );
        },
        _ = (_) => {
          const { nProjectID: _ } = _(),
            _ = _(_, _.nFetchID, _.nTrainID),
            _ = _.data;
          return _.isLoading
            ? _.createElement(
                "div",
                {
                  className: _.LogContainer,
                },
                (0, _._)("#SteamLearn_Status_LogTrain_Status_Loading"),
              )
            : _.isSuccess && null != _
              ? _.createElement(
                  "div",
                  {
                    className: _.LogContainer,
                  },
                  _.main_log(),
                )
              : _.createElement(
                  "div",
                  {
                    className: _.LogContainer,
                  },
                  (0, _._)("#SteamLearn_Status_LogTrain_Status_Failed"),
                );
        },
        _ = (_) => {
          const { nProjectID: _ } = _(),
            _ = _(_, _.nFetchID, _.nTrainID),
            _ = _.data;
          return _.isLoading
            ? _.createElement(
                "div",
                {
                  className: _.LogContainer,
                },
                (0, _._)("#SteamLearn_Status_LogTrain_Status_Loading"),
              )
            : _.isSuccess && null != _
              ? _.createElement(
                  "div",
                  {
                    className: _.WorkerLogs,
                  },
                  _.fetch_worker_logs().map((_, _) =>
                    _.createElement(
                      "div",
                      {
                        className: _.WorkerLog,
                        key: `worker_log_${_}`,
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.WorkerLogHeader,
                        },
                        (0, _._)("#SteamLearn_Status_LogTrain_Worker", _),
                      ),
                      _.createElement(
                        "div",
                        {
                          className: _.LogContainer,
                        },
                        _,
                      ),
                    ),
                  ),
                )
              : _.createElement(
                  "div",
                  {
                    className: _.LogContainer,
                  },
                  (0, _._)("#SteamLearn_Status_LogTrain_Status_Failed"),
                );
        },
        _ = (_) => {
          const { nProjectID: _ } = _(),
            _ = _(_, _.nFetchID, _.nTrainID),
            _ = _.data;
          return _.isLoading
            ? _.createElement(
                "div",
                {
                  className: _.LogContainer,
                },
                (0, _._)("#SteamLearn_Status_LogTrain_Status_Loading"),
              )
            : _.isSuccess && null != _
              ? _.createElement(
                  "div",
                  {
                    className: _.LogContainer,
                  },
                  _.gpu_log(),
                )
              : _.createElement(
                  "div",
                  {
                    className: _.LogContainer,
                  },
                  (0, _._)("#SteamLearn_Status_LogTrain_Status_Failed"),
                );
        },
        _ = () => {
          const {
              nProjectID: _,
              nPublishedVersion: _,
              msgWorkingProjectConfig: __webpack_require__,
            } = _(),
            [_, _] = _.useState(0),
            [_, _] = _.useState(0),
            _ = _(_, _),
            _ = _(_, _),
            _ = _.data,
            _ = _.data;
          return (
            _.useEffect(() => {
              _(0), _(0);
            }, [_, _]),
            _.useEffect(() => {
              0 == _ &&
                _ &&
                _.versions().length > 0 &&
                _(Math.max(..._.versions()));
            }, [_, _]),
            _.useEffect(() => {
              0 == _ &&
                _ &&
                _.versions().length > 0 &&
                _(Math.max(..._.versions()));
            }, [_, _]),
            _.isLoading || _.isLoading
              ? _.createElement("div", null, "LOADING")
              : _.isSuccess && _.isSuccess
                ? _.createElement(
                    "div",
                    {
                      className: _.ProjectTrain,
                    },
                    _ > 0 &&
                      _.createElement(_, {
                        nProjectID: _,
                        nFetchID: _,
                        arrAllFetchIDs: _.versions(),
                        fnSetFetchID: (_) => {
                          _(_);
                        },
                      }),
                    _.createElement("div", {
                      className: _.Separator,
                    }),
                    _.createElement(_, {
                      nProjectID: _,
                      nTrainID: _,
                      arrAllTrainIDs: _.versions(),
                      fnSetTrainID: (_) => {
                        _(_);
                        for (const _ of __webpack_require__.train_infos())
                          _.train_id() == _ && _(_.fetch_id());
                      },
                    }),
                    _.createElement("div", {
                      className: _.Separator,
                    }),
                    _.createElement(_, {
                      nFetchID: _,
                      nTrainID: _,
                    }),
                  )
                : null
          );
        };
      var _ = __webpack_require__("chunkid"),
        _ = __webpack_require__("chunkid");
      const _ = () => {
        const {
            nProjectID: _,
            nPublishedVersion: _,
            msgProjectConfig: __webpack_require__,
            msgWorkingProjectConfig: _,
          } = _(),
          [_, _] = _.useState(0),
          [_, _] = _.useState(0),
          _ = (0, _._)(),
          _ = _(_, _),
          _ = _(_, _),
          _ = _.data,
          _ = _.data,
          _ = _.isLoading || _.isLoading,
          _ = _ > 0,
          _ =
            __webpack_require__ &&
            _ &&
            _.serializeBase64String() ==
              __webpack_require__.serializeBase64String(),
          _ = [
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_IntervalNone"),
              value: 0,
            },
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_IntervalHourly"),
              value: 1,
            },
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_IntervalDaily"),
              value: 2,
            },
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_IntervalWeekly"),
              value: 3,
            },
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_IntervalMonthly"),
              value: 4,
            },
          ],
          _ = [
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek_Sunday"),
              value: 0,
            },
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek_Monday"),
              value: 1,
            },
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek_Tuesday"),
              value: 2,
            },
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek_Wednesday"),
              value: 3,
            },
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek_Thursday"),
              value: 4,
            },
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek_Friday"),
              value: 5,
            },
            {
              label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek_Saturday"),
              value: 6,
            },
          ],
          _ = 0 != _.scheduled_train_config().scheduled_type(),
          _ =
            0 != _.scheduled_train_config().scheduled_type() &&
            1 != _.scheduled_train_config().scheduled_type();
        return _.createElement(
          "div",
          {
            className: _.ProjectTrainPage,
          },
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_ManualTrain_Heading"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)("#SteamLearn_ManualTrain_Desc"),
            ),
            _ &&
              _.createElement(
                "div",
                {
                  className: _.StatusMessage,
                },
                (0, _._)("#SteamLearn_ManualTrain_Loading"),
              ),
            !_ &&
              !_ &&
              _.createElement(
                "div",
                {
                  className: _.StatusMessage,
                },
                (0, _._)("#SteamLearn_ManualTrain_Unpublished"),
              ),
            !_ &&
              _ &&
              _.createElement(
                "div",
                {
                  className: _.FetchTrainOptionContainer,
                },
                _.createElement(
                  "select",
                  {
                    className: _.TrainDropdown,
                    value: _,
                    onChange: (_) => _(parseInt(_.target.value)),
                  },
                  _.versions().map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: `Fetch_${_}`,
                        value: _,
                      },
                      (0, _._)("#SteamLearn_ManualTrain_FetchVersion", _),
                    ),
                  ),
                  _.createElement(
                    "option",
                    {
                      key: "Fetch_0",
                      value: 0,
                    },
                    (0, _._)("#SteamLearn_ManualTrain_FetchNew"),
                  ),
                ),
                _.createElement(
                  "select",
                  {
                    className: _.TrainDropdown,
                    value: _,
                    onChange: (_) => _(parseInt(_.target.value)),
                  },
                  _.versions().map((_) =>
                    _.createElement(
                      "option",
                      {
                        key: `Fetch_${_}`,
                        value: _,
                      },
                      (0, _._)("#SteamLearn_ManualTrain_TrainVersion", _),
                    ),
                  ),
                  _.createElement(
                    "option",
                    {
                      key: "Fetch_0",
                      value: 0,
                    },
                    (0, _._)("#SteamLearn_ManualTrain_TrainNew"),
                  ),
                ),
              ),
            !_ &&
              _ &&
              _ &&
              _.createElement(
                _._,
                {
                  onClick: async () => {
                    let _ = _._.Init(_);
                    _.Body().set_project_config(_),
                      _.Body().fetch().set_fetch_id(_),
                      _.Body().fetch().set_request_cancel(!1),
                      _.Body().train().set_train_id(_),
                      _.Body().train().set_request_cancel(!1);
                    const _ = await _.Train(_.Get().GetServiceTransport(), _);
                    _(_, _),
                      _(_, _),
                      __webpack_require__.BIsValid() &&
                        1 == __webpack_require__.GetEResult() &&
                        (await _(_.project_id(), _.published_version()),
                        _.push(
                          _.SteamLearnProjectTrainStatus(
                            _.project_id(),
                            _.published_version(),
                          ),
                        ));
                  },
                },
                (0, _._)("#SteamLearn_ManualTrain_Start"),
              ),
            !_ &&
              _.createElement(
                "div",
                {
                  className: _.SaveWarning,
                },
                (0, _._)("#SteamLearn_ManualTrain_NeedSave"),
              ),
          ),
          _.createElement("div", {
            className: _.Separator,
          }),
          _.createElement(
            "div",
            {
              className: _.OptionBlock,
            },
            _.createElement(
              "div",
              {
                className: _.OptionHeader,
              },
              (0, _._)("#SteamLearn_ScheduledTrain_Heading"),
            ),
            _.createElement(
              "div",
              {
                className: _.OptionDesc,
              },
              (0, _._)("#SteamLearn_ScheduledTrain_Heading_Disc"),
            ),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_ScheduledTrain_Frequency"),
              fnGetValue: () => _.scheduled_train_config().scheduled_type(),
              fnSetValue: (_) =>
                _.scheduled_train_config().set_scheduled_type(parseInt(_)),
              options: _,
            }),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfMonth"),
              hidden: 4 != _.scheduled_train_config().scheduled_type(),
              fnGetInitialValue: () =>
                _.scheduled_train_config()
                  .scheduled_day_of_month()
                  ?.toString() || "1",
              fnValidateValue: (_) => _(_, 1, 31),
              fnSetValue: (_) =>
                _.scheduled_train_config().set_scheduled_day_of_month(
                  parseInt(_),
                ),
            }),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_ScheduledTrain_DayOfWeek"),
              hidden: 3 != _.scheduled_train_config().scheduled_type(),
              fnGetValue: () =>
                _.scheduled_train_config().scheduled_day_of_week(),
              fnSetValue: (_) =>
                _.scheduled_train_config().set_scheduled_day_of_week(
                  parseInt(_),
                ),
              options: _,
            }),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_ScheduledTrain_Hour"),
              hidden: !_,
              fnGetInitialValue: () =>
                _.scheduled_train_config().scheduled_hour()?.toString() || "0",
              fnValidateValue: (_) => _(_, 0, 23),
              fnSetValue: (_) =>
                _.scheduled_train_config().set_scheduled_hour(parseInt(_)),
            }),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_ScheduledTrain_Minute"),
              hidden: !_,
              fnGetInitialValue: () =>
                _.scheduled_train_config().scheduled_minute()?.toString() ||
                "0",
              fnValidateValue: (_) => _(_, 0, 59),
              fnSetValue: (_) =>
                _.scheduled_train_config().set_scheduled_minute(parseInt(_)),
            }),
            _.createElement(_, {
              label: (0, _._)("#SteamLearn_ScheduledTrain_ActivateThreshold"),
              hidden: 0 == _.scheduled_train_config().scheduled_type(),
              digitCount: 2,
              fnGetInitialValue: () =>
                _.scheduled_train_config()
                  .auto_activate_accuracy_threshold()
                  ?.toFixed(2) || "0.00",
              fnValidateValue: (_) => _(_, 0, 1),
              fnSetValue: (_) =>
                _.scheduled_train_config().set_auto_activate_accuracy_threshold(
                  parseFloat(_),
                ),
            }),
          ),
        );
      };
      var _ = __webpack_require__("chunkid");
      const _ = (_) => {
          if (!_.msgEvent)
            return _.createElement(
              "div",
              null,
              (0, _._)("#SteamLearn_Overview_NoLiveTrains"),
            );
          if (2 != _.msgEvent.event_type())
            return (
              console.log("LiveTrainElement called with non-train-end event?"),
              null
            );
          return _.createElement(
            "div",
            {
              className: _.LiveTrain,
            },
            _.createElement(
              "div",
              {
                className: _.LeftSide,
              },
              _.createElement(
                "div",
                {
                  className: _.Time,
                },
                new Date(1e3 * _.msgEvent.timestamp()).toLocaleString(
                  _._.GetPreferredLocales(),
                  {
                    month: "long",
                    day: "numeric",
                    hour: "numeric",
                    minute: "numeric",
                    hour12: !0,
                  },
                ),
              ),
              _.createElement(
                "div",
                {
                  className: _.TrainID,
                },
                (0, _._)(
                  "#SteamLearn_Event_TrainID",
                  _.msgEvent.train_ended().train_id(),
                ),
              ),
              _.createElement(
                "div",
                {
                  className: _.LossAccuracy,
                },
                (0, _._)(
                  "#SteamLearn_Event_CompletedDetails",
                  _.msgEvent.train_ended().loss().toFixed(4),
                  (100 * _.msgEvent.train_ended().accuracy()).toFixed(2),
                ),
              ),
            ),
            _.createElement("div", {
              className: _.RightSide,
            }),
          );
        },
        _ = () => {
          const { msgWorkingProjectConfig: _ } = _(),
            _ = new Date(),
            _ = new Date();
          __webpack_require__.setDate(_.getDate() - 30);
          const _ = 60 * Math.floor(_.getTime() / 6e4),
            _ = _(
              60 * Math.floor(__webpack_require__.getTime() / 6e4),
              _,
              _.project_id(),
              _.published_version(),
            ),
            _ = _.data,
            _ = _().data,
            [_, _] = _.useState(void 0),
            [_, _] = _.useState([]),
            [_, _] = _.useState([]),
            [_, _] = _.useState(!1);
          return (
            _.useEffect(() => {
              _(void 0), _([]), _([]);
            }, [_]),
            _.useEffect(() => {
              _ &&
                (async () => {
                  _(!0);
                  let _,
                    _ = [],
                    _ = [],
                    _ = [];
                  const _ = _.train_infos().map((_) => _.train_id());
                  let _ = [],
                    _ = [];
                  for (const _ of _.event_list()) {
                    switch (_.event_type()) {
                      case 1:
                        if (
                          _.project_id() != _.project_id() ||
                          !_.includes(_.train_started().train_id())
                        )
                          continue;
                        break;
                      case 2:
                        if (
                          _.project_id() != _.project_id() ||
                          !_.includes(_.train_ended().train_id())
                        )
                          continue;
                        break;
                      case 3:
                      case 5:
                        if (
                          _.project_id() != _.project_id() ||
                          !_.includes(_.train_set_live().train_id())
                        )
                          continue;
                        break;
                      case 4:
                        if (_.project_id() != _.project_id()) continue;
                    }
                    __webpack_require__.push(_),
                      1 == _.event_type() &&
                        (_.includes(_.train_started().fetch_id()) ||
                          _.push(_.train_started().fetch_id()),
                        _.includes(_.train_started().train_id()) ||
                          _.push(_.train_started().train_id())),
                      2 == _.event_type() &&
                        (_.includes(_.train_ended().train_id()) ||
                          _.push(_.train_ended().train_id()));
                  }
                  const _ = await _(_.project_id(), _, _);
                  let _ = new Map(),
                    _ = new Map();
                  for (const _ of _.fetch_responses()) _.set(_.fetch_id(), _);
                  for (const _ of _.train_responses()) _.set(_.train_id(), _);
                  for (const _ of _) {
                    if (1 == _.event_type()) {
                      if (2 == _.get(_.train_started().train_id()).status()) {
                        _.push(_);
                        continue;
                      }
                      switch (_.get(_.train_started().fetch_id()).status()) {
                        case 6:
                        case 2:
                        case 5:
                          _.push(_);
                          continue;
                      }
                    }
                    if (2 == _.event_type()) {
                      const _ = _.get(_.train_ended().train_id());
                      __webpack_require__.active() &&
                        __webpack_require__.live() &&
                        (_ = _);
                    }
                    _.push(_);
                  }
                  _(_), _(_), _(_), _(!1);
                })();
            }, [_, _]),
            _.createElement(
              "div",
              {
                className: _.ProjectOverviewPage,
              },
              _.isLoading &&
                _.createElement(
                  "div",
                  {
                    className: _.Loading,
                  },
                  (0, _._)("#SteamLearn_LoadingEvents"),
                ),
              _.isSuccess &&
                _.createElement(
                  "div",
                  {
                    className: _.OverviewContainer,
                  },
                  _.createElement(
                    "div",
                    {
                      className: _.LeftSide,
                    },
                    _.createElement(
                      "div",
                      {
                        className: _.LiveTrainSection,
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.LiveTrainHeader,
                        },
                        (0, _._)("#SteamLearn_Project_Overview_LiveTrain"),
                      ),
                      !_ &&
                        _.createElement(_, {
                          msgEvent: _,
                        }),
                    ),
                    _.createElement("div", {
                      className: _.Separator,
                    }),
                    _.length > 0 &&
                      _.createElement(
                        "div",
                        {
                          className: _.InProgressTrains,
                        },
                        _.createElement(
                          "div",
                          {
                            className: _.InProgressTrainsHeader,
                          },
                          (0, _._)(
                            "#SteamLearn_Project_Overview_InProgressTrain",
                          ),
                        ),
                        _.slice()
                          .reverse()
                          .map((_, _) =>
                            _.createElement(_, {
                              key: `Event_${_}`,
                              msgEvent: _,
                              arrMsgAllEvents: _,
                              bProjectSpecific: !0,
                            }),
                          ),
                        _.createElement("div", {
                          className: _.Separator,
                        }),
                      ),
                    _.createElement(
                      "div",
                      {
                        className: _.AllTrains,
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.AllTrainsHeader,
                        },
                        (0, _._)("#SteamLearn_Project_Overview_AllTrains"),
                      ),
                      _ &&
                        _.createElement(
                          "div",
                          null,
                          (0, _._)("#SteamLearn_Overview_SortingEvents"),
                        ),
                      !_ &&
                        _.createElement(
                          "div",
                          {
                            className: _.EventList,
                          },
                          _.slice()
                            .reverse()
                            .map((_, _) =>
                              _.createElement(_, {
                                key: `Event_${_}`,
                                msgEvent: _,
                                arrMsgAllEvents: _,
                                bProjectSpecific: !0,
                              }),
                            ),
                        ),
                    ),
                  ),
                  _.createElement(
                    "div",
                    {
                      className: _.RightSide,
                    },
                    _ &&
                      _.createElement(
                        "div",
                        {
                          className: _.AccessTokensContainer,
                        },
                        _.createElement(
                          "div",
                          {
                            className: _.AccessTokensHeader,
                          },
                          (0, _._)("#SteamLearn_Overview_AccessTokens"),
                        ),
                        _.createElement(
                          "div",
                          {
                            className: _.AccessToken,
                          },
                          _.createElement(
                            "div",
                            {
                              className: _.TokenName,
                            },
                            (0, _._)(
                              "#SteamLearn_Overview_AT_RegisterDataSource",
                            ),
                          ),
                          _.createElement(
                            "div",
                            {
                              className: _.TokenString,
                            },
                            _.access_tokens().register_data_source_access_token(),
                          ),
                        ),
                        _.createElement(
                          "div",
                          {
                            className: _.AccessToken,
                          },
                          _.createElement(
                            "div",
                            {
                              className: _.TokenName,
                            },
                            (0, _._)("#SteamLearn_Overview_AT_Snapshot"),
                          ),
                          _.createElement(
                            "div",
                            {
                              className: _.TokenString,
                            },
                            _.access_tokens()
                              .snapshot_project_access_tokens()
                              .find((_) => _.project_id() == _.project_id())
                              ?.access_token() || "?",
                          ),
                        ),
                        _.createElement(
                          "div",
                          {
                            className: _.AccessToken,
                          },
                          _.createElement(
                            "div",
                            {
                              className: _.TokenName,
                            },
                            (0, _._)("#SteamLearn_Overview_AT_Inference"),
                          ),
                          _.createElement(
                            "div",
                            {
                              className: _.TokenString,
                            },
                            _.access_tokens()
                              .inference_access_tokens()
                              .find((_) => _.project_id() == _.project_id())
                              ?.access_token() || "?",
                          ),
                        ),
                      ),
                    _.createElement("div", {
                      className: _.Separator,
                    }),
                    _.createElement(
                      "div",
                      {
                        className: _.DataSourcesContainer,
                      },
                      _.createElement(
                        "div",
                        {
                          className: _.DataSourcesHeader,
                        },
                        (0, _._)("#SteamLearn_Overview_DataSources"),
                      ),
                      _ &&
                        _.data_source_ids().map((_) =>
                          _.createElement(_, {
                            key: _,
                            nDataSourceID: _,
                            fnRemoveDataSource: void 0,
                            fnUpdateDataSource: void 0,
                          }),
                        ),
                    ),
                  ),
                ),
            )
          );
        },
        _ = {
          SteamLearnBase: () => "steamlearn",
          SteamLearnProject: () => "project",
          SteamLearnDashboard: () => "/dashboard",
          SteamLearnDataSources: () => "/datasources",
          SteamLearnProjectList: () => `/${_.SteamLearnProject()}/list`,
          SteamLearnProjectEvents: () => `/${_.SteamLearnProject()}/events`,
          SteamLearnProjectCreate: () => `/${_.SteamLearnProject()}/create`,
          SteamLearnProjectOverview: (_, _) =>
            `/${_.SteamLearnProject()}/${_ ?? ":id"}/${_ ?? ":version"}/overview`,
          SteamLearnProjectDataSources: (_, _) =>
            `/${_.SteamLearnProject()}/${_ ?? ":id"}/${_ ?? ":version"}/datasources`,
          SteamLearnProjectSnapshots: (_, _) =>
            `/${_.SteamLearnProject()}/${_ ?? ":id"}/${_ ?? ":version"}/snapshots`,
          SteamLearnProjectModel: (_, _) =>
            `/${_.SteamLearnProject()}/${_ ?? ":id"}/${_ ?? ":version"}/structure`,
          SteamLearnProjectTrainSettings: (_, _) =>
            `/${_.SteamLearnProject()}/${_ ?? ":id"}/${_ ?? ":version"}/trainsettings`,
          SteamLearnProjectTrain: (_, _) =>
            `/${_.SteamLearnProject()}/${_ ?? ":id"}/${_ ?? ":version"}/train`,
          SteamLearnProjectTrainStatus: (_, _) =>
            `/${_.SteamLearnProject()}/${_ ?? ":id"}/${_ ?? ":version"}/trainstatus`,
          SteamLearnProjectInferenceTester: (_, _) =>
            `/${_.SteamLearnProject()}/${_ ?? ":id"}/${_ ?? ":version"}/inferencetester`,
        };
      function _(_, _) {
        return _.some((_) =>
          (0, _._)(_, {
            path: _,
            exact: !1,
            strict: !1,
          }),
        );
      }
      function _(_) {
        return _(_, [
          _.SteamLearnProjectOverview(void 0, void 0),
          _.SteamLearnProjectDataSources(void 0, void 0),
          _.SteamLearnProjectSnapshots(void 0, void 0),
          _.SteamLearnProjectModel(void 0, void 0),
          _.SteamLearnProjectTrainSettings(void 0, void 0),
          _.SteamLearnProjectTrain(void 0, void 0),
          _.SteamLearnProjectTrainStatus(void 0, void 0),
          _.SteamLearnProjectInferenceTester(void 0, void 0),
        ]);
      }
      function _(_) {
        const _ = (0, _._)(),
          { msgWorkingProjectConfig: __webpack_require__ } = _();
        return _(_.pathname) && !__webpack_require__
          ? null
          : _.createElement(
              "div",
              {
                className: _.MainAppContainer,
              },
              _.children,
            );
      }
      function _() {
        const _ = (0, _._)(),
          {
            nProjectID: _,
            nPublishedVersion: __webpack_require__,
            msgWorkingProjectConfig: _,
          } = _();
        if (!_(_.pathname)) return null;
        const _ = _ && _.data_source_ids().length > 0,
          _ = [
            {
              name: (0, _._)("#SteamLearn_Project_Overview"),
              fnRoute: _.SteamLearnProjectOverview,
              disabled: !1,
            },
            {
              name: (0, _._)("#SteamLearn_Project_DataSources"),
              fnRoute: _.SteamLearnProjectDataSources,
              disabled: !1,
            },
            {
              name: (0, _._)("#SteamLearn_Project_Snapshots"),
              fnRoute: _.SteamLearnProjectSnapshots,
              disabled: !_,
            },
            {
              name: (0, _._)("#SteamLearn_Project_ModelStructure"),
              fnRoute: _.SteamLearnProjectModel,
              disabled: !_,
            },
            {
              name: (0, _._)("#SteamLearn_Project_TrainSettings"),
              fnRoute: _.SteamLearnProjectTrainSettings,
              disabled: !_,
            },
            {
              name: (0, _._)("#SteamLearn_Project_Train"),
              fnRoute: _.SteamLearnProjectTrain,
              disabled: !_,
            },
            {
              name: (0, _._)("#SteamLearn_Project_TrainStatus"),
              fnRoute: _.SteamLearnProjectTrainStatus,
              disabled: !_,
            },
            {
              name: (0, _._)("#SteamLearn_Project_InferenceTester"),
              fnRoute: _.SteamLearnProjectInferenceTester,
              disabled: !_,
            },
          ];
        return _.createElement(
          "div",
          {
            className: _.ProjectTabContainer,
          },
          _.map((_, _) =>
            _.createElement(
              "div",
              {
                key: _.name,
                className: _.TabAndSpacer,
              },
              _.createElement(
                _._,
                {
                  _: _.fnRoute(_, __webpack_require__),
                  className: (0, _._)(
                    _.Tab,
                    _(_.pathname, [_.fnRoute(void 0, void 0)]) && _.Active,
                    _.disabled && _.Disabled,
                  ),
                },
                _.name,
              ),
              _ < _.length - 1 &&
                _.createElement("div", {
                  className: _.TabSpacer,
                }),
            ),
          ),
        );
      }
      const _ = () => {
        const _ = (0, _._)();
        let _ = "";
        return (
          _(_.pathname)
            ? (_ = "#SteamLearn_Project")
            : _(_.pathname, [_.SteamLearnDataSources()])
              ? (_ = "#SteamLearn_DataSources")
              : (function (_) {
                  return _(_, [_.SteamLearnDashboard()]);
                })(_.pathname) && (_ = "#SteamLearn_Dashboard"),
          "" == _ ? null : _.createElement("h1", null, (0, _._)(_))
        );
      };
      function _() {
        const [_, _] = _.useState(0);
        return _.createElement(
          "div",
          {
            className: _.SteamLearnApp,
          },
          _.createElement(
            _._,
            {
              basename: (0, _._)() + _.SteamLearnBase(),
            },
            _.createElement(
              _,
              null,
              _.createElement(_, null),
              _.createElement("hr", null),
              _.createElement(_, {
                incrementDiscardCounter: function () {
                  _(_ + 1);
                },
              }),
              _.createElement(_, null),
              _.createElement(
                _,
                null,
                _.createElement(
                  _._,
                  null,
                  _.createElement(_._, {
                    path: _.SteamLearnDashboard(),
                    component: _,
                  }),
                  _.createElement(_._, {
                    path: _.SteamLearnProjectCreate(),
                    component: _,
                  }),
                  _.createElement(_._, {
                    path: _.SteamLearnDataSources(),
                    component: _,
                  }),
                  _.createElement(_._, {
                    path: _.SteamLearnProjectOverview(void 0, void 0),
                    component: _,
                  }),
                  _.createElement(_._, {
                    path: _.SteamLearnProjectDataSources(void 0, void 0),
                    render: () =>
                      _.createElement(_, {
                        key: _.toString(),
                      }),
                  }),
                  _.createElement(_._, {
                    path: _.SteamLearnProjectSnapshots(void 0, void 0),
                    component: _,
                  }),
                  _.createElement(_._, {
                    path: _.SteamLearnProjectModel(void 0, void 0),
                    component: _,
                  }),
                  _.createElement(_._, {
                    path: _.SteamLearnProjectTrainSettings(void 0, void 0),
                    component: _,
                  }),
                  _.createElement(_._, {
                    path: _.SteamLearnProjectTrain(void 0, void 0),
                    component: _,
                  }),
                  _.createElement(_._, {
                    path: _.SteamLearnProjectTrainStatus(void 0, void 0),
                    component: _,
                  }),
                  _.createElement(_._, {
                    path: _.SteamLearnProjectInferenceTester(void 0, void 0),
                    component: _,
                  }),
                  _.createElement(_._, {
                    from: "/",
                    _: _.SteamLearnDashboard(),
                  }),
                ),
              ),
            ),
          ),
        );
      }
    },
  },
]);
